<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>两道求最大面积的题目在解法上的不同</title>
    <url>/2021/01/01/%E4%B8%A4%E9%81%93%E6%B1%82%E6%9C%80%E5%A4%A7%E9%9D%A2%E7%A7%AF%E7%9A%84%E9%A2%98%E7%9B%AE%E5%9C%A8%E8%A7%A3%E6%B3%95%E4%B8%8A%E7%9A%84%E4%B8%8D%E5%90%8C/</url>
    <content><![CDATA[<p>今天发现两道看似十分相似但实际上有很大不同的题目，差点转不过弯来，分别是<strong>LeetCode 11 盛最多水的容器</strong>和<strong>LeetCode 84 柱状图中最大的矩形</strong>。</p>
<a id="more"></a>

<p><strong>LeetCode 11 盛最多水的容器</strong></p>
<blockquote>
<p>给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p>
<p>说明：你不能倾斜容器。</p>
</blockquote>
<p><strong>LeetCode 84 柱状图中最大的矩形</strong></p>
<blockquote>
<p>给定 <em>n</em> 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。</p>
<p>求在该柱状图中，能够勾勒出来的矩形的最大面积。</p>
</blockquote>
<p>我先写了84题，再回过头写11题时，以为两道题的区别就是柱状图和“挡板”的区别，还是用单调栈的方法，只需在求面积的时候做一点小修改即可。</p>
<p>先看84题。从左往右遍历柱状图的每一个柱形，若当前遍历到的柱形比上一个柱形高，则无法确定以上一个柱形的高为高的最大矩形面积，因为矩形可以越过当前柱形，一直延伸到右边，而右边的情况还不知道；反之，若当前遍历到的柱形比上一个柱形低，则以上一个柱形的高为高的矩形肯定无法越过当前柱形，又因为其左侧所有柱形已经遍历过了，所以矩形能够延伸到的左右两边的极限都可以确定，以上一个柱形的高为高的最大矩形面积也确定下来了。实际上，以当前柱形左侧的所有比当前柱形高的柱形的高为高的最大矩形面积都可以确定下来了。上述算法可以通过栈实现，栈中依次存储所有以第i个柱形为高的矩形的最大面积还未确定时的i值。</p>
<p>解决了第84题，我把代码套到第11题的时候发现无论我怎么修改边界条件，得出来的结果与答案都相去甚远。再次读题目的时候发现两道题有一个很大的不同：在第11题中，若确定了左右边界i、j，则所得矩形的高为min{height[i], height[j]}，换言之，<strong>水可以漫过挡板i、j中间的挡板</strong>；但在第84题中，所得矩形的高还受柱形i、j中间的柱形的限制，其值为min{height[i], height[i + 1], …, height[j - 1], height[j]}，换言之，<strong>柱形相当于容器，水不能超出容器，而且水的形状必须是矩形，可以将其理解为“冰块”</strong>。</p>
<p>因此，第11题只要确定了左右边界i、j，就可以确定矩形的面积，故遍历时使用双指针即可。</p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>区间调度问题</title>
    <url>/2020/12/28/%E5%8C%BA%E9%97%B4%E8%B0%83%E5%BA%A6%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="一、区间不相交问题"><a href="#一、区间不相交问题" class="headerlink" title="一、区间不相交问题"></a>一、区间不相交问题</h2><blockquote>
<p>给出N个开区间(start, end)，从中选择尽可能多的区间，使得这些区间两两不相交。</p>
</blockquote>
<a id="more"></a>

<p>解决思路是将区间集合S中的所有区间按照end值从小到大的顺序进行排序，然后执行下列步骤：</p>
<ol>
<li>从区间集合S中选取end值最小的区间i，将i加入区间集合T。</li>
<li>寻找与i相交的所有区间，将这些区间从集合S中删除。</li>
<li>若S非空，跳转到步骤1。</li>
</ol>
<p>区间T即为所求。</p>
<p>证明思路可以考虑反证法：假设某一次选择的i的end值并不是集合S中最小的，如果存在与区间i相交且end值更小的区间i’，则选择i’所移除的区间数不会大于选择i所移除的区间数，此时选取end值更小的i’会使局部结果更优。</p>
<p>实现如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; a, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a[<span class="number">1</span>] &lt; b[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mostDisjointIntervals</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; intervals)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (intervals.empty())</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    sort(intervals.begin(), intervals.end(), cmp);</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; intervals.size())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 找到第一个不与intervals[i]相交的区间intervals[j]</span></span><br><span class="line">        <span class="keyword">while</span> (j &lt; intervals.size() &amp;&amp; intervals[j][<span class="number">0</span>] &lt; intervals[i][<span class="number">1</span>] )</span><br><span class="line">            ++j;</span><br><span class="line">        ++count;</span><br><span class="line">        i = j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="二、应用1：LeetCode-435-无重叠区间"><a href="#二、应用1：LeetCode-435-无重叠区间" class="headerlink" title="二、应用1：LeetCode 435 无重叠区间"></a>二、应用1：LeetCode 435 无重叠区间</h2><blockquote>
<p>给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。</p>
</blockquote>
<p>移除的最小区间数量就是区间总数减去剩余的最大区间数量。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">eraseOverlapIntervals</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; intervals)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> intervals.size() - mostDisjointIntervals(intervals);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="三、应用2：LeetCode-452-用最少数量的箭引爆气球"><a href="#三、应用2：LeetCode-452-用最少数量的箭引爆气球" class="headerlink" title="三、应用2：LeetCode 452 用最少数量的箭引爆气球"></a>三、应用2：LeetCode 452 用最少数量的箭引爆气球</h2><blockquote>
<p>在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以纵坐标并不重要，因此只要知道开始和结束的横坐标就足够了。开始坐标总是小于结束坐标。</p>
<p>一支弓箭可以沿着 x 轴从不同点完全垂直地射出。在坐标 x 处射出一支箭，若有一个气球的直径的开始和结束坐标为 xstart，xend， 且满足  xstart ≤ x ≤ xend，则该气球会被引爆。可以射出的弓箭的数量没有限制。 弓箭一旦被射出之后，可以无限地前进。我们想找到使得所有气球全部被引爆，所需的弓箭的最小数量。</p>
<p>给你一个数组 points ，其中 points [i] = [xstart,xend] ，返回引爆所有气球所必须射出的最小弓箭数。</p>
</blockquote>
<p>在区间不相交问题中，每当选取一个区间时，与其相交的区间也会被移除。这相当于在本问题中，每射爆一个气球，与其相重叠的气球也会被射爆。因此两个问题是等价的，可以套用前面的代码，只不过本题中的区间是闭区间而不是开区间，需要修改边界条件。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mostDisjointIntervals</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; intervals)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">while</span> (i &lt; intervals.size())</span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 将小于号改为小于等于号</span></span><br><span class="line">        <span class="keyword">while</span> (j &lt; intervals.size() &amp;&amp; intervals[j][<span class="number">0</span>] &lt;= intervals[i][<span class="number">1</span>] )</span><br><span class="line">            ++j;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="四、变形1：LeetCode-56-合并区间"><a href="#四、变形1：LeetCode-56-合并区间" class="headerlink" title="四、变形1：LeetCode 56 合并区间"></a>四、变形1：LeetCode 56 合并区间</h2><blockquote>
<p>给出一个区间的集合，请合并所有重叠的区间。</p>
</blockquote>
<p>本题仍是与区间重叠相关的问题，但是与上面三题有一点不同。上面三题的重叠区间是以某一个区间为参照的，也就是说所有的区间都必须与某一个特定的区间重叠。但是这一题不需要，对于所要合并的区间集合中的每一个区间，只需要与集合中的任意一个区间重叠即可。</p>
<p>本题的算法核心仍是贪心，但是需要做出一点调整：对区间集合使用字典排序，即先比较start，按照start升序排列，若start值相同，再按end升序排列。这样排序的目的是使所有能够进行合并的区间相邻。排序后，从前往后遍历区间，将尽可能多的相邻的重叠区间合并成一个大区间。对于每个合并后的大区间，其start值就是最左侧的小区间的start，其end值是所有小区间当中end值最大的那个。故在遍历期间，需要维护变量maxEnd存储end值的最大值。</p>
<p>题解如下，可见代码在上述三题的基础上修改了比较函数、内层循环的条件以及增加了maxEnd变量的维护：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; a, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a[<span class="number">0</span>] &gt; b[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a[<span class="number">0</span>] &lt; b[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a[<span class="number">1</span>] &lt; b[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; merge(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; intervals)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="keyword">if</span> (intervals.empty())</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    sort(intervals.begin(), intervals.end(), cmp);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; intervals.size())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> maxEnd = intervals[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 找到第一个不与intervals[i]相交的区间intervals[j]</span></span><br><span class="line">        <span class="keyword">while</span> (j &lt; intervals.size() &amp;&amp; intervals[j][<span class="number">0</span>] &lt;= maxEnd)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (intervals[j][<span class="number">1</span>] &gt; maxEnd)</span><br><span class="line">            maxEnd = intervals[j][<span class="number">1</span>];</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;  </span><br><span class="line">        ans.push_back(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &#123;intervals[i][<span class="number">0</span>], maxEnd&#125;);</span><br><span class="line">        i = j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="五、变形2：LeetCode-57-插入区间"><a href="#五、变形2：LeetCode-57-插入区间" class="headerlink" title="五、变形2：LeetCode 57 插入区间"></a>五、变形2：LeetCode 57 插入区间</h2><blockquote>
<p>给出一个<em>无重叠的 ，</em>按照区间起始端点排序的区间列表。</p>
<p>在列表中插入一个新的区间，你需要确保列表中的区间仍然有序且不重叠（如果有必要的话，可以合并区间）。</p>
</blockquote>
<p>这道题的难度为“困难”，但是相比之前的几道题目其实反而不需要用到什么特别的算法，只需从左到右遍历区间集合，找到新区间的插入位置并进行（可能的）合并操作。题目给的区间集合是<strong>无重叠</strong>的，因此省去了存储maxEnd的步骤，只需考虑边界条件进行适当的分类讨论即可。我的代码较为复杂，还可以进一步简化。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; insert(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; intervals, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; newInterval)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="keyword">if</span> (intervals.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        ans.push_back(newInterval);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> inserted = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; intervals.size())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!inserted)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (newInterval[<span class="number">0</span>] &gt; intervals[i][<span class="number">1</span>])</span><br><span class="line">                ans.push_back(intervals[i++]);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (newInterval[<span class="number">1</span>] &gt;= intervals[i][<span class="number">0</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (j &lt; intervals.size() &amp;&amp; intervals[j][<span class="number">0</span>] &lt;= newInterval[<span class="number">1</span>])</span><br><span class="line">                    ++j;</span><br><span class="line">                <span class="keyword">int</span> newStart = min(newInterval[<span class="number">0</span>], intervals[i][<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">if</span> (j == i + <span class="number">1</span>)</span><br><span class="line">                    ans.push_back(&#123;newStart, max(intervals[i][<span class="number">1</span>], newInterval[<span class="number">1</span>])&#125;);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    ans.push_back(&#123;newStart, max(intervals[j - <span class="number">1</span>][<span class="number">1</span>], newInterval[<span class="number">1</span>])&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                inserted = <span class="literal">true</span>;</span><br><span class="line">                i = j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ans.push_back(newInterval);</span><br><span class="line">                ans.push_back(intervals[i++]);</span><br><span class="line">                inserted = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans.push_back(intervals[i++]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!inserted)</span><br><span class="line">        ans.push_back(newInterval);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次几乎踩了所有坑的Ubuntu双系统安装</title>
    <url>/2021/01/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%87%A0%E4%B9%8E%E8%B8%A9%E4%BA%86%E6%89%80%E6%9C%89%E5%9D%91%E7%9A%84Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我的破本本用虚拟机跑Linux实在是顶不住，于是我昨天晚上一时兴起，想要给笔记本装 Windows 10 + Ubuntu 20.04 LTS 双系统。我的笔记本是UEFI引导，128GB SSD + 1TB机械硬盘，分区表格式都是GPT，Windows 10装在SSD上，计划在机械硬盘上分出128GB装Ubuntu（至于为什么才分这么点，显然是因为1T的硬盘几乎快被游戏填满了，逃）。</p>
<p>要么是我电脑的硬件兼容性太差，要么是我运气不佳，这次安装我居然步步踩坑，从昨天晚上折腾到今天晚上才把所有问题解决。<strong>这篇文章记录了我踩坑的全过程，仅供参考，切勿当作教程使用。</strong></p>
<a id="more"></a>

<h1 id="一、安装过程"><a href="#一、安装过程" class="headerlink" title="一、安装过程"></a>一、安装过程</h1><p>首先进行分区，我参考网上一篇教程，在SSD上划分出200M作为EFI引导分区，然后在机械硬盘上划分出128GiB空间作为Ubuntu主分区（注意：划分过程需要耐心等待，印象中花费了超过半个小时）。为了方便随后的安装过程中根据分区大小和位置找分区，我把分区结果拍了下来。</p>
<img src="img1.jpg" width=480 height=360>

<p>然后就可以使用U盘启动Ubuntu安装程序了：我从官网上下载了Ubuntu 20.04 LTS镜像，刻录到U盘当中。进UEFI BIOS（以下简称BIOS）把安全启动关闭，把U盘启动优先级调为最高，进入Ubuntu安装向导。</p>
<h2 id="坑1-安装向导卡住"><a href="#坑1-安装向导卡住" class="headerlink" title="坑1. 安装向导卡住"></a>坑1. 安装向导卡住</h2><p>此时，第一个坑来了。在选择”正常安装“和”最小安装“的界面，我点击继续后卡住不动了。</p>
<img src="img2.jpg" width=480 height=360>

<p>解决方法是：在进入安装向导之前的grub菜单处按e编辑启动选项，将<code>quiet splash ---</code>改为<code>quiet splash nomodeset</code>，即增加nomodeset启动选项。nomodeset的含义如下：</p>
<blockquote>
<p>The newest kernels have moved the video mode setting into the kernel.   So all the programming of the hardware specific clock rates and  registers on the video card happen in the kernel rather than in the X  driver when the X server starts.. This makes it possible to have high  resolution nice looking splash (boot) screens and flicker free  transitions from boot splash to login screen. Unfortunately, on some  cards this doesnt work properly and you end up with a <strong>black screen</strong>. Adding the nomodeset parameter instructs the kernel to not load video drivers and use BIOS modes instead until X is loaded. </p>
</blockquote>
<p>大意为，在新版的kernels当中，加载视频驱动的工作从原本的在加载图形化服务时进行，改为在加载kernel的时候就进行了，而部分显卡不兼容这一设定，可以用nomodeset选项改回原来的模式。</p>
<p>继续进行安装向导，安装方式选择“其他”，手动进行分区。我将128GiB的空间划分为swap、/和/home三个分区，其中swap分区的大小参照Ubuntu官网划分为11GB，剩下的按照1:3划分给/和/home。swap分区作为虚拟内存的一部分，Ubuntu官网的推荐值为：如果使用休眠功能，最小值不小于RAM，否则不小于sqrt(RAM)；其最大值不应超过RAM的两倍。此外，在分区界面，我将启动盘设置为SSD上分出来的那200M。分区完成，进行后续的设置后就完成安装了（由于还未设置代理，安装过程中我skip了需要下载的内容）。</p>
<h2 id="坑2-开机后直接进入Windows-10"><a href="#坑2-开机后直接进入Windows-10" class="headerlink" title="坑2. 开机后直接进入Windows 10"></a>坑2. 开机后直接进入Windows 10</h2><p>但是当我兴冲冲地重启电脑后发现：根本没有出现操作系统选择列表，开机后同原本一样直接进入Windows 10，第二个坑来了。</p>
<p>在Windows 10自带的磁盘管理页面中，我能看到机械硬盘上128GiB的空间被划为三个部分，同时SSD上那200M由空闲状态变为EFI系统文件状态，因此分区没有问题。会不会是引导的问题？我使用启动盘中的Try Ubuntu功能进入Ubuntu试用版，使用以下指令安装并运行了引导修复工具：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:yannubuntu/boot-repair -y</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install boot-repair -y</span><br></pre></td></tr></table></figure>
<p>修复完成后弹出以下窗口：</p>
<img src="img3.jpg" width=480 height=360>

<p>按照第一句话，我应该将在BIOS当中把Ubuntu引导文件加入到启动项当中，但是我的BIOS并没有添加自定义启动项的功能。按照第二句话，我应该把Ubuntu启动项设置到Windows前面，但是我并没有在BIOS的启动选项当中看到Ubuntu和Windows，只有一个笼统的“操作系统的启动管理员”。因此我按照第三句话，在Windows命令行中将启动路径设置为Ubuntu的引导文件，没有效果。</p>
<p>我翻遍了BIOS，尝试了包括清除安全启动key和设置密码之内的多种方法都没有找到添加启动项的地方，正当我不知道应该如何继续时，我发现了启动项“操作系统的启动管理员”左边的小箭头。。。原来这个选项是可以细分的，按Enter果然弹出了Windows和Ubuntu两个启动项。这可能是我整个安装过程中犯过的最蠢的错误：对自己电脑的BIOS操作不熟悉。我将Ubuntu启动项设置到Windows前面之后，果然不再进入Windows了，第二个坑解决。</p>
<img src="img4.jpg" width=480 height=360>

<h2 id="坑3-开机后进入grub命令行"><a href="#坑3-开机后进入grub命令行" class="headerlink" title="坑3. 开机后进入grub命令行"></a>坑3. 开机后进入grub命令行</h2><p>第二个坑一解决，第三个坑随之而来：开机后进入的是grub命令行界面而不是grub菜单界面。我依然怀疑是引导出了问题，因此插入U盘，选择擦除旧系统再安装Ubuntu的选项重装系统。由于对引导缺乏认识，我也不清楚之前的引导是否正确安装，因此这次我选择让安装程序自动擦除旧系统后自动分区并安装。结果还是一样，依旧是开机后进入grub命令行。此时我再次查看Windows 10的磁盘管理，发现swap、/、/home的分区大小几乎没有改变，但是在机械硬盘上增加了一个EFI引导分区，且SSD上原来分配的200M也还在。</p>
<p>在grub命令行输入以下指令进入grub菜单：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls</span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时会显示磁盘列表</span></span><br><span class="line">ls 磁盘编号/boot/grub # 对所有磁盘编号尝试此指令，直至提示找到文件</span><br><span class="line">set root=找到文件的磁盘编号</span><br><span class="line">set prefix=找到文件的磁盘编号/boot/grub</span><br><span class="line">insmod normal</span><br><span class="line">normal</span><br></pre></td></tr></table></figure>
<p>此时终于能进入grub菜单，选择Ubuntu系统。</p>
<h2 id="坑4-Ubuntu系统只有鼠标"><a href="#坑4-Ubuntu系统只有鼠标" class="headerlink" title="坑4. Ubuntu系统只有鼠标"></a>坑4. Ubuntu系统只有鼠标</h2><p>紧接着第四个坑又来了：Ubuntu系统进入后，只有鼠标和背景，没有图标，无法进行任何操作。</p>
<p>经过尝试，解决方法是使用安全模式进入Ubuntu，修改/etc/default/grub文件中的<code>quiet splash</code>改为<code>quiet splash nomodeset</code>，然后执行<code>sudo update-grub</code>指令更新grub。居然还是同样的问题，只不过这个指令如果在grub菜单中按e修改是一次性的，只有修改/etc/default/grub文件才能永久生效。</p>
<p>踩完了四个坑，终于能正常进入Ubuntu了。不过，一进入系统，我就明显感觉屏幕非常暗。尝试笔记本的亮度调节功能键，无效；进入Ubuntu设置，居然找不到调节亮度的地方！我决定先配置代理，能够浏览Google之后再来解决亮度的问题。</p>
<p>顺利进入Ubuntu后，我使用<code>df -lh</code>和<code>fdisk -l</code>指令查看分区情况，发现/boot/efi被挂载在Windows 10的EFI引导分区上。此时，SSD上我划分出来的200M是闲置的，于是我使用Windows 10的DiskGenius软件将200M合并回Windows 10的C盘。至此，Ubuntu系统可以算是顺利安装完成。</p>
<h1 id="二、配置代理"><a href="#二、配置代理" class="headerlink" title="二、配置代理"></a>二、配置代理</h1><p>我使用的代理工具是Clash。从Github仓库下载Clash的Release版本，解压后获得可执行文件。我存放在/opt/clash文件夹当中。第一次运行Clash会自动生成配置文件config.yaml和IP库文件Country.mmdb，文件存放路径为<code>~/.config/clash</code>。我将自己的config.yaml和Country.mmdb覆盖<code>~/.config/clash</code>目录中的文件，Clash即可正常运行。可在浏览器中输入clash.razord.top进入Clash的Web界面。</p>
<h2 id="1-GNOME代理"><a href="#1-GNOME代理" class="headerlink" title="1. GNOME代理"></a>1. GNOME代理</h2><p>进入系统设置-网络-网络代理，模式设置为手动，填入相应的IP和端口号即可。此时，Firefox可以访问Google。</p>
<h2 id="2-终端代理和开机启动"><a href="#2-终端代理和开机启动" class="headerlink" title="2. 终端代理和开机启动"></a>2. 终端代理和开机启动</h2><p>在系统设置当中配置代理只能让GNOME应用使用，而终端程序还要单独配置。配置方法十分简单，只需设置两个环境变量：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export http_proxy=http://127.0.0.1:7890</span><br><span class="line">export https_proxy=http://127.0.0.1:7890</span><br></pre></td></tr></table></figure>
<p>此时在非root账户当中可以使用<code>wget google.com</code>指令获取谷歌主页，然而在root账户中还不行，因为进入root账户时默认不会保存环境变量的值，解决方法是在/etc/sudoers中加入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Defaults env_keep += <span class="string">&quot;http_proxy https_proxy no_proxy&quot;</span></span><br></pre></td></tr></table></figure>
<p>再来配置开机启动，开机启动首先需要以下shell脚本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">gsettings set org.gnome.system.proxy mode &#x27;manual&#x27; # ubuntu网络模式配置为手动</span><br><span class="line">cd /opt/clash  # 切换到Clash的目录</span><br><span class="line">./clash -d /opt/clash &amp;  # 在后台执行clash客户端</span><br><span class="line">echo &quot;Clash started!&quot;  # 启动成功的提示</span><br></pre></td></tr></table></figure>
<p>-d后面的路径设置为存放config.yaml和Country.mmdb的路径，&amp;表示后台运行。</p>
<p>将上述脚本连同设置两个环境变量的指令一同添加到~/.profile文件当中，即可实现登陆当前账户时自动运行Clash并设置系统代理。由于/etc/sudoers文件也进行了修改，root账户也能够走代理。</p>
<h1 id="三、无法设置亮度"><a href="#三、无法设置亮度" class="headerlink" title="三、无法设置亮度"></a>三、无法设置亮度</h1><p>再回过头来解决亮度的问题，我先后尝试过以下几种方法：</p>
<h2 id="1-修改grub"><a href="#1-修改grub" class="headerlink" title="1. 修改grub"></a>1. 修改grub</h2><p>在/etc/default/grub中设置以下参数并更新grub：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX=&quot;acpi_backlight=vendor&quot;</span><br></pre></td></tr></table></figure>
<p>失败。</p>
<h2 id="2-使用亮度调节工具"><a href="#2-使用亮度调节工具" class="headerlink" title="2. 使用亮度调节工具"></a>2. 使用亮度调节工具</h2><p>我先后尝试了brightness-controller和brightness-controller-simple两款工具，均失败。</p>
<h2 id="3-修改亮度文件"><a href="#3-修改亮度文件" class="headerlink" title="3. 修改亮度文件"></a>3. 修改亮度文件</h2><p>与亮度有关的文件存放在/sys/class/backlight文件夹中，然而，我的这个文件夹是空的，该方法失败。</p>
<h2 id="4-更新驱动"><a href="#4-更新驱动" class="headerlink" title="4. 更新驱动"></a>4. 更新驱动</h2><p>一开始我使用这条指令更新驱动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ubuntu-drivers autoinstall</span><br></pre></td></tr></table></figure>
<p>然而不仅没有效果，因为这条指令为我安装了新版本的内核，使系统多内核共存，我还无法进入系统。我只能手动选择内核版本，设置为旧版系统启动，然后删除新版本。几个小时后，我阴差阳错地在“应用-软件和更新-附加驱动“当中看到了Nvidia显卡的驱动选择列表。默认选择的是开源驱动，我将其改为最新版的专用的、tested的驱动。</p>
<p>驱动更新后，重启电脑，居然又进不去系统了，提示”unable to bind the codec”。解决方法为：将/etc/default/grub文件中的quite、slash、nomodeset三个参数都删除。quiet splash的含义如下：</p>
<blockquote>
<p>The splash (which eventually ends up in your /boot/grub/grub.cfg ) causes the splash screen to be shown.</p>
<p>At the same time you want the boot process to be quiet, as otherwise all kinds of messages would disrupt that splash screen.</p>
<p>Although specified in GRUB these are kernel parameters influencing the loading of the kernel or its modules, not something that changes GRUB  behaviour. The significant part from GRUB_CMDLINE_LINUX_DEFAULT is CMDLINE_LINUX.</p>
</blockquote>
<p>光看说明我也不太明白，不过三个参数均删除之后确实可以进入系统，而且由于更新了驱动，亮度调节的滑块也出现了。Fn功能键也能正常调节亮度。</p>
<h1 id="四、扬声器无声"><a href="#四、扬声器无声" class="headerlink" title="四、扬声器无声"></a>四、扬声器无声</h1><p>我写这篇博客写到一半时，突然想听歌，于是又发现了另外一个问题：扬声器之前有声音的，现在没有了。好家伙，连写博客都不能让我好好写。我运行自带的alsamixer工具发现，Headphone音量被设置为0，只需设置成100即可恢复正常。我怀疑是显卡驱动更新的时候更改的。</p>
<h1 id="五、无法挂起"><a href="#五、无法挂起" class="headerlink" title="五、无法挂起"></a>五、无法挂起</h1><p>在挂起状态按任意键唤醒之后，屏幕左上角会显示一个光标，然后卡在这个页面。尝试网上的教程安装laptop-mode-tools也无法解决，最后发现将显卡驱动降级即可。我室友的Surface Book也有同样的问题，但是它的核显支持的驱动较少，无法用这个方法解决。</p>
<h1 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h1><p>这次安装踩的坑是真的多，不过我的第一反应是想用这篇博客记录下这个过程，而不是放弃。可能，这就是Linux的魅力吧。</p>
<p>生命不止，折腾不息。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>我的实用软件清单</title>
    <url>/2021/07/10/%E6%88%91%E7%9A%84%E5%AE%9E%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95/</url>
    <content><![CDATA[<p>我的电脑上装了很多奇奇怪怪的小工具，今天做一个总结，以供查阅。</p>
<a id="more"></a>

<h4 id="一、系统工具类"><a href="#一、系统工具类" class="headerlink" title="一、系统工具类"></a>一、系统工具类</h4><h5 id="DiskInternals-Linux-Reader：在Windows下访问Linux文件系统"><a href="#DiskInternals-Linux-Reader：在Windows下访问Linux文件系统" class="headerlink" title="DiskInternals Linux Reader：在Windows下访问Linux文件系统"></a>DiskInternals Linux Reader：在Windows下访问Linux文件系统</h5><p>官网：<a href="https://www.diskinternals.com/linux-reader/">Access to Ext 2/3/4, HFS and ReiserFS from Windows| DiskInternals</a></p>
<p>免费版只支持保存文件，收费版能够mount to system。</p>
<h5 id="DiskGenius：磁盘分区管理软件"><a href="#DiskGenius：磁盘分区管理软件" class="headerlink" title="DiskGenius：磁盘分区管理软件"></a>DiskGenius：磁盘分区管理软件</h5><p>官网：<a href="https://www.diskgenius.cn/">数据恢复软件,硬盘分区工具,系统备份软件 - DiskGenius官方网站</a></p>
<p>有一次帮朋友重装系统的时候不小心留了一片剩余空间，最后用这个工具合并的。</p>
<h5 id="BestTrace：路由追踪"><a href="#BestTrace：路由追踪" class="headerlink" title="BestTrace：路由追踪"></a>BestTrace：路由追踪</h5><p>官网：<a href="https://www.ipip.net/product/client.html">BestTrace 客户端_专业的 IP 地址库_IPIP.NET</a></p>
<p>用于众所周知的用途。</p>
<h5 id="TrafficMonitor：网速、CPU、内存显示工具"><a href="#TrafficMonitor：网速、CPU、内存显示工具" class="headerlink" title="TrafficMonitor：网速、CPU、内存显示工具"></a>TrafficMonitor：网速、CPU、内存显示工具</h5><p>官网：<a href="https://github.com/zhongyang219/TrafficMonitor">zhongyang219/TrafficMonitor: 这是一个用于显示当前网速、CPU及内存利用率的桌面悬浮窗软件，并支持任务栏显示，支持更换皮肤。 (github.com)</a></p>
<p>可在任务栏显示CPU、内存占用率和网速，也可以用悬浮窗显示，不过不如任务栏简洁。</p>
<h5 id="Core-Temp：CPU温度显示"><a href="#Core-Temp：CPU温度显示" class="headerlink" title="Core Temp：CPU温度显示"></a>Core Temp：CPU温度显示</h5><p>官网：<a href="https://www.alcpu.com/CoreTemp/">Core Temp (alcpu.com)</a></p>
<p>任务栏托盘区显示，可精确到每个核心。</p>
<h5 id="CPU-Z：CPU等硬件信息查询"><a href="#CPU-Z：CPU等硬件信息查询" class="headerlink" title="CPU-Z：CPU等硬件信息查询"></a>CPU-Z：CPU等硬件信息查询</h5><p>官网：<a href="https://www.cpuid.com/softwares/cpu-z.html">CPU-Z | Softwares | CPUID</a></p>
<p>之前想买内存，用来查看内存时钟频率。也有显卡信息。</p>
<h4 id="二、媒体类"><a href="#二、媒体类" class="headerlink" title="二、媒体类"></a>二、媒体类</h4><h5 id="FSCapture：超级好用的截图工具"><a href="#FSCapture：超级好用的截图工具" class="headerlink" title="FSCapture：超级好用的截图工具"></a>FSCapture：超级好用的截图工具</h5><p>官网：<a href="https://www.faststone.org/FSCaptureDetail.htm">FastStone Screen Capture - The Best Screen Capture Software</a></p>
<p>非常小巧，还支持滚动截图，没见过比他更好用的。</p>
<h5 id="PowerToys：取色器"><a href="#PowerToys：取色器" class="headerlink" title="PowerToys：取色器"></a>PowerToys：取色器</h5><p>官网：<a href="https://github.com/microsoft/PowerToys">microsoft/PowerToys: Windows system utilities to maximize productivity (github.com)</a></p>
<p>微软官方的一款小工具，之前做UI的时候拿它来取色。还有其他功能，没有试过。</p>
<h5 id="TopMost：窗口保持最前工具"><a href="#TopMost：窗口保持最前工具" class="headerlink" title="TopMost：窗口保持最前工具"></a>TopMost：窗口保持最前工具</h5><p>下载地址：<a href="https://www.sordum.org/9182/window-topmost-control-v1-2/">Window TopMost Control v1.2 (sordum.org)</a></p>
<p>用浏览器看F1直播的时候，可以用这个工具让窗口保持最前，边看直播边敲代码。</p>
<h5 id="Bandicut：视频剪辑、拼接工具"><a href="#Bandicut：视频剪辑、拼接工具" class="headerlink" title="Bandicut：视频剪辑、拼接工具"></a>Bandicut：视频剪辑、拼接工具</h5><p>官网：<a href="https://www.bandicam.cn/bandicut-video-cutter/">视频无损分割和拼接工具 - Bandicut（班迪剪辑）官网 (bandicam.cn)</a></p>
<p>如果只需要剪辑和拼接这两个操作的话，这个软件足够用了。</p>
<h4 id="三、文献阅读类"><a href="#三、文献阅读类" class="headerlink" title="三、文献阅读类"></a>三、文献阅读类</h4><h5 id="QTranslate：划词翻译"><a href="#QTranslate：划词翻译" class="headerlink" title="QTranslate：划词翻译"></a>QTranslate：划词翻译</h5><p>官网：<a href="https://quest-app.appspot.com/">QTranslate - Home (quest-app.appspot.com)</a></p>
<h5 id="CopyTranslator：另一款复制翻译软件"><a href="#CopyTranslator：另一款复制翻译软件" class="headerlink" title="CopyTranslator：另一款复制翻译软件"></a>CopyTranslator：另一款复制翻译软件</h5><p>官网：<a href="https://copytranslator.github.io/">CopyTranslator</a></p>
<h4 id="四、游戏类"><a href="#四、游戏类" class="headerlink" title="四、游戏类"></a>四、游戏类</h4><h5 id="Steam账户快速切换"><a href="#Steam账户快速切换" class="headerlink" title="Steam账户快速切换"></a>Steam账户快速切换</h5><p>下载：<a href="https://www.dogfight360.com/blog/800/">Steam账户快速切换 V1.4 – Dogfight360</a></p>
]]></content>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>0-1背包问题笔记</title>
    <url>/2021/07/16/0-1%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="一、原始版本"><a href="#一、原始版本" class="headerlink" title="一、原始版本"></a>一、原始版本</h1><p>0-1背包问题的原始版本为：</p>
<blockquote>
<p>有N件物品和一个最大容纳重量为W的背包。第i件物品的重量是weights[i]，价值是values[i] ，<strong>每件物品只能用一次</strong>，问将哪些物品装入背包之后物品的总价值最大。</p>
</blockquote>
<a id="more"></a>

<p>通用的解题模板为：设计一个二维数组dp[N+1][W+1]，使用两层循环遍历，最后返回二维数组的最后一个值，代码如下。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(N + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; (W + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line"><span class="comment">// 此处dp[i][j]的含义为：遍历完前i个物体之后，背包中所装物体重量不超过W时的物品的总最大价值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> w = <span class="number">0</span>; w &lt;= W; ++w) &#123;</span><br><span class="line">        <span class="comment">// 注意weights与values访问时下标i需要减去1，因为i取值是1～N，而这两个数组的下标取值是0～N-1</span></span><br><span class="line">        dp[i][w] = dp[i - <span class="number">1</span>][w]; <span class="comment">// 不选第i个物品</span></span><br><span class="line">        <span class="keyword">if</span> (w &gt;= weights[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            dp[i][w] = max(dp[i][w], dp[i - <span class="number">1</span>][w - weights[i - <span class="number">1</span>]] + values[i - <span class="number">1</span>]); <span class="comment">// 选第i个物品</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dp[N][W];</span><br></pre></td></tr></table></figure>
<p>上述代码是我刚刚总结出来的，还没测试过，因为实际做题中遇到的都是原始题目的变体，代码实现上会有细微的差异，很容易转不过弯来。</p>
<p>可能需要修改的地方包括但不限于：</p>
<ul>
<li>数组第一维的大小（是否需要+1）</li>
<li>数组第二维的大小</li>
<li>外层循环的遍历范围</li>
<li>是否需要初始化dp[0]、如何初始化</li>
<li>返回值的选取</li>
<li>dp[i][w]选用的是max还是min，还是bool值</li>
</ul>
<h1 id="二、“恰好”版：LeetCode-416-分割等和子集"><a href="#二、“恰好”版：LeetCode-416-分割等和子集" class="headerlink" title="二、“恰好”版：LeetCode 416 分割等和子集"></a>二、“恰好”版：LeetCode 416 分割等和子集</h1><blockquote>
<p>给你一个 <strong>只包含正整数</strong> 的 <strong>非空</strong> 数组 <code>nums</code> 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p>
</blockquote>
<p>首先进行映射：</p>
<ul>
<li>物品=&gt;数</li>
<li>物品重量=&gt;数值大小</li>
<li>物品总价值=&gt;并不是一个求和结果，而是一个bool值，表示是否存在一种取法，使得物体总重量为该值</li>
</ul>
<p>问题转换为：有nums.size()个物品，其重量为nums[i]，每个物品可放入背包也可不放入背包，求是否存在某一种取法，使得背包内的物品总重量<strong>恰好</strong>为sum(nums) / 2。</p>
<p>代码实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">canPartition</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); ++i) &#123;</span><br><span class="line">        sum += nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sum % <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(nums.size(), (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; (sum + <span class="number">1</span>, <span class="number">0</span>)));</span><br><span class="line">    dp[<span class="number">0</span>][nums[<span class="number">0</span>]] = <span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.size(); ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> w = <span class="number">0</span>; w &lt;= sum / <span class="number">2</span>; ++w) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[i - <span class="number">1</span>][w] || (w &gt;= nums[i]) &amp;&amp; dp[i - <span class="number">1</span>][w - nums[i]]) &#123;</span><br><span class="line">                dp[i][w] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[nums.size() - <span class="number">1</span>][sum / <span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码细节：</p>
<ul>
<li>dp[i][j]的含义为：遍历完前i个物体之后，<strong>是否存在背包重量恰好为j的情况</strong></li>
<li>数组第一维大小不需要加1，下标从0开始，遍历时跳过第0个</li>
<li>dp[0]需要进行初始化。两行初始化语句表示：遍历完第一个物体之后，背包容量要么为0，要么为第一个物体的重量</li>
<li>dp[i][w]的求法：只要取第i个或者不取第i个这两种取法的其中一种是合法的，dp[i][j]就为真</li>
<li>内层循环需遍历到num / 2</li>
</ul>
<h1 id="三、“恰好”版：LeetCode-1049-最后一块石头的重量"><a href="#三、“恰好”版：LeetCode-1049-最后一块石头的重量" class="headerlink" title="三、“恰好”版：LeetCode 1049 最后一块石头的重量"></a>三、“恰好”版：LeetCode 1049 最后一块石头的重量</h1><blockquote>
<p>有一堆石头，用整数数组 stones 表示。其中 stones[i] 表示第 i 块石头的重量。</p>
<p>每一回合，从中选出任意两块石头，然后将它们一起粉碎。假设石头的重量分别为 x 和 y，且 x &lt;= y。那么粉碎的可能结果如下：</p>
<p>如果 x == y，那么两块石头都会被完全粉碎；<br>如果 x != y，那么重量为 x 的石头将会完全粉碎，而重量为 y 的石头新重量为 y-x。<br>最后，最多只会剩下一块 石头。返回此石头 最小的可能重量 。如果没有石头剩下，就返回 0。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lastStoneWeightII</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; stones)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stones.size(); ++i) &#123;</span><br><span class="line">        sum += stones[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(stones.size(), (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; (sum + <span class="number">1</span>, <span class="number">0</span>)));</span><br><span class="line">    dp[<span class="number">0</span>][stones[<span class="number">0</span>]] = <span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; stones.size(); ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> w = <span class="number">0</span>; w &lt;= sum; ++w) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[i - <span class="number">1</span>][w] || (w &gt;= stones[i]) &amp;&amp; dp[i - <span class="number">1</span>][w - stones[i]]) &#123;</span><br><span class="line">                dp[i][w] = <span class="number">1</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> sum_db = sum;</span><br><span class="line">    <span class="keyword">double</span> minVal = INT_MAX;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> w = <span class="number">0</span>; w &lt;= sum; ++w) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[stones.size() - <span class="number">1</span>][w])</span><br><span class="line">            minVal = min(minVal, <span class="built_in">abs</span>(w - sum_db / <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minVal * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>与上一题完全相同。这道题难在如何将题干转换成0-1背包问题。</p>
<h1 id="四、双背包版：LeetCode-474-一和零"><a href="#四、双背包版：LeetCode-474-一和零" class="headerlink" title="四、双背包版：LeetCode 474 一和零"></a>四、双背包版：LeetCode 474 一和零</h1><blockquote>
<p>给你一个二进制字符串数组 strs 和两个整数 m 和 n 。</p>
<p>请你找出并返回 strs 的最大子集的大小，该子集中 最多 有 m 个 0 和 n 个 1 。</p>
<p>如果 x 的所有元素也是 y 的元素，集合 x 是集合 y 的 子集 。</p>
</blockquote>
<p>我的思路非常朴素，多一个背包相当于给dp数组加一个维度，多套一层循环进行遍历。</p>
<p>这是我的<u>错误解答</u>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findMaxFormIncorrectSolution</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 错误解答</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; nums(strs.size(), <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; (<span class="number">2</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs.size(); ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; strs[i].size(); ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (strs[i][j] == <span class="string">&#x27;0&#x27;</span>) ++nums[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span> ++nums[i][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&gt; dp(strs.size(), <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; (m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; (n + <span class="number">1</span>, <span class="number">0</span>)));</span><br><span class="line">    <span class="keyword">if</span> (nums[<span class="number">0</span>][<span class="number">0</span>] &lt;= m &amp;&amp; nums[<span class="number">0</span>][<span class="number">1</span>] &lt;= n)</span><br><span class="line">        dp[<span class="number">0</span>][nums[<span class="number">0</span>][<span class="number">0</span>]][nums[<span class="number">0</span>][<span class="number">1</span>]] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; strs.size(); ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> w0 = <span class="number">0</span>; w0 &lt;= m; ++w0) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> w1 = <span class="number">0</span>; w1 &lt;= n; ++w1) &#123;</span><br><span class="line">                <span class="keyword">int</span> maxVal = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (w0 &gt;= nums[i][<span class="number">0</span>] &amp;&amp; w1 &gt;= nums[i][<span class="number">1</span>]) &#123;</span><br><span class="line">                    maxVal = <span class="number">1</span> + dp[i - <span class="number">1</span>][w0 - nums[i][<span class="number">0</span>]][w1 - nums[i][<span class="number">1</span>]];</span><br><span class="line">                &#125;</span><br><span class="line">                maxVal = max(maxVal, dp[i - <span class="number">1</span>][w0][w1]);</span><br><span class="line">                dp[i][w0][w1] = maxVal;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[strs.size() - <span class="number">1</span>][m][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>错误原因在于：我受到了“恰好”版的影响，以为需要初始化dp[0]；但这道题更接近于原始版本，不需要初始化，数组第一维的长度相应地要加1，对nums数组的访问下标需要减1。因为题干提到了“<strong>最多</strong> 有 m 个 0 和 n 个 1 ”，所以dp数组的值表示的是背包重量<strong>不超过</strong>第二维和第三维时的最大价值，与原始版本题意相同，只是多了一维。</p>
<p>正确解答：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findMaxForm</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; nums(strs.size(), <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; (<span class="number">2</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs.size(); ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; strs[i].size(); ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (strs[i][j] == <span class="string">&#x27;0&#x27;</span>) ++nums[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span> ++nums[i][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&gt; dp(strs.size() + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; (m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; (n + <span class="number">1</span>, <span class="number">0</span>)));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= strs.size(); ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> w0 = <span class="number">0</span>; w0 &lt;= m; ++w0) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> w1 = <span class="number">0</span>; w1 &lt;= n; ++w1) &#123;</span><br><span class="line">                <span class="keyword">int</span> maxVal = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (w0 &gt;= nums[i - <span class="number">1</span>][<span class="number">0</span>] &amp;&amp; w1 &gt;= nums[i - <span class="number">1</span>][<span class="number">1</span>]) &#123;</span><br><span class="line">                    maxVal = <span class="number">1</span> + dp[i - <span class="number">1</span>][w0 - nums[i - <span class="number">1</span>][<span class="number">0</span>]][w1 - nums[i - <span class="number">1</span>][<span class="number">1</span>]];</span><br><span class="line">                &#125;</span><br><span class="line">                maxVal = max(maxVal, dp[i - <span class="number">1</span>][w0][w1]);</span><br><span class="line">                dp[i][w0][w1] = maxVal;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[strs.size()][m][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><ul>
<li>原始版本：数组第一维长度N+1，外层循环从1遍历到N，无需初始化（准确地说应该是全部初始化为0）</li>
<li>恰好版本：数组第一维长度N，外层循环从1遍历到N-1，需初始化dp[0]，把恰好取第一个物体和不取第一个物体两种情况考虑进去</li>
<li>双背包版本：在上述基础上，给数组加一个维度</li>
</ul>
<p>如果实在不想微调第一维的下标，想统一前两种情况，那么在原始版本当中，需要将dp[0][j], j &gt;= weights[0]初始化为values[0]，之后就可以用”恰好“版的方式进行遍历。</p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Prim算法 vs Dijkstra算法</title>
    <url>/2021/07/25/Prim%E7%AE%97%E6%B3%95-vs-Dijkstra%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>Prim算法用于求最小生成树，Dijkstra算法用于求单源最短路径。两者的用途不同，但算法实现非常类似，都采用了贪心算法，都是将顶点从一个集合加到另一个集合当中。但不同的是两者的选点标准：假设已加入的点集为U，未加入的点集为V。Prim算法在V中选取与U中任意顶点<strong>直接距离最短</strong>的那个顶点加入U，Dijkstra算法选取V中<strong>与初始顶点距离最短</strong>的那个顶点加入U。</p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>A Tour of Go学习笔记</title>
    <url>/2021/07/29/A-Tour-of-Go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="下载A-Tour-of-Go本地中文版"><a href="#下载A-Tour-of-Go本地中文版" class="headerlink" title="下载A Tour of Go本地中文版"></a>下载A Tour of Go本地中文版</h1><p>A Tour of Go的中文网页 <a href="https://tour.go-zh.org/">https://tour.go-zh.org/</a> 提示隐私错误，无法访问，可安装本地版进行离线学习。</p>
<a id="more"></a>

<ol>
<li>安装Go</li>
</ol>
<p><a href="https://golang.org/dl/">Downloads - The Go Programming Language (golang.org)</a></p>
<ol start="2">
<li>配置环境变量</li>
</ol>
<p>Go有两个环境变量：<code>$GOROOT</code>和<code>$GOPATH</code>，前者是Go的安装目录，后者是Go的工作区目录。</p>
<ol start="3">
<li>设置代理</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">go env <span class="literal">-w</span> GOPROXY=https://goproxy.cn,direct</span><br><span class="line"><span class="built_in">set</span> GO111MODULE=on</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>下载A Tour of Go中文版</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">go get <span class="literal">-u</span> github.com/Go<span class="literal">-zh</span>/tour</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>运行</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> D:\Documents\source\go\pkg\mod\github.com\!go<span class="literal">-zh</span>\tour@v0.<span class="number">0.0</span><span class="literal">-20210601082505</span><span class="literal">-f4baf0dba327</span></span><br><span class="line">go run .</span><br></pre></td></tr></table></figure>


<h1 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h1><h2 id="包、变量和函数"><a href="#包、变量和函数" class="headerlink" title="包、变量和函数"></a>包、变量和函数</h2><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>Go的主程序从package main中的func main开始执行。</p>
<h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;Now you have %g problems.\n&quot;</span>, math.Sqrt(<span class="number">7</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用import语句导入包，包名要加引号，括号实现多个包的导入，也可通过多条单独的import语句实现。</p>
<p>导入包中的子函数时用”/“作为分隔符：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">...</span><br><span class="line">fmt.Println(<span class="string">&quot;My favorite number is&quot;</span>, rand.Intn(<span class="number">10</span>))</span><br></pre></td></tr></table></figure>
<h3 id="导出名"><a href="#导出名" class="headerlink" title="导出名"></a>导出名</h3><p>导出名首字母必须大写，例如<code>math.Pi</code>。</p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数定义格式如下，注意类型在变量名之后：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x <span class="keyword">int</span>, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>x int, y int</code>可简写成<code>x, y int</code>。</p>
<h3 id="多值返回"><a href="#多值返回" class="headerlink" title="多值返回"></a>多值返回</h3><p>使用括号括起来：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x, y <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> y, x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="命名返回值"><a href="#命名返回值" class="headerlink" title="命名返回值"></a>命名返回值</h3><p>Go的返回值能够被命名，可对返回值变量直接赋值，然后省略return语句后面的变量名。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">split</span><span class="params">(sum <span class="keyword">int</span>)</span> <span class="params">(x, y <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	x = sum * <span class="number">4</span> / <span class="number">9</span></span><br><span class="line">	y = sum - x</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意，<strong>return语句本身不能省略</strong>，只有无返回值的函数能够不写return语句。</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p><code>var c, python, java bool</code></p>
<p>注意没有<code>var i int, j bool</code>这种写法</p>
<p>变量可在函数内声明，也可在函数外（包级别）声明。</p>
<p>函数内外声明的变量均进行了默认初始化。</p>
<h3 id="变量的初始化"><a href="#变量的初始化" class="headerlink" title="变量的初始化"></a>变量的初始化</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i, j <span class="keyword">int</span> = <span class="number">1</span>, <span class="number">2</span> <span class="comment">// 初始化必须在等号后面一次性写出</span></span><br><span class="line"><span class="keyword">var</span> c, python, java = <span class="literal">true</span>, <span class="literal">false</span>, <span class="string">&quot;no!&quot;</span> <span class="comment">// 变量类型明确时，可不显式写出</span></span><br></pre></td></tr></table></figure>
<p>注意不能<code>var i = 1, j = 2</code>。</p>
<h3 id="短变量声明"><a href="#短变量声明" class="headerlink" title="短变量声明"></a>短变量声明</h3><p>可用<code>:=</code>代替var声明：<code>k := 3</code>，但是<code>:=</code>不能在函数外使用。</p>
<h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><ul>
<li><p>bool</p>
</li>
<li><p>string</p>
</li>
<li><p>int  int8  int16  int32  int64</p>
</li>
<li><p>uint uint8 uint16 uint32 uint64 uintptr</p>
</li>
<li><p>byte // uint8 的别名</p>
</li>
<li><p>rune // int32 的别名<br>  // 表示一个 Unicode 码点</p>
</li>
<li><p>float32 float64</p>
</li>
<li><p>complex64 complex128</p>
</li>
</ul>
<p><code>int</code>, <code>uint</code> 和 <code>uintptr</code> 在 32 位系统上通常为 32 位宽，在 64 位系统上则为 64 位宽。</p>
<h3 id="零值"><a href="#零值" class="headerlink" title="零值"></a>零值</h3><p>未被初始化的变量会被赋值为0、false或””。</p>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">42</span></span><br><span class="line"><span class="keyword">var</span> f <span class="keyword">float64</span> = <span class="keyword">float64</span>(i)</span><br><span class="line"><span class="comment">// 或者f := float64(i)</span></span><br></pre></td></tr></table></figure>
<p>Go要求显式类型转换。</p>
<h3 id="类型推导"><a href="#类型推导" class="headerlink" title="类型推导"></a>类型推导</h3><p>当使用<code>:=</code>声明变量时，Go会根据右侧的变量类型进行类型推导。</p>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Pi = <span class="number">3.14</span></span><br></pre></td></tr></table></figure>
<p>常量不能使用<code>:=</code>声明。</p>
<h3 id="数值常量"><a href="#数值常量" class="headerlink" title="数值常量"></a>数值常量</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	<span class="comment">// 将 1 左移 100 位来创建一个非常大的数字</span></span><br><span class="line">	<span class="comment">// 即这个数的二进制是 1 后面跟着 100 个 0</span></span><br><span class="line">	Big = <span class="number">1</span> &lt;&lt; <span class="number">100</span></span><br><span class="line">	<span class="comment">// 再往右移 99 位，即 Small = 1 &lt;&lt; 1，或者说 Small = 2</span></span><br><span class="line">	Small = Big &gt;&gt; <span class="number">99</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>数值常量是高精度的值，一个未指定类型的常量由上下文来决定其类型。<br>注意到可用括号同时声明多个常量。</p>
<h2 id="流程控制语句：for、if、else、switch和defer"><a href="#流程控制语句：for、if、else、switch和defer" class="headerlink" title="流程控制语句：for、if、else、switch和defer"></a>流程控制语句：for、if、else、switch和defer</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">    sum += i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>for是Go中唯一的循环结构。for语句无需使用小括号，而花括号是必须的。for循环的初始化语句和后置语句是可选的。</p>
<h3 id="for是Go中的”while“"><a href="#for是Go中的”while“" class="headerlink" title="for是Go中的”while“"></a>for是Go中的”while“</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> sum &lt; <span class="number">100</span> &#123;</span><br><span class="line">	sum += sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>for可以只写循环条件部分，省略分号，此时相当于while。</p>
<h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>与for类似，无需小括号，但必须使用花括号。</p>
<h3 id="if的简短语句"><a href="#if的简短语句" class="headerlink" title="if的简短语句"></a>if的简短语句</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> v := math.Pow(x, n); v &lt; lim &#123;</span><br><span class="line">	<span class="keyword">return</span> v</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>if可以在判断条件之前执行一个简单的语句，适用于对某个变量进行赋值之后需要立即进行判断的情况。</p>
<p><strong>注意：同for循环类似，此处声明的变量只在if中可见，if之外不可见。</strong></p>
<h3 id="if和else"><a href="#if和else" class="headerlink" title="if和else"></a>if和else</h3><p>同样可以使用简短的声明语句，且声明的变量在所有else分支中均可见。else if当中也可以继续声明变量。</p>
<h3 id="练习：循环和函数"><a href="#练习：循环和函数" class="headerlink" title="练习：循环和函数"></a>练习：循环和函数</h3><p>牛顿法实现平方根函数：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sqrt</span><span class="params">(x <span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">	z := <span class="number">1.0</span></span><br><span class="line">	times := <span class="number">10</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;x ==&quot;</span>, x)</span><br><span class="line">	<span class="keyword">for</span> count := <span class="number">0</span>; count &lt; times; count++ &#123;</span><br><span class="line">		z -= (z * z - x) / (<span class="number">2</span> * z)</span><br><span class="line">		fmt.Println(<span class="string">&quot;Times:&quot;</span>, count, <span class="string">&quot;result:&quot;</span>, z)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> z</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(Sqrt(<span class="number">2</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> os := runtime.GOOS; os &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;darwin&quot;</span>:</span><br><span class="line">	fmt.Println(<span class="string">&quot;OS X.&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;linux&quot;</span>:</span><br><span class="line">	fmt.Println(<span class="string">&quot;Linux.&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">	<span class="comment">// freebsd, openbsd,</span></span><br><span class="line">	<span class="comment">// plan9, windows...</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%s.\n&quot;</span>, os)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Go中的switch特征：</p>
<ul>
<li>case后面默认带了break，除非以fallthrough语句结束</li>
<li>case值无需为常量，不必为整数</li>
</ul>
<h3 id="switch的求值顺序"><a href="#switch的求值顺序" class="headerlink" title="switch的求值顺序"></a>switch的求值顺序</h3><p>switch从上到下逐个匹配case语句，匹配成功时停止。对于如下语句，在<code>i==0</code>时函数f()不会被调用：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> i &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="keyword">case</span> f():</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="没有条件的switch"><a href="#没有条件的switch" class="headerlink" title="没有条件的switch"></a>没有条件的switch</h3><p>相当于<code>switch true</code>，即case当中的求值结果为<code>true</code>时执行。可以用于代替复杂的if-else。</p>
<h3 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h3><p>defer语句会将函数推迟到外层函数返回后执行。注意，<strong>参数会被立即求值</strong>，但函数会被推迟调用。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(<span class="string">&quot;world&quot;</span>)</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="defer栈"><a href="#defer栈" class="headerlink" title="defer栈"></a>defer栈</h3><p>被推迟调用的函数会被压入一个栈中，外层函数返回时，依次弹出并访问栈顶元素。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;counting&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">defer</span> fmt.Println(i)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="更多类型：struct、slice和映射"><a href="#更多类型：struct、slice和映射" class="headerlink" title="更多类型：struct、slice和映射"></a>更多类型：struct、slice和映射</h2><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>声明指针：<code>var p *int</code></p>
<p>使用指针：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">i := <span class="number">42</span></span><br><span class="line">p = &amp;i</span><br><span class="line">fmt.Println(*p)</span><br><span class="line">*p = <span class="number">21</span></span><br></pre></td></tr></table></figure>
<p>但是，与C语言不同，Go没有指针运算，不能对指针进行<code>p++</code>之类的操作。</p>
<h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">	X <span class="keyword">int</span></span><br><span class="line">	Y <span class="keyword">int</span></span><br><span class="line">&#125; <span class="comment">// 声明方式为type name struct &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;) <span class="comment">// 匿名struct</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结构体字段"><a href="#结构体字段" class="headerlink" title="结构体字段"></a>结构体字段</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">v := Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">// 使用匿名struct进行初始化，自动进行类型推断</span></span><br><span class="line">v.X = <span class="number">4</span> <span class="comment">// 使用点访问成员</span></span><br><span class="line">fmt.Println(v.X)</span><br></pre></td></tr></table></figure>
<h3 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	v := Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">	p := &amp;v <span class="comment">// 简单声明</span></span><br><span class="line">	<span class="keyword">var</span> q *Vertex <span class="comment">// 显式声明</span></span><br><span class="line">	q = &amp;v</span><br><span class="line">	p.X = <span class="number">1e9</span></span><br><span class="line">	fmt.Println(v)</span><br><span class="line">	fmt.Println(*q)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;1000000000 2&#125;</span><br><span class="line">&#123;1000000000 2&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结构体文法"><a href="#结构体文法" class="headerlink" title="结构体文法"></a>结构体文法</h3><p>结构体文法通过直接列出字段的值来分配一个结构体（即匿名结构体），可以通过“字段名+冒号”来列出部分字段，且无需按顺序列出，例如可执行语句<code>v2 := Vertex&#123;X: 1&#125;</code>，此时Y: 0被隐式地赋予。</p>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>类型说明<code>T[n]</code>表示含有n个T类型元素的数组，如<code>var a [10]int</code>。数组的长度是类型的一部分，不能修改。数组声明时会分配空间，所有元素会被默认初始化。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a [<span class="number">2</span>]<span class="keyword">int</span></span><br><span class="line">fmt.Println(a[<span class="number">0</span>], a[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 0</span><br></pre></td></tr></table></figure>
<h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>切片也是一个变量，类型说明<code>[]T</code>表示T类型的切片。切片的范围由一个左闭右开区间指定：<code>var s []int = primes[1:4]</code>。</p>
<h3 id="切片就像数组的引用"><a href="#切片就像数组的引用" class="headerlink" title="切片就像数组的引用"></a>切片就像数组的引用</h3><p><strong>切片并不存储数据，更改切片元素会修改底层数组中对应的元素。</strong></p>
<h3 id="切片文法"><a href="#切片文法" class="headerlink" title="切片文法"></a>切片文法</h3><p>切片文法类似于一个没有长度的数组文法。注意切片的类型说明符中不能带长度。</p>
<p><code>[]bool&#123;true, true, false&#125;</code>语句创建了一个数组，然后构建了一个引用它的切片。</p>
<h3 id="切片的默认行为"><a href="#切片的默认行为" class="headerlink" title="切片的默认行为"></a>切片的默认行为</h3><p>进行切片时，可省略上下界。以下切片是等价的：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a[<span class="number">0</span>:<span class="number">10</span>]</span><br><span class="line">a[:<span class="number">10</span>]</span><br><span class="line">a[<span class="number">0</span>:]</span><br><span class="line">a[:]</span><br></pre></td></tr></table></figure>
<h3 id="切片的长度和容量"><a href="#切片的长度和容量" class="headerlink" title="切片的长度和容量"></a>切片的长度和容量</h3><p>切片的长度就是它所包含元素的个数；切片的容量是从它的第一个元素开始数，到其底层数组末尾的个数。</p>
<p>切片<code>s</code>的长度和容量可通过表达式<code>len(s)</code>和<code>cap(s)</code>来获取。</p>
<p>只要具有足够的容量，可以通过重新切片来扩展一个切片。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;</span><br><span class="line">	printSlice(s)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 截取切片使其长度为 0</span></span><br><span class="line">	s = s[:<span class="number">0</span>]</span><br><span class="line">	printSlice(s)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 拓展其长度</span></span><br><span class="line">	s = s[:<span class="number">4</span>]</span><br><span class="line">	printSlice(s)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 舍弃前两个值</span></span><br><span class="line">	s = s[<span class="number">2</span>:]</span><br><span class="line">	printSlice(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(s []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;len=%d cap=%d %v\n&quot;</span>, <span class="built_in">len</span>(s), <span class="built_in">cap</span>(s), s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">len&#x3D;6 cap&#x3D;6 [2 3 5 7 11 13]</span><br><span class="line">len&#x3D;0 cap&#x3D;6 []</span><br><span class="line">len&#x3D;4 cap&#x3D;6 [2 3 5 7]</span><br><span class="line">len&#x3D;2 cap&#x3D;4 [5 7]</span><br></pre></td></tr></table></figure>
<p>可见截取一个切片的前部时，切片的容量不变。但截取切片后部，即舍弃切片前部时，切片的容量会减小。</p>
<h3 id="nil切片"><a href="#nil切片" class="headerlink" title="nil切片"></a>nil切片</h3><p>切片的零值是<code>nil</code>。</p>
<p>nil 切片的长度和容量为 0 且没有底层数组。</p>
<p>声明nil切片：<code>var s []int</code>。</p>
<h3 id="用make创建切片"><a href="#用make创建切片" class="headerlink" title="用make创建切片"></a>用make创建切片</h3><p><code>make</code>函数会分配一个元素为零值的数组并返回一个引用了它的切片：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">5</span>)  <span class="comment">// len(a)=cap(a)=5</span></span><br></pre></td></tr></table></figure>
<p>要指定它的容量，需向make传入第三个参数：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">b := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, <span class="number">5</span>) <span class="comment">// len(b)=0, cap(b)=5</span></span><br><span class="line"></span><br><span class="line">b = b[:<span class="built_in">cap</span>(b)] <span class="comment">// len(b)=5, cap(b)=5</span></span><br><span class="line">b = b[<span class="number">1</span>:]      <span class="comment">// len(b)=4, cap(b)=4</span></span><br></pre></td></tr></table></figure>
<p>注意，二次切片的len有可能比父切片大，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">5</span>)</span><br><span class="line">	printSlice(<span class="string">&quot;a&quot;</span>, a)</span><br><span class="line"></span><br><span class="line">	b := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">	printSlice(<span class="string">&quot;b&quot;</span>, b)</span><br><span class="line"></span><br><span class="line">	c := b[:<span class="number">2</span>]</span><br><span class="line">	printSlice(<span class="string">&quot;c&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">	d := c[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">	printSlice(<span class="string">&quot;d&quot;</span>, d)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a len&#x3D;5 cap&#x3D;5 [0 0 0 0 0]</span><br><span class="line">b len&#x3D;0 cap&#x3D;5 []</span><br><span class="line">c len&#x3D;2 cap&#x3D;5 [0 0]</span><br><span class="line">d len&#x3D;3 cap&#x3D;3 [0 0 0]</span><br></pre></td></tr></table></figure>
<p>c的长度只有2，但是d取了一个长度为3的切片，此时可以越过c的长度，继续从底层数组中取第三个元素。</p>
<h3 id="切片的切片"><a href="#切片的切片" class="headerlink" title="切片的切片"></a>切片的切片</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个井字板（经典游戏）</span></span><br><span class="line">board := [][]<span class="keyword">string</span>&#123;</span><br><span class="line">    []<span class="keyword">string</span>&#123;<span class="string">&quot;_&quot;</span>, <span class="string">&quot;_&quot;</span>, <span class="string">&quot;_&quot;</span>&#125;,</span><br><span class="line">    []<span class="keyword">string</span>&#123;<span class="string">&quot;_&quot;</span>, <span class="string">&quot;_&quot;</span>, <span class="string">&quot;_&quot;</span>&#125;,</span><br><span class="line">    []<span class="keyword">string</span>&#123;<span class="string">&quot;_&quot;</span>, <span class="string">&quot;_&quot;</span>, <span class="string">&quot;_&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个玩家轮流打上 X 和 O</span></span><br><span class="line">board[<span class="number">0</span>][<span class="number">0</span>] = <span class="string">&quot;X&quot;</span></span><br><span class="line">board[<span class="number">2</span>][<span class="number">2</span>] = <span class="string">&quot;O&quot;</span></span><br><span class="line">board[<span class="number">1</span>][<span class="number">2</span>] = <span class="string">&quot;X&quot;</span></span><br><span class="line">board[<span class="number">1</span>][<span class="number">0</span>] = <span class="string">&quot;O&quot;</span></span><br><span class="line">board[<span class="number">0</span>][<span class="number">2</span>] = <span class="string">&quot;X&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="向切片追加元素"><a href="#向切片追加元素" class="headerlink" title="向切片追加元素"></a>向切片追加元素</h3><p><code>func append(s []T, vs ...T) []T</code></p>
<p>s为待追加的切片，vs为要追加的值，返回新切片。当 s 的底层数组太小，不足以容纳所有给定的值时，它就会分配一个更大的数组。返回的切片会指向这个新分配的数组。</p>
<p>注意，关于追加值是否会改变原底层数组的值，经过我的测试，分为两种情况：</p>
<ul>
<li>如果底层数组容量足够，则追加值直接覆盖底层数组原来的值</li>
<li>如果底层数组容量不足，则不会改变原数组，而会分配一个新的数组，切片指向新数组</li>
</ul>
<h3 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h3><p>for 循环的 range 形式可遍历切片或映射。</p>
<p>当使用 for 循环遍历切片时，每次迭代都会返回两个值。第一个值为当前元素的下标，第二个值为该下标所对应元素的一份<strong>副本</strong>。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pow = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">64</span>, <span class="number">128</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i, v := <span class="keyword">range</span> pow &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;2**%d = %d\n&quot;</span>, i, v)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Go中不允许存在声明但未使用的变量，若不需要使用下标或者元素值，可以用下划线代替变量名忽略它；如果只需要使用下标，可以直接不写第二个变量和逗号。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i, _ := <span class="keyword">range</span> pow</span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> pow</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> pow</span><br></pre></td></tr></table></figure>
<p>当使用range遍历映射时，第一个值为key，第二个值为value。</p>
<h3 id="练习：切片"><a href="#练习：切片" class="headerlink" title="练习：切片"></a>练习：切片</h3><p>创建一个二维切片，作为存储图像灰度值的矩阵，然后依次填入每个灰度值。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Pic</span><span class="params">(dx, dy <span class="keyword">int</span>)</span> [][]<span class="title">uint8</span></span> &#123;</span><br><span class="line">	slice := <span class="built_in">make</span>([][]<span class="keyword">uint8</span>, dy)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; dy; i++ &#123;</span><br><span class="line">		slice[i] = <span class="built_in">make</span>([]<span class="keyword">uint8</span>, dx) <span class="comment">// (*)</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; dy; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; dx; j++ &#123;</span><br><span class="line">			slice[i][j] = <span class="keyword">uint8</span>(i) ^ <span class="keyword">uint8</span>(j)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> slice</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我一开始把(*)行的<code>=</code>写成了<code>:=</code>，出现报错，原因是slice[i]是一个已存在的元素，为nil切片，而<code>:=</code>只能用于声明新的变量。</p>
<h3 id="映射（map）"><a href="#映射（map）" class="headerlink" title="映射（map）"></a>映射（map）</h3><p>映射将key映射到value。零值为nil，既没有key，也不能添加key。make函数会返回给定类型的映射，并将其初始化备用。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">	Lat, Long <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">string</span>]Vertex <span class="comment">// 方括号中为key的类型，方括号后面为value的类型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]Vertex)</span><br><span class="line">	m[<span class="string">&quot;Bell Labs&quot;</span>] = Vertex&#123;</span><br><span class="line">		<span class="number">40.68433</span>, <span class="number">-74.39967</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(m[<span class="string">&quot;Bell Labs&quot;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="映射的文法"><a href="#映射的文法" class="headerlink" title="映射的文法"></a>映射的文法</h3><p>映射的文法与结构体相似，不过必须有键名。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">map</span>[<span class="keyword">string</span>]Vertex&#123;</span><br><span class="line">	<span class="string">&quot;Bell Labs&quot;</span>: Vertex&#123;</span><br><span class="line">		<span class="number">40.68433</span>, <span class="number">-74.39967</span>,</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">&quot;Google&quot;</span>: Vertex&#123;</span><br><span class="line">		<span class="number">37.42202</span>, <span class="number">-122.08408</span>,</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上为映射初始化方法，key和value之间用冒号隔开，不同KV对之间用逗号隔开，最后一个也<strong>必须有逗号</strong>。</p>
<p>”Vertex“也可以省略。</p>
<h3 id="修改映射"><a href="#修改映射" class="headerlink" title="修改映射"></a>修改映射</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">m[key] = elem <span class="comment">// 插入或修改元素</span></span><br><span class="line">elem = m[key] <span class="comment">// 获取元素</span></span><br><span class="line"><span class="built_in">delete</span>(m, key) <span class="comment">// 删除元素</span></span><br><span class="line">elem, ok = m[key] <span class="comment">// 通过双赋值检测某个key是否存在</span></span><br><span class="line"><span class="comment">// 若key在m中，ok为true；否则，ok为false</span></span><br><span class="line"><span class="comment">// 若key不在映射中，那么elem是该映射元素类型的零值</span></span><br><span class="line">elem, ok := m[key] <span class="comment">// 若elem或ok还未声明，可以使用短变量声明</span></span><br></pre></td></tr></table></figure>
<h3 id="练习：映射"><a href="#练习：映射" class="headerlink" title="练习：映射"></a>练习：映射</h3><p>统计词频，保存到map中，可使用<code>strings.Fields</code>函数分割字符串。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WordCount</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">map</span>[<span class="title">string</span>]<span class="title">int</span></span> &#123;</span><br><span class="line">	m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">	words := strings.Fields(s)</span><br><span class="line">	<span class="keyword">for</span> _, word := <span class="keyword">range</span> words &#123;</span><br><span class="line">		m[word]++</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> m</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="函数值"><a href="#函数值" class="headerlink" title="函数值"></a>函数值</h3><p>函数也是值，可以作为函数的参数或返回值。也可以用<code>:=</code>声明一个函数变量。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compute</span><span class="params">(fn <span class="keyword">func</span>(<span class="keyword">float64</span>, <span class="keyword">float64</span>)</span> <span class="title">float64</span>) <span class="title">float64</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> fn(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	hypot := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">		<span class="keyword">return</span> math.Sqrt(x*x + y*y)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(hypot(<span class="number">5</span>, <span class="number">12</span>))</span><br><span class="line"></span><br><span class="line">	fmt.Println(compute(hypot))</span><br><span class="line">	fmt.Println(compute(math.Pow))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="函数的闭包"><a href="#函数的闭包" class="headerlink" title="函数的闭包"></a>函数的闭包</h3><p>Go 函数可以是一个闭包。闭包是一个函数值，它引用了其函数体之外的变量。该函数可以访问并赋予其引用的变量的值，换句话说，该函数被这些变量“绑定”在一起。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">()</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	sum := <span class="number">0</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">		sum += x</span><br><span class="line">		<span class="keyword">return</span> sum</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	pos, neg := adder(), adder()</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		fmt.Println(</span><br><span class="line">			pos(i),</span><br><span class="line">			neg(<span class="number">-2</span>*i),</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>pos和neg各为一个闭包，都包含一个sum变量，初值为0。每次调用pos时，sum变量的值加i，然后输出sum。</p>
<p>可以把函数闭包理解成类的静态函数，sum为静态变量。</p>
<h3 id="练习：斐波那契闭包"><a href="#练习：斐波那契闭包" class="headerlink" title="练习：斐波那契闭包"></a>练习：斐波那契闭包</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回一个“返回int的函数”</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">()</span> <span class="title">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	a, b := <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">	count := <span class="number">0</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">		count++</span><br><span class="line">		<span class="keyword">if</span> count == <span class="number">1</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> count == <span class="number">2</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			a, b = b, a + b</span><br><span class="line">			<span class="keyword">return</span> b</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f := fibonacci()</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		fmt.Println(f())</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若count为1或2，直接返回第一项或第二项的值；否则，计算当前项的值，然后返回。</p>
<h1 id="Methods-and-interfaces"><a href="#Methods-and-interfaces" class="headerlink" title="Methods and interfaces"></a>Methods and interfaces</h1><h2 id="方法和接口"><a href="#方法和接口" class="headerlink" title="方法和接口"></a>方法和接口</h2><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>Go没有类，但是可以为结构体定义方法。方法是一类带特殊的<strong>接收者</strong>参数的函数。</p>
<p>例如，为Vertex定义方法：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Vertex)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">	fmt.Println(v.Abs())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可为基本类型定义方法，不过要先定义类型别名，例如：<code>type MyFloat float64</code>，然后就可以为<code>MyFloat</code>类型定义方法。</p>
<h3 id="指针接收者"><a href="#指针接收者" class="headerlink" title="指针接收者"></a>指针接收者</h3><p>注意，上述接收者是值接收者，只能用于访问；如果要修改结构体的成员，需要使用指针接收者：<br><code>func (v *Vertex) Scale(f float64) &#123;&#125;</code></p>
<h3 id="方法与指针重定向"><a href="#方法与指针重定向" class="headerlink" title="方法与指针重定向"></a>方法与指针重定向</h3><p>调用指针接收者方法时，可以通过变量调用，也可以通过指针调用：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> v Vertex</span><br><span class="line">v.Scale(<span class="number">5</span>)  <span class="comment">// OK</span></span><br><span class="line">p := &amp;v</span><br><span class="line">p.Scale(<span class="number">10</span>) <span class="comment">// OK</span></span><br></pre></td></tr></table></figure>
<h3 id="选择值或指针作为接收者"><a href="#选择值或指针作为接收者" class="headerlink" title="选择值或指针作为接收者"></a>选择值或指针作为接收者</h3><p>使用指针接收者的原因有二：</p>
<ul>
<li><p>首先，方法能够修改其接收者指向的值。</p>
</li>
<li><p>其次，这样可以避免在每次调用方法时复制该值。若值的类型为大型结构体时，这样做会更加高效。</p>
</li>
</ul>
<p>通常来说，所有给定类型的方法都应该有值或指针接收者，但并不应该二者混用。</p>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>接口类型是由一组方法签名定义的集合，接口类型的变量可以保存任何实现了这些方法的值。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="keyword">type</span> Abser <span class="keyword">interface</span> &#123;</span><br><span class="line">	Abs() <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现Abs</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f MyFloat)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123;...&#125; <span class="comment">// 接收者为值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123;...&#125; <span class="comment">// 接收者为指针</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a Abser <span class="comment">// 定义接口变量</span></span><br><span class="line">f := MyFloat(-math.Sqrt2)</span><br><span class="line">v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">a = f  <span class="comment">// a MyFloat 实现了 Abser</span></span><br><span class="line">a = &amp;v <span class="comment">// a *Vertex 实现了 Abser</span></span><br><span class="line">a = v <span class="comment">// a Vertex 未实现 Abser，错误！</span></span><br></pre></td></tr></table></figure>
<p>此处要注意，当只有指针实现了方法时，接口变量也只能用指针赋值。</p>
<h3 id="接口与隐式实现"><a href="#接口与隐式实现" class="headerlink" title="接口与隐式实现"></a>接口与隐式实现</h3><p>当一个类型实现了接口的所有方法时，它就实现了该接口，无需显式声明即可将该类型的变量直接赋值给接口变量。</p>
<blockquote>
<p>隐式接口从接口的实现中解耦了定义，这样接口的实现可以出现在任何包中，无需提前准备。</p>
<p>因此，也就无需在每一个实现上增加新的接口名称，这样同时也鼓励了明确的接口定义。</p>
</blockquote>
<h3 id="接口值"><a href="#接口值" class="headerlink" title="接口值"></a>接口值</h3><p>接口也是值，可作为函数的参数或返回值。</p>
<p>在内部，接口值可以看作包含值和具体类型的元组：<code>(value, type)</code>。接口值保存了一个具体底层类型的具体值。接口值调用方法时会执行其底层类型的同名方法。</p>
<h3 id="底层值为nil的接口值"><a href="#底层值为nil的接口值" class="headerlink" title="底层值为nil的接口值"></a>底层值为nil的接口值</h3><p>即使接口内的具体值为nil，方法仍然会被nil接收者调用。</p>
<p>我们可以在方法中先判断接受者是否为空：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span> <span class="title">M</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> t == <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;&lt;nil&gt;&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(t.S)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行下列代码时，控制台打印<nil>：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i I</span><br><span class="line"><span class="keyword">var</span> t *T</span><br><span class="line">i = t</span><br><span class="line">i.M()</span><br></pre></td></tr></table></figure>
<h3 id="nil接口值"><a href="#nil接口值" class="headerlink" title="nil接口值"></a>nil接口值</h3><p>nil 接口值既不保存值也不保存具体类型。</p>
<p>为 nil 接口调用方法会产生运行时错误，因为接口的元组内并未包含能够指明该调用哪个具体方法的类型。</p>
<h3 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h3><p>指定了0个方法的接口为空接口：</p>
<p><code>interface &#123;&#125;</code></p>
<p>空接口可以保存任何类型的值，因为任何类型的值都至少实现了0个接口。</p>
<p>空接口被用来处理未知类型的值。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">	describe(i)</span><br><span class="line"></span><br><span class="line">	i = <span class="number">42</span></span><br><span class="line">	describe(i)</span><br><span class="line"></span><br><span class="line">	i = <span class="string">&quot;hello&quot;</span></span><br><span class="line">	describe(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">describe</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;(%v, %T)\n&quot;</span>, i, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>类型断言提供了访问接口值底层具体值的方式。类型断言的语法与判断map中是否存在某个key非常相似。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">t := i.(T) <span class="comment">// 若接口i保存了类型T，则将其赋值给t，否则触发一个panic</span></span><br><span class="line">t, ok := i.(T) <span class="comment">// ok为false时，t为零值，不会触发panic</span></span><br></pre></td></tr></table></figure>
<h3 id="类型选择"><a href="#类型选择" class="headerlink" title="类型选择"></a>类型选择</h3><p>类型选择使用switch-case语句，从几个类型断言中选择分支：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> v := i.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> T:</span><br><span class="line"><span class="keyword">case</span> S:</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其声明语法与类型断言类似，不过具体类型值换成了<code>type</code>。<strong>当匹配成功时，变量v会被赋值为相应类型的值（是具体类型，不是接口）</strong>。</p>
<h3 id="Stringer"><a href="#Stringer" class="headerlink" title="Stringer"></a>Stringer</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Stringer <span class="keyword">interface</span> &#123;</span><br><span class="line">    String() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Stringer接口中的String函数规定了变量被fmt.Println函数打印的格式。</p>
<h3 id="练习：Stringer"><a href="#练习：Stringer" class="headerlink" title="练习：Stringer"></a>练习：Stringer</h3><p>为IP地址实现Stringer接口。注意，IP地址是用byte类型存储，首先要将其转换成int，再将int使用<code>strconv.Itoa</code>转换成string，不能一步到位直接byte转string，因为byte中存储的不是ASCII码。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IPAddr [<span class="number">4</span>]<span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 给 IPAddr 添加一个 &quot;String() string&quot; 方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ip IPAddr)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	ip_str := <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line">		ip_str += strconv.Itoa(<span class="keyword">int</span>(ip[i]))</span><br><span class="line">		<span class="keyword">if</span> i != <span class="number">3</span> &#123;</span><br><span class="line">			ip_str += <span class="string">&quot;.&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> ip_str</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	hosts := <span class="keyword">map</span>[<span class="keyword">string</span>]IPAddr&#123;</span><br><span class="line">		<span class="string">&quot;loopback&quot;</span>:  &#123;<span class="number">127</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">		<span class="string">&quot;googleDNS&quot;</span>: &#123;<span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> name, ip := <span class="keyword">range</span> hosts &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;%v: %v\n&quot;</span>, name, ip)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><p>错误error也是一个接口。同Stringer一样，Error函数返回的字符串也用于fmt包打印时。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> error <span class="keyword">interface</span> &#123;</span><br><span class="line">    Error() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通常函数会返回一个error值，应判断其是否为nil：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">i, err := strconv.Atoi(<span class="string">&quot;42&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="练习：错误"><a href="#练习：错误" class="headerlink" title="练习：错误"></a>练习：错误</h3><p>修改之前的Sqrt函数，当输入值为负时返回一个error。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ErrNegativeSqrt <span class="keyword">float64</span> <span class="comment">// 将float64定义为错误类型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e ErrNegativeSqrt)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	<span class="comment">// ErrNegativeSqrt类型实现了error接口，因此它是一个error类型</span></span><br><span class="line">	str := <span class="string">&quot;cannot Sqrt negative number: &quot;</span> + fmt.Sprintf(<span class="string">&quot;%f&quot;</span>, <span class="keyword">float64</span>(e)) <span class="comment">// 注意Sprintf函数的使用</span></span><br><span class="line">	<span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sqrt</span><span class="params">(x <span class="keyword">float64</span>)</span> <span class="params">(<span class="keyword">float64</span>, error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">var</span> err ErrNegativeSqrt = ErrNegativeSqrt(x) <span class="comment">// 创建一个错误类型变量，将x值赋值给它</span></span><br><span class="line">		<span class="keyword">return</span> x, err</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	z := <span class="number">1.0</span></span><br><span class="line">	times := <span class="number">10</span></span><br><span class="line">	<span class="keyword">for</span> count := <span class="number">0</span>; count &lt; times; count++ &#123;</span><br><span class="line">		z -= (z * z - x) / (<span class="number">2</span> * z)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> z, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(Sqrt(<span class="number">2</span>))</span><br><span class="line">	fmt.Println(Sqrt(<span class="number">-2</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h3><p>io.Reader接口中有一个Read方法：<br><code>func (T) Read(b []byte) (n int, err error)</code></p>
<p>用于从类型T的变量读取前n个字节，存放到切片b中。在遇到输入流的结尾时，它会返回一个io.EOF错误。</p>
<h3 id="练习：Reader"><a href="#练习：Reader" class="headerlink" title="练习：Reader"></a>练习：Reader</h3><p>实现一个无限字符流’A’。可以通过len获取切片长度，然后将其填满。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 给 MyReader 添加一个 Read([]byte) (int, error) 方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r MyReader)</span> <span class="title">Read</span><span class="params">(slice []<span class="keyword">byte</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(slice); i++ &#123;</span><br><span class="line">		slice[i] = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">len</span>(slice), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="练习：rot13Reader"><a href="#练习：rot13Reader" class="headerlink" title="练习：rot13Reader"></a>练习：rot13Reader</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rd rot13Reader)</span> <span class="title">Read</span><span class="params">(slice []<span class="keyword">byte</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line">	n, err = rd.r.Read(slice)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		slice[i] = rot13(slice[i])</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> image</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Image <span class="keyword">interface</span> &#123;</span><br><span class="line">    ColorModel() color.Model</span><br><span class="line">    Bounds() Rectangle <span class="comment">// 图像边界</span></span><br><span class="line">    At(x, y <span class="keyword">int</span>) color.Color <span class="comment">// 访问某个像素点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="练习：图像"><a href="#练习：图像" class="headerlink" title="练习：图像"></a>练习：图像</h3><p>使用image接口实现图像。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;golang.org/x/tour/pic&quot;</span></span><br><span class="line">	<span class="string">&quot;image/color&quot;</span></span><br><span class="line">	<span class="string">&quot;image&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Image <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(img Image)</span> <span class="title">ColorModel</span><span class="params">()</span> <span class="title">color</span>.<span class="title">Model</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> color.RGBAModel</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(img Image)</span> <span class="title">Bounds</span><span class="params">()</span> <span class="title">image</span>.<span class="title">Rectangle</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> image.Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(img Image)</span> <span class="title">At</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">color</span>.<span class="title">Color</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> color.RGBA&#123;(<span class="keyword">uint8</span>)(x*y), (<span class="keyword">uint8</span>)(x*y), <span class="number">255</span>, <span class="number">255</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	m := Image&#123;&#125;</span><br><span class="line">	pic.ShowImage(m)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Concurrency"><a href="#Concurrency" class="headerlink" title="Concurrency"></a>Concurrency</h1><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><h3 id="Go程"><a href="#Go程" class="headerlink" title="Go程"></a>Go程</h3><p>Go程（goroutine）是由 Go 运行时管理的轻量级线程。</p>
<p><code>go f(x, y, z)</code>创建一个新的goroutine并执行f函数。</p>
<p>goroutine之间共享内存。</p>
<h3 id="信道"><a href="#信道" class="headerlink" title="信道"></a>信道</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>) <span class="comment">// 创建信道</span></span><br><span class="line">ch &lt;- v    <span class="comment">// 将 v 发送至信道 ch。</span></span><br><span class="line">v := &lt;-ch  <span class="comment">// 从 ch 接收值并赋予 v。</span></span><br></pre></td></tr></table></figure>
<p>默认情况下，信道的发送和接受是阻塞的。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(s []<span class="keyword">int</span>, c <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	sum := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> s &#123;</span><br><span class="line">		sum += v</span><br><span class="line">	&#125;</span><br><span class="line">	c &lt;- sum <span class="comment">// 将和送入 c</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := []<span class="keyword">int</span>&#123;<span class="number">7</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">-9</span>, <span class="number">4</span>, <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">	c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">	<span class="keyword">go</span> sum(s[:<span class="built_in">len</span>(s)/<span class="number">2</span>], c)</span><br><span class="line">	<span class="keyword">go</span> sum(s[<span class="built_in">len</span>(s)/<span class="number">2</span>:], c)</span><br><span class="line">	x, y := &lt;-c, &lt;-c <span class="comment">// 从 c 中接收</span></span><br><span class="line"></span><br><span class="line">	fmt.Println(x, y, x+y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意，两次<code>&lt;-c</code>并不代表信道可以存放多个值。创建两个goroutine之后，主线程在接受处阻塞。每当一个goroutine完成计算，向信道写入值时，主进程立即读出，此时另外一个goroutine才能再进行写入。</p>
<h3 id="带缓冲的信道"><a href="#带缓冲的信道" class="headerlink" title="带缓冲的信道"></a>带缓冲的信道</h3><p><code>ch := make(chan int, 100)</code>创建了一个大小为100的信道。仅当缓冲区填满时，向其发送数据才会阻塞。当缓冲区为空时，接收方会阻塞。</p>
<h3 id="range和close"><a href="#range和close" class="headerlink" title="range和close"></a>range和close</h3><p>发送者可以通过close关闭信道，表示没有需要发送的值了。接收者可以通过第二个参数测试信道是否被关闭：<code>v, ok := &lt;-ch</code></p>
<p>循环<code>for i := range c</code>会从信道不断接收值，直到它被关闭。</p>
<p>只有发送者能关闭信道，接收者不能。向一个已经关闭的信道发送数据会引发panic。</p>
<p><strong>注意：信道与文件不同，通常情况下无需关闭它们。只有在必须告诉接收者不再有需要发送的值时才有必要关闭，例如终止一个 range 循环。</strong></p>
<h3 id="select语句"><a href="#select语句" class="headerlink" title="select语句"></a>select语句</h3><p>select 语句使一个 Go 程可以等待多个通信操作。</p>
<p>select 会阻塞到某个分支可以继续执行为止，这时就会执行该分支。当多个分支都准备好时会随机选择一个执行。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">(c, quit <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	x, y := <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> c &lt;- x:</span><br><span class="line">			x, y = y, x+y</span><br><span class="line">		<span class="keyword">case</span> &lt;-quit:</span><br><span class="line">			fmt.Println(<span class="string">&quot;quit&quot;</span>)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">	quit := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">			fmt.Println(&lt;-c)</span><br><span class="line">		&#125;</span><br><span class="line">		quit &lt;- <span class="number">0</span></span><br><span class="line">	&#125;() <span class="comment">// 学习此处的匿名函数写法</span></span><br><span class="line">	fibonacci(c, quit)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="默认选择"><a href="#默认选择" class="headerlink" title="默认选择"></a>默认选择</h3><p>当select中的其他分支都没有准备好时，执行default分支。用于避免程序阻塞。</p>
<h3 id="练习：等价二叉查找树"><a href="#练习：等价二叉查找树" class="headerlink" title="练习：等价二叉查找树"></a>练习：等价二叉查找树</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;golang.org/x/tour/tree&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Walk 步进 tree t 将所有的值从 tree 发送到 channel ch。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Walk</span><span class="params">(t *tree.Tree, ch <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (t != <span class="literal">nil</span>) &#123;</span><br><span class="line">		Walk(t.Left, ch)</span><br><span class="line">		ch &lt;- t.Value</span><br><span class="line">		Walk(t.Right, ch)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Same 检测树 t1 和 t2 是否含有相同的值。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Same</span><span class="params">(t1, t2 *tree.Tree)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	ch1, ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>), <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">	<span class="keyword">go</span> Walk(t1, ch1)</span><br><span class="line">	<span class="keyword">go</span> Walk(t2, ch2)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		v1 := &lt;-ch1</span><br><span class="line">		v2 := &lt;-ch2</span><br><span class="line">		<span class="keyword">if</span> v1 != v2 &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	t1 := tree.New(<span class="number">1</span>)</span><br><span class="line">	t2 := tree.New(<span class="number">1</span>)</span><br><span class="line">	fmt.Println(Same(t1, t2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="sync-Mutex"><a href="#sync-Mutex" class="headerlink" title="sync.Mutex"></a>sync.Mutex</h3><p>Mutex变量可进行Lock和Unlock。可使用defer保证互斥锁一定会被解锁。学习下列例子中defer的用法：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Value 返回给定 key 的计数器的当前值。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *SafeCounter)</span> <span class="title">Value</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	c.mux.Lock()</span><br><span class="line">	<span class="comment">// Lock 之后同一时刻只有一个 goroutine 能访问 c.v</span></span><br><span class="line">	<span class="keyword">defer</span> c.mux.Unlock()</span><br><span class="line">	<span class="keyword">return</span> c.v[key]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="练习：Web爬虫"><a href="#练习：Web爬虫" class="headerlink" title="练习：Web爬虫"></a>练习：Web爬虫</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Fetcher <span class="keyword">interface</span> &#123;</span><br><span class="line">	<span class="comment">// Fetch 返回 URL 的 body 内容，并且将在这个页面上找到的 URL 放到一个 slice 中。</span></span><br><span class="line">	Fetch(url <span class="keyword">string</span>) (body <span class="keyword">string</span>, urls []<span class="keyword">string</span>, err error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> crawled <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">bool</span> = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">bool</span>)</span><br><span class="line"><span class="keyword">var</span> mutex sync.Mutex</span><br><span class="line"></span><br><span class="line"><span class="comment">// Crawl 使用 fetcher 从某个 URL 开始递归的爬取页面，直到达到最大深度。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Crawl</span><span class="params">(url <span class="keyword">string</span>, depth <span class="keyword">int</span>, fetcher Fetcher, ch <span class="keyword">chan</span> <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">	<span class="comment">// <span class="doctag">TODO:</span> 并行的抓取 URL。</span></span><br><span class="line">	<span class="comment">// <span class="doctag">TODO:</span> 不重复抓取页面。</span></span><br><span class="line">	<span class="comment">// fmt.Println(url, depth)</span></span><br><span class="line">	<span class="keyword">if</span> depth &lt;= <span class="number">0</span> &#123;</span><br><span class="line">		ch &lt;- <span class="literal">true</span></span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	body, urls, err := fetcher.Fetch(url)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		ch &lt;- <span class="literal">true</span></span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	mutex.Lock()</span><br><span class="line">	<span class="keyword">if</span> (crawled[url] == <span class="literal">false</span>) &#123;</span><br><span class="line">		crawled[url] = <span class="literal">true</span></span><br><span class="line">		mutex.Unlock()</span><br><span class="line">		fmt.Printf(<span class="string">&quot;found: %s %q\n&quot;</span>, url, body)</span><br><span class="line">		</span><br><span class="line">		subCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line">		<span class="keyword">for</span> _, u := <span class="keyword">range</span> urls &#123;</span><br><span class="line">			<span class="keyword">go</span> Crawl(u, depth<span class="number">-1</span>, fetcher, subCh)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(urls); i++ &#123;</span><br><span class="line">			&lt;- subCh</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		mutex.Unlock()</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	ch &lt;- <span class="literal">true</span></span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line">	<span class="keyword">go</span> Crawl(<span class="string">&quot;https://golang.org/&quot;</span>, <span class="number">4</span>, fetcher, ch)</span><br><span class="line">	&lt;- ch</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fakeFetcher 是返回若干结果的 Fetcher。</span></span><br><span class="line"><span class="keyword">type</span> fakeFetcher <span class="keyword">map</span>[<span class="keyword">string</span>]*fakeResult</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> fakeResult <span class="keyword">struct</span> &#123;</span><br><span class="line">	body <span class="keyword">string</span></span><br><span class="line">	urls []<span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f fakeFetcher)</span> <span class="title">Fetch</span><span class="params">(url <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, []<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> res, ok := f[url]; ok &#123;</span><br><span class="line">		<span class="keyword">return</span> res.body, res.urls, <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;&quot;</span>, <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;not found: %s&quot;</span>, url)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fetcher 是填充后的 fakeFetcher。</span></span><br><span class="line"><span class="keyword">var</span> fetcher = fakeFetcher&#123;</span><br><span class="line">	<span class="string">&quot;https://golang.org/&quot;</span>: &amp;fakeResult&#123;</span><br><span class="line">		<span class="string">&quot;The Go Programming Language&quot;</span>,</span><br><span class="line">		[]<span class="keyword">string</span>&#123;</span><br><span class="line">			<span class="string">&quot;https://golang.org/pkg/&quot;</span>,</span><br><span class="line">			<span class="string">&quot;https://golang.org/cmd/&quot;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">&quot;https://golang.org/pkg/&quot;</span>: &amp;fakeResult&#123;</span><br><span class="line">		<span class="string">&quot;Packages&quot;</span>,</span><br><span class="line">		[]<span class="keyword">string</span>&#123;</span><br><span class="line">			<span class="string">&quot;https://golang.org/&quot;</span>,</span><br><span class="line">			<span class="string">&quot;https://golang.org/cmd/&quot;</span>,</span><br><span class="line">			<span class="string">&quot;https://golang.org/pkg/fmt/&quot;</span>,</span><br><span class="line">			<span class="string">&quot;https://golang.org/pkg/os/&quot;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">&quot;https://golang.org/pkg/fmt/&quot;</span>: &amp;fakeResult&#123;</span><br><span class="line">		<span class="string">&quot;Package fmt&quot;</span>,</span><br><span class="line">		[]<span class="keyword">string</span>&#123;</span><br><span class="line">			<span class="string">&quot;https://golang.org/&quot;</span>,</span><br><span class="line">			<span class="string">&quot;https://golang.org/pkg/&quot;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">&quot;https://golang.org/pkg/os/&quot;</span>: &amp;fakeResult&#123;</span><br><span class="line">		<span class="string">&quot;Package os&quot;</span>,</span><br><span class="line">		[]<span class="keyword">string</span>&#123;</span><br><span class="line">			<span class="string">&quot;https://golang.org/&quot;</span>,</span><br><span class="line">			<span class="string">&quot;https://golang.org/pkg/&quot;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>信道的作用在于等待所有goroutine完成后再退出本线程，相当于pthread_join。</p>
]]></content>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>TinyKV Project 1 - Standalone KV</title>
    <url>/2021/11/18/TinyKV%20Project%201%20-%20Standalone%20KV/</url>
    <content><![CDATA[<h2 id="任务目的"><a href="#任务目的" class="headerlink" title="任务目的"></a>任务目的</h2><p>熟悉Go语法，熟悉面向对象程序设计。</p>
<h2 id="任务说明"><a href="#任务说明" class="headerlink" title="任务说明"></a>任务说明</h2><p>Project1需要实现一个单节点、非分布式的K/V存储gRPC服务，本质上是对BadgerDB进行封装，以实现Put/Delete/Get/Scan四种基本操作，以及对Column Family的支持。</p>
<a id="more"></a>

<p>该Project大致分为两部分：</p>
<ol>
<li>StandAloneStorage类的实现。StandAloneStorage类实现了Storage接口，Storage接口提供了用于操作K/V数据库的Start、Stop、Write、Reader四个方法，对于StandAlone的数据库来说，这四个方法就是对底层的BadgerDB进行读写。</li>
<li>Raw API的实现。Raw API为服务器对外暴露的API，用于接收请求，通过调用StandAloneStorage类的方法处理请求，然后返回响应。Raw API需要实现前述的四种基本操作。</li>
</ol>
<p>上述调用关系如下图所示：</p>
<img src="1-1.png" width=500>

<h2 id="任务实现"><a href="#任务实现" class="headerlink" title="任务实现"></a>任务实现</h2><h3 id="StandAloneStorage类的实现"><a href="#StandAloneStorage类的实现" class="headerlink" title="StandAloneStorage类的实现"></a>StandAloneStorage类的实现</h3><p>StandAloneStorage类的实现基本不需要直接使用BadgerDB的方法，因为engine_util包中已经封装了许多操作BadgerDB的方法，且支持了Column Family，直接调用即可。</p>
<h4 id="func-NewStandAloneStorage"><a href="#func-NewStandAloneStorage" class="headerlink" title="func NewStandAloneStorage"></a>func NewStandAloneStorage</h4><p>该函数不是StandAloneStorage类的方法，接收config，返回一个新创建的StandAloneStorage指针。由于engines.go文件中封装的方法都以Engines类作为接收者，我们需要在创建StandAloneStorage的时候创建一个Engines实例。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> StandAloneStorage <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// Your Data Here (1).</span></span><br><span class="line">    en  *engine_util.Engines</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewStandAloneStorage</span><span class="params">(conf *config.Config)</span> *<span class="title">StandAloneStorage</span></span> &#123;</span><br><span class="line">    <span class="comment">// Your Code Here (1).</span></span><br><span class="line">    kvdb := engine_util.CreateDB(conf.DBPath, <span class="literal">false</span>)</span><br><span class="line">    raftdb := engine_util.CreateDB(conf.DBPath+<span class="string">&quot;/raft&quot;</span>, <span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">return</span> &amp;StandAloneStorage&#123;engine_util.NewEngines(kvdb, raftdb, conf.DBPath, conf.DBPath+<span class="string">&quot;/raft&quot;</span>)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Raft Engine在Project1中暂时不需要用到，但如果设为nil，自带的Engines.Close方法会尝试调用nil.Close()，引发错误，因此必须进行创建。</p>
<h4 id="func-Start"><a href="#func-Start" class="headerlink" title="func Start"></a>func Start</h4><p>根据Badger官方文档，一个Badger数据库通过Open方法打开后即可使用，最后再通过Close方法关闭。NewStandAloneStorage函数中调用的CreateDB函数已经调用了Open方法，此时数据库已经可以使用，因此Start方法无需执行任何操作。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *StandAloneStorage)</span> <span class="title">Start</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="comment">// Your Code Here (1).</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="func-Stop"><a href="#func-Stop" class="headerlink" title="func Stop"></a>func Stop</h4><p>Engines.Destroy一方面调用Engines.Close，关闭两个BadgerDB，另一方面删除目录。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *StandAloneStorage)</span> <span class="title">Stop</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="comment">// Your Code Here (1).</span></span><br><span class="line">    <span class="keyword">return</span> s.en.Destroy()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="func-Write"><a href="#func-Write" class="headerlink" title="func Write"></a>func Write</h4><p>Write方法接收一个名为batch，元素类型为storage.Modify的切片。Modify类包含一个接口成员Data，Data可以为Put类型或者Delete类型，分别对应增加和删除操作。Put类型包含Key、Value和Cf三个成员，而Delete类型没有Value成员。</p>
<p>engine_util包中的WriteBatch类提供了写入KV对到数据库的方法WriteToDB。对于Write方法的实现，我们遍历Modify切片，对于每个修改项利用WriteBatch.SetCF方法将其附加到WriteBatch的底层切片末尾（类型为badger.Entry），最后再调用WriteToDB进行写入。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *StandAloneStorage)</span> <span class="title">Write</span><span class="params">(ctx *kvrpcpb.Context, batch []storage.Modify)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="comment">// Your Code Here (1).</span></span><br><span class="line">    <span class="keyword">var</span> wb engine_util.WriteBatch</span><br><span class="line">    <span class="keyword">for</span> _, m := <span class="keyword">range</span> batch &#123;</span><br><span class="line">        wb.SetCF(m.Cf(), m.Key(), m.Value())</span><br><span class="line">    &#125;</span><br><span class="line">    err := wb.WriteToDB(s.en.Kv)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当Modify.Data的类型为Delete时，没有Value成员，m.Value()会返回nil，在badger.Entry当中，Value成员为nil时也表示删除，所以上述代码能够正确处理添加和删除两种操作。</p>
<h4 id="func-Reader"><a href="#func-Reader" class="headerlink" title="func Reader"></a>func Reader</h4><p>Reader方法需返回一个实现StorageReader接口的类，该接口包含GetCF、IterCF和Close三个方法。此处我定义了一个名为Reader的类实现该接口。</p>
<p>engine_util包中的GetCF函数和NewCFIterator函数可用于实现前两个方法，这两个函数分别需要传入badger指针和badger.Txn指针，因此，我们的自定义Reader类，第一，需要包含StandAloneStorage成员，以访问badger；第二，需要包含badger.Txn成员，这个成员在IterCF方法中通过badger.NewTransaction函数进行创建。此外，为了在Close方法中关闭迭代器，我们还需要包含迭代器成员。综上所述，Reader类和Reader方法定义如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Reader <span class="keyword">struct</span> &#123;</span><br><span class="line">    s   *StandAloneStorage</span><br><span class="line">    txn *badger.Txn</span><br><span class="line">    it  *engine_util.BadgerIterator</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *StandAloneStorage)</span> <span class="title">Reader</span><span class="params">(ctx *kvrpcpb.Context)</span> <span class="params">(storage.StorageReader, error)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Your Code Here (1).</span></span><br><span class="line">    <span class="keyword">return</span> &amp;Reader&#123;s, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>GetCF方法和IterCF方法的实现参照前文。对于Close方法，需要执行关闭迭代器和丢弃txn两个操作。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Reader)</span> <span class="title">GetCF</span><span class="params">(cf <span class="keyword">string</span>, key []<span class="keyword">byte</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">    val, _ := engine_util.GetCF(r.s.en.Kv, cf, key)</span><br><span class="line">    <span class="keyword">return</span> val, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Reader)</span> <span class="title">IterCF</span><span class="params">(cf <span class="keyword">string</span>)</span> <span class="title">engine_util</span>.<span class="title">DBIterator</span></span> &#123;</span><br><span class="line">    r.txn = r.s.en.Kv.NewTransaction(<span class="literal">false</span>)</span><br><span class="line">    r.it = engine_util.NewCFIterator(cf, r.txn)</span><br><span class="line">    <span class="keyword">return</span> r.it</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Reader)</span> <span class="title">Close</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> r.it != <span class="literal">nil</span> &#123;</span><br><span class="line">        r.it.Close()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> r.txn != <span class="literal">nil</span> &#123;</span><br><span class="line">        r.txn.Discard()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Raw-API的实现"><a href="#Raw-API的实现" class="headerlink" title="Raw API的实现"></a>Raw API的实现</h3><h4 id="func-RawGet"><a href="#func-RawGet" class="headerlink" title="func RawGet"></a>func RawGet</h4><p>调用Reader.GetCF即可。需要注意的点是resp.NotFound成员必须进行赋值。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span> <span class="title">RawGet</span><span class="params">(_ context.Context, req *kvrpcpb.RawGetRequest)</span> <span class="params">(*kvrpcpb.RawGetResponse, error)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Your Code Here (1).</span></span><br><span class="line">    reader, err := server.storage.Reader(<span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> reader.Close()</span><br><span class="line"></span><br><span class="line">    val, _ := reader.GetCF(req.GetCf(), req.GetKey())</span><br><span class="line">    resp := <span class="built_in">new</span>(kvrpcpb.RawGetResponse)</span><br><span class="line">    <span class="keyword">if</span> val == <span class="literal">nil</span> &#123;</span><br><span class="line">        resp.NotFound = <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resp.Value = val</span><br><span class="line">        resp.NotFound = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> resp, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="func-RawPut"><a href="#func-RawPut" class="headerlink" title="func RawPut"></a>func RawPut</h4><p>RawPutRequest仅包含一个请求，因此只需要创建一个长度为1的Modify切片放入请求，然后调用Write。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span> <span class="title">RawPut</span><span class="params">(_ context.Context, req *kvrpcpb.RawPutRequest)</span> <span class="params">(*kvrpcpb.RawPutResponse, error)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Your Code Here (1).</span></span><br><span class="line">    <span class="comment">// Hint: Consider using Storage.Modify to store data to be modified</span></span><br><span class="line">    batch := <span class="built_in">make</span>([]storage.Modify, <span class="number">1</span>)</span><br><span class="line">    batch[<span class="number">0</span>].Data = storage.Put&#123;Key: req.GetKey(), Value: req.GetValue(), Cf: req.GetCf()&#125;</span><br><span class="line"></span><br><span class="line">    err := server.storage.Write(<span class="literal">nil</span>, batch)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="func-RawDelete"><a href="#func-RawDelete" class="headerlink" title="func RawDelete"></a>func RawDelete</h4><p>同RawPut。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span> <span class="title">RawDelete</span><span class="params">(_ context.Context, req *kvrpcpb.RawDeleteRequest)</span> <span class="params">(*kvrpcpb.RawDeleteResponse, error)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Your Code Here (1).</span></span><br><span class="line">    <span class="comment">// Hint: Consider using Storage.Modify to store data to be deleted</span></span><br><span class="line">    batch := <span class="built_in">make</span>([]storage.Modify, <span class="number">1</span>)</span><br><span class="line">    batch[<span class="number">0</span>].Data = storage.Delete&#123;Key: req.GetKey(), Cf: req.GetCf()&#125;</span><br><span class="line"></span><br><span class="line">    err := server.storage.Write(<span class="literal">nil</span>, batch)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="func-RawScan"><a href="#func-RawScan" class="headerlink" title="func RawScan"></a>func RawScan</h4><p>流程如下：</p>
<ol>
<li>获得Reader</li>
<li>调用Reader.IterCF获得迭代器it</li>
<li>将迭代器it定位至req.StartKey处</li>
<li>创建切片，循环读取KV对放到切片末尾，直到KV对数量达到req.Limit，或者迭代器失效</li>
<li>返回响应</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span> <span class="title">RawScan</span><span class="params">(_ context.Context, req *kvrpcpb.RawScanRequest)</span> <span class="params">(*kvrpcpb.RawScanResponse, error)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Your Code Here (1).</span></span><br><span class="line">    <span class="comment">// Hint: Consider using reader.IterCF</span></span><br><span class="line">    reader, err := server.storage.Reader(<span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> reader.Close()</span><br><span class="line"></span><br><span class="line">    it := reader.IterCF(req.GetCf())</span><br><span class="line">    it.Seek(req.StartKey)</span><br><span class="line">    kvs := <span class="built_in">make</span>([]*kvrpcpb.KvPair, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="keyword">int</span>(req.GetLimit()) &amp;&amp; it.Valid(); i++ &#123;</span><br><span class="line">        val, _ := it.Item().Value()</span><br><span class="line">        <span class="keyword">var</span> Kv kvrpcpb.KvPair</span><br><span class="line">        <span class="keyword">if</span> val != <span class="literal">nil</span> &#123;</span><br><span class="line">            Kv = kvrpcpb.KvPair&#123;Key: it.Item().Key(), Value: val&#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Kv = kvrpcpb.KvPair&#123;Key: it.Item().Key()&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        kvs = <span class="built_in">append</span>(kvs, &amp;Kv)</span><br><span class="line">        it.Next()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;kvrpcpb.RawScanResponse&#123;Kvs: kvs&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>容易出错的两个地方：一是没有reader没有关闭，二是迭代器没有先通过Seek方法定位到StartKey处。</p>
<h2 id="错误与调试"><a href="#错误与调试" class="headerlink" title="错误与调试"></a>错误与调试</h2><h3 id="Engines的RaftDB留空"><a href="#Engines的RaftDB留空" class="headerlink" title="Engines的RaftDB留空"></a>Engines的RaftDB留空</h3><p>导致Destroy Engines时无法访问nil.Close()。</p>
<img src="1-2.png">

<h3 id="没有设置RawGetResponse-NotFound"><a href="#没有设置RawGetResponse-NotFound" class="headerlink" title="没有设置RawGetResponse.NotFound"></a>没有设置RawGetResponse.NotFound</h3><img src="1-3.png" width=500>

<h3 id="RawGet的返回值问题"><a href="#RawGet的返回值问题" class="headerlink" title="RawGet的返回值问题"></a>RawGet的返回值问题</h3><p>当key not found时，RawGet算作正常返回，不应该返回error。</p>
<img src="1-4.png" width=500>

<h3 id="未判断迭代器是否有效"><a href="#未判断迭代器是否有效" class="headerlink" title="未判断迭代器是否有效"></a>未判断迭代器是否有效</h3><img src="1-5.png">

<h3 id="未将迭代器Seek到StartKey位置"><a href="#未将迭代器Seek到StartKey位置" class="headerlink" title="未将迭代器Seek到StartKey位置"></a>未将迭代器Seek到StartKey位置</h3><img src="1-6.png" width=500>
]]></content>
      <tags>
        <tag>Go</tag>
        <tag>分布式系统</tag>
      </tags>
  </entry>
  <entry>
    <title>In Search of an Understandable Consensus Algorithm - Raft</title>
    <url>/2021/12/13/In-Search-of-an-Understandable-Consensus-Algorithm-Raft/</url>
    <content><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>Raft是一个用于管理replicated log的共识算法（consensus algorithm）。Raft与Paxos一样高效。相比Paxos，Raft更加易懂，且为应用到实际系统当中提供了更好的基础。为了提高可理解性，Raft将共识算法的几个关键元素分开，例如leader election、log replication和safety，并且它通过执行更强的一致性减少了需要考虑的状态数目。</p>
<a id="more"></a>

<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>共识算法能够让一群机器作为一个团结一致的群体运行，且能够容忍其中部分成员的失效。因此，共识算法在建立可靠的大规模软件系统当中发挥了重要作用。目前，几乎所有的共识算法都是基于Paxos，或受其影响的。但Paxos有两个缺点：</p>
<ol>
<li>难以理解。</li>
<li>不能为构建实际系统提供一个很好的基础。为了应用到实际系统，需要进行复杂的更改。</li>
</ol>
<p>Raft的提出就是为了改善这两个问题。Raft有以下几个新的特征：</p>
<ol>
<li>Strong leader：相比其他共识算法，Raft使用了一种更强的领导形式。例如，log entries只从leader传输到其他服务器。这简化了replicated log的管理，并且使得Raft更易懂。</li>
<li>Leader election：Raft使用了随机的计时器来选举领导。这是在其他共识算法已有的心跳机制的基础上进行的小规模的修改，但却简单迅速地解决了冲突。</li>
<li>Membership changes：Raft再更改集群中服务器集合的时候采用了新的joint consensus方法，两种不同配置的大多数服务器在转换过程中会重叠。这使得集群在配置更改的过程中仍然能正常运行。</li>
</ol>
<h1 id="Replicated-state-machines"><a href="#Replicated-state-machines" class="headerlink" title="Replicated state machines"></a>Replicated state machines</h1><p>共识算法被应用的典型场景是Replicated state machines，其中，一群机器上的状态机计算相同状态的副本，并且在部分服务器失效的情况下也能继续运行。Replicated state machines被用于解决分布式系统中的容错问题。</p>
<p>如下图，Replicated state machines通常使用replicated log实现。每个服务器存储一个包含一系列指令的日志，状态机顺序执行这些指令。所有状态机按同样的顺序存储相同的指令，得到相同的输出序列。</p>
<img src="figure1.png">

<p>实际系统中的共识算法通常具有下列性质：</p>
<ol>
<li>在非拜占庭条件之下保证安全（不返回错误的结果）。非拜占庭条件指的是<strong>可以出现故障，但信息不能被伪造</strong>，例如网络延迟、丢包、重复、失序。与之相对应的是信息被伪造的拜占庭错误。</li>
<li>当大多数服务器可用且能够互相发送信息时，集群就是可用的。例如，拥有5个服务器的典型集群能够容忍2个服务器的失效。</li>
<li>不依赖于计时器来保证日志的一致性，错误的时钟和极端的消息延迟在最坏情况下也只会造成可用性问题，而不会影响一致性。</li>
<li>通常情况下，一旦集群中的大多数服务器对一轮RPC完成一次响应，集群就完成了一条指令的执行；少数慢速服务器不会影响系统的整体性能。</li>
</ol>
<h1 id="Raft算法"><a href="#Raft算法" class="headerlink" title="Raft算法"></a>Raft算法</h1><p>Raft将共识问题分解为下列几个相对独立的子问题：</p>
<ol>
<li>Leader election：当现有的leader失效时，一个新的leader被选出。</li>
<li>Log replication：leader从客户端接收log entries，在集群中复制，保证其他日志与之一致。</li>
<li>Safety：Raft在任何时候保证下列每一条性质。<ul>
<li>Election Safety：在一个给定的term当中，至多一个leader被选出。</li>
<li>Leader Append-Only：一个leader从不覆写或删除其日志中的entries；leader只附加新的entries。</li>
<li>Log Matching：如果两份日志包含一条拥有相同index和term的entry，那么这两份日志中所有给定index的entry都是相同的。</li>
<li>Leader Completeness：如果一个log entry在一个给定的term当中提交，那么这个entry将会在所有term更高的leaders的日志当中出现。</li>
<li>State Machine Safety：如果一个服务器将一个给定index的log entry应用到它的状态机上，那么其他服务器将永远不会在相同的index上应用一个不同的log entry。</li>
</ul>
</li>
</ol>
<h2 id="Raft基本定义"><a href="#Raft基本定义" class="headerlink" title="Raft基本定义"></a>Raft基本定义</h2><h3 id="服务器的三种状态"><a href="#服务器的三种状态" class="headerlink" title="服务器的三种状态"></a>服务器的三种状态</h3><p>一个Raft集群由若干个服务器组成。在任意给定的时刻，每个服务器处于下列三种状态中的一种：leader、follower、candidate。在正常运行时，仅有一个leader，其他服务器均为follower。follower都是被动的：它们不会自己发送请求，只会响应来自leader和candidate的请求。leader处理所有的客户端请求（若客户端联系follower，follower将请求重定向到leader）。candidate用于选举新的leader。</p>
<p>上述三个状态的状态转移图如下：</p>
<img src="figure4.png">

<h3 id="时间划分：term"><a href="#时间划分：term" class="headerlink" title="时间划分：term"></a>时间划分：term</h3><p>Raft将时间划分为任意长度的terms，用连续的整数表示。每个term起始于选举，此时有一个或多个candidate尝试成为leader。如果某一个candidate赢得了选举，在这个term的剩余时间当中它将作为集群唯一的leader。如果选举不出leader，例如两个candidate同票，那么这个term直接结束，进入下一个term，开始一场新的选举。</p>
<img src="figure5.png">

<p>term在Raft中充当逻辑时钟的角色，使得服务器能够检测过时的信息，例如过时的leader。每个服务器存储一个<em>current term</em>数值，在每次通信时发送自己的current term。当某个服务器接收到一个包含比自己大的current term的请求时，它会更新current term为这个更大的值。如果这个服务器是candidate或者leader，他会返回follower状态。反之，当服务器接收到一个包含过时的、比自己小的term的请求时，它会拒绝这个请求。</p>
<h3 id="RPC类型"><a href="#RPC类型" class="headerlink" title="RPC类型"></a>RPC类型</h3><p>Raft服务器之间使用RPC进行通信。基本的共识算法只需要两种类型的RPC：</p>
<ol>
<li>RequestVote RPC，由candidate初始化，用于请求其他服务器投票。</li>
<li>AppendEntries RPC，由leader初始化，用于复制log entry和提供心跳信号。</li>
</ol>
<p>Raft还加入了第三种类型的RPC，用于在服务器之间传输snapshot。</p>
<p>如果服务器没有及时收到响应，它们会重试RPC。服务器以并行的方式处理RPC。</p>
<h2 id="Leader-election"><a href="#Leader-election" class="headerlink" title="Leader election"></a>Leader election</h2><p>Raft使用心跳机制来触发leader election。服务器启动时为follower状态，且只要它收到来自leader或candidate的有效的RPC，它就会维持follower状态。leader会定期发送心跳信号（即空的AppendEntries RPC）给所有follower来维持它的权威。如果一个follower在一段叫做<em>election timeout</em>的时间之后还没有收到通信，则它认为没有可见的leader，从而开始一次新的选举。</p>
<p>为了开始一次选举，一个follower将它的current term加一，然后进入candidate状态。它会<strong>投票给自己</strong>，然后并行地在集群中的其他服务器上执行RequestVote RPC。</p>
<p>candidate维持其状态，直到下列三者之一发生：</p>
<ol>
<li>它赢得了选举。当candidate收到整个集群（full cluster）中大多数服务器的相同term的投票时，它将赢得选举成为leader。在给定的term当中，服务器根据FCFS策略投票给第一个candidate。</li>
<li>另一个服务器赢得选举，成为leader。在等待投票的过程中，如果candidate收到AppendEntries RPC，且发送者的term号大于等于服务器自身的term，则说明另一个服务器已经成为leader。本服务器转为follower。</li>
<li>一段时间后，没有服务器赢得选举。此时每个服务器都会超时，并且开始一场新的选举。为避免这种情况无穷无尽地出现，Raft使用随机的election timeout，即从一个给定的间隔中随机选取（如150-300ms）。这使得在大多数情况下只有一个服务器超时，并且它在其他服务器超时之前就已经成为leader并发送了心跳信号。</li>
</ol>
<h2 id="Log-replication"><a href="#Log-replication" class="headerlink" title="Log replication"></a>Log replication</h2><p>leader处理客户端请求。每条客户端请求包含一条将被replicated state machines执行的指令。leader将这条指令以一个新的entry的形式添加到日志末尾，然后对其他服务器并行地执行AppendEntries RPC，以复制这条entry。当entry被<strong>安全复制</strong>之后，leader对其自己的状态机应用这条entry，然后返回执行结果给客户端。如果由于follower服务器失效、运行速度过慢或网络丢包等原因导致log entry无法被复制到该follower上面，leader会无穷无尽地重试AppendEntries RPC，即使它已经回复了客户端的请求也是如此，直到所有的follower都存储了所有的log entry。</p>
<p>Log的形式如下图所示。</p>
<img src="figure6.png">

<p>当一条log entry能够被安全地应用到leader的状态机上时，我们称之为一条<em>被提交</em>的entry。Raft保证被提交的entry是持久的，且最终会被应用于所有有效的状态机上。当创建这条entry的leader将其复制到大多数服务器上之后，这条entry就被提交。同时，leader的日志中所有之前的entry也会被一并提交，包括先前其他leader创建的entry。</p>
<p>leader持续追踪已被提交的最大index，并且在AppendEntries RPC中包含这个index。一旦一个follower得知某条log entry被提交，它就会将这条entry应用到自己的local状态机上。</p>
<p>Raft维持下列两条性质，共同构成了上述提到的Log Matching Property：</p>
<ol>
<li>如果不同log当中的两条entry拥有相同的index和term，那么他们存储相同的指令。</li>
<li>如果不同log当中的两条entry拥有相同的index和term，那么这两个log之前的entry完全一样。</li>
</ol>
<p>第一条性质的正确性来源于：leader至多创建一条给定index和term的entry，且entry不会在log中更改位置。第二条性质的正确性来源于AppendEntries的简单一致性检查。当发送AppendEntries RPC时，leader会包含上一个entry的index和term。如果follower没有在其日志中找到相同的index和term，它会拒绝新的entry的添加。</p>
<p>在正常运行的情况下，leader和follower的日志是一致的。但是leader的失效会导致不一致，因为旧的leader可能没有完成其日志中所有entry的复制。下图为几种可能的情况：</p>
<img src="figure7.png">

<p>服务器的日志有可能缺失当前leader中的entry，也有可能拥有leader中没有的entry，或两者皆发生。且有可能横跨多个term。</p>
<p>在Raft当中，leader通过强制follower复制其日志的方式来处理不一致。这意味着follower中冲突的日志将会被leader对应的entry覆盖。为了达到一致性，leader必须找到两份日志当中最后一个相同的entry，删除follower日志中在此之后的entry，然后向follower其发送leader日志中在此之后的所有entry。leader对每一个follower维护一个<em>nextIndex</em>变量，表示leader将发送给follower的下一个entry的index。当服务器成为leader的时候，它会将所有nextIndex值初始化为其log的下一个号码。如果entry不一致，AppendEntries一致性检查会在下一个AppendEntries RPC中失败。在收到拒绝之后，leader将nextIndex减1，然后重试AppendEntries RPC，直至成功，然后再向后添加正确的entry。</p>
<h1 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h1><p>Q: Log的作用是什么？Log中存储的历史指令在什么时候需要用到？</p>
<p>Q: Log中存储term号的作用？</p>
<p>Q: 假如一个leader服务器的部分entry还没有被提交时，这个服务器就故障了，但故障时间很短，它马上又成为了leader。根据Leader Append-Only Rule，这个leader存储的未提交的错误entry不能被删除。请问这种情况有可能发生吗？</p>
<p>Q: 当一个leader故障时，如何保证新选出来的leader的log是正确的？</p>
<p>Q: entry什么时候被应用于follower的状态机上？还是说没有必要应用？</p>
]]></content>
      <tags>
        <tag>分布式系统</tag>
      </tags>
  </entry>
  <entry>
    <title>6.824 lab1</title>
    <url>/2022/10/05/6-824-lab1/</url>
    <content><![CDATA[<h1 id="6-824简介"><a href="#6-824简介" class="headerlink" title="6.824简介"></a>6.824简介</h1><p>6.824为MIT的分布式系统课程。同TinyKV类似，6.824的主要内容也为实现Raft共识算法。以笔者做完Lab1的感受，相比TinyKV，6.824仅提供了基本框架，在测试用例当中并未对实现过程中所使用的数据结构进行具体要求，因此编程自由度较高。</p>
<a id="more"></a>

<h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><p><a href="https://pdos.csail.mit.edu/6.824/index.html">6.824 Home Page: Spring 2022</a></p>
<p><a href="https://www.zhihu.com/column/c_1273718607160393728">MIT6.824分布式系统课程中文翻译 - 知乎 (zhihu.com)</a></p>
<p><a href="https://www.zhihu.com/question/29597104">如何的才能更好地学习 MIT6.824 分布式系统课程？ - 知乎 (zhihu.com)</a></p>
<p><a href="https://www.bilibili.com/video/BV1x7411M7Sf/?vd_source=9d62693ecec9580875ee46c2c032eb29">【MIT 6.824 Distributed Systems Spring 2020 分布式系统 中文翻译版合集】_哔哩哔哩_bilibili</a></p>
<h1 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h1><p>实现一个分布式的MapReduce系统，实验文档中文翻译参照：</p>
<p><a href="https://www.cnblogs.com/greenty1208/p/13161064.html">【翻译】6.824 lab1 （自用不负责） - Greenty - 博客园 (cnblogs.com)</a></p>
<h1 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h1><p>MapReduce是Google提出的一个软件架构，用于大规模数据集的并行运算。MapReduce包含Map和Reduce两个步骤，可以用函数来表示。</p>
<ul>
<li><code>Map</code>函数读取一个文件，根据文件内容输出一个称为<strong>中间件</strong>的键值对列表。每个<code>Map</code>函数分别处理一个输入文件。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Map</span><span class="params">(fileName <span class="keyword">string</span>, content <span class="keyword">string</span>)</span> <span class="title">intermediates</span> []<span class="title">KVPair</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>所有<code>Map</code>函数输出的中间件集合在一起，作为完整的中间件。对于中间件中每个不同的key对应的所有键值对，分别执行一个<code>Reduce</code>函数。<code>Reduce</code>函数根据键值对列表的内容输出这个key对应的一个value。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Reduce</span><span class="params">(key <span class="keyword">string</span>, values []<span class="keyword">string</span>)</span> <span class="title">string</span></span></span><br></pre></td></tr></table></figure>
<p>整个MapReduce流程的输入为文件列表，输出为键值对列表。</p>
<h1 id="系统实现"><a href="#系统实现" class="headerlink" title="系统实现"></a>系统实现</h1><p>MapReduce的分布式执行系统包含一个master（coordinator）和若干个worker。master负责任务分发、协调任务的运行，worker负责执行具体的map和reduce函数。master启动后，执行注册RPC的操作，使得其方法对worker可见。worker通过本地网络对master的方法进行远程调用。</p>
<p><strong>注意：使用RPC包时，外部方法名称和被传输结构体当中的成员名称的首字母均需要大写，否则会出现数据无法正常传输的错误。</strong></p>
<h2 id="worker"><a href="#worker" class="headerlink" title="worker"></a>worker</h2><p>由于master无法知道worker的存在，也无法知道worker是否故障，因此worker的主循环中需要反复向master请求分发任务，在任务完成之后需要向master发送完成信息，分别对应master的<code>DispatchTask</code>和<code>HandleTaskDone</code>两个方法。worker主循环如下，master返回<code>TASK_WAIT</code>时代表map任务未全部完成，worker等待一段时间之后再次向master请求可能的reduce任务或者超时的map任务。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    reply := SendRequest()</span><br><span class="line">    <span class="keyword">if</span> reply == <span class="literal">nil</span> || reply.TaskType == TASK_NONE &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> reply.TaskType == TASK_MAP &#123;</span><br><span class="line">        doMap(reply, mapf)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> reply.TaskType == TASK_REDUCE &#123;</span><br><span class="line">        doReduce(reply, reducef)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// TASK_WAIT</span></span><br><span class="line">        time.Sleep(<span class="number">100</span> * time.Millisecond)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="master"><a href="#master" class="headerlink" title="master"></a>master</h1><p>master结构体定义如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Coordinator <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// Your definitions here.</span></span><br><span class="line">    files   []<span class="keyword">string</span></span><br><span class="line">    nReduce <span class="keyword">int</span></span><br><span class="line">    nodeId  <span class="keyword">int</span> <span class="comment">// dispatch task with a node id to identify temp files generated by different nodes</span></span><br><span class="line"></span><br><span class="line">    mapStates []<span class="keyword">int</span> <span class="comment">// 0:not dispatched, 1:dispatched, 2:done, 3:dispatched_timeout</span></span><br><span class="line">    mapIds    []<span class="keyword">int</span></span><br><span class="line">    mapDone   <span class="keyword">bool</span></span><br><span class="line">    mapMutex  sync.Mutex</span><br><span class="line"></span><br><span class="line">    reduceStates []<span class="keyword">int</span> <span class="comment">// 0:not dispatched, 1:dispatched, 2:done, 3:dispatched_timeout</span></span><br><span class="line">    reduceIds    []<span class="keyword">int</span></span><br><span class="line">    reduceDone   <span class="keyword">bool</span></span><br><span class="line">    reduceMutex  sync.Mutex</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>master将每个map任务和每个reduce任务的状态分别保存与<code>mapStates</code>和<code>reduceStates</code>切片中，0表示未分发，1表示已分发但未完成，2表示完成，3表示超时（在下一节会详细介绍超时处理）。在<code>DispatchTask</code>方法中，master首先根据<code>mapDone</code>变量判断map是否完成，然后相应地遍历<code>mapStates</code>或<code>reduceStates</code>切片，找到第一个未分发的任务进行分发。由于两个切片和两个done变量可能同时被多个worker访问，需进行加锁。我用了<code>mapMutex</code>和<code>reduceMutex</code>两把锁。</p>
<h1 id="超时处理"><a href="#超时处理" class="headerlink" title="超时处理"></a>超时处理</h1><h2 id="超时检测"><a href="#超时检测" class="headerlink" title="超时检测"></a>超时检测</h2><p>当master持续一段时间未收到来自worker的完成信息时，可认为对应的worker故障或者速度太慢，此时需要重新分发任务。可以通过新建一个goroutine进行后台计时。goroutine会在父函数返回的时候退出，因此不能在<code>DispatchTask</code>方法当中对于每个任务单独创建一个用于计时的goroutine，否则，当RPC调用返回的时候，这个goroutine也会随之结束。</p>
<p>由上，goroutine只能在<code>MakeCoordinator</code>函数中创建。出于简洁性，我实现了如下函数：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> c.Done() &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//fmt.Printf(&quot;checking timeout\n&quot;)</span></span><br><span class="line">        time.Sleep(<span class="number">10</span> * time.Second)</span><br><span class="line">        c.mapMutex.Lock()</span><br><span class="line">        <span class="keyword">for</span> i, state := <span class="keyword">range</span> c.mapStates &#123;</span><br><span class="line">            <span class="keyword">if</span> state == <span class="number">1</span> &#123;</span><br><span class="line">                c.mapStates[i] = <span class="number">3</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> state == <span class="number">3</span> &#123;</span><br><span class="line">                fmt.Printf(<span class="string">&quot;map timeout %v\n&quot;</span>, i)</span><br><span class="line">                c.mapStates[i] = <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        c.mapMutex.Unlock()</span><br><span class="line">        c.reduceMutex.Lock()</span><br><span class="line">        <span class="keyword">for</span> i, state := <span class="keyword">range</span> c.reduceStates &#123;</span><br><span class="line">            <span class="keyword">if</span> state == <span class="number">1</span> &#123;</span><br><span class="line">                c.reduceStates[i] = <span class="number">3</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> state == <span class="number">3</span> &#123;</span><br><span class="line">                fmt.Printf(<span class="string">&quot;reduce timeout %v\n&quot;</span>, i)</span><br><span class="line">                c.reduceStates[i] = <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        c.reduceMutex.Unlock()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure>
<p>该goroutine每隔一段时间检查state的值，当state为1时，将其设为3。当state为3时视为超时。该实现的超时时间不是固定的，而是一个范围，但在实现上较为简洁。</p>
<h2 id="临时文件处理"><a href="#临时文件处理" class="headerlink" title="临时文件处理"></a>临时文件处理</h2><p>假设超时是由于节点速度过慢，当新节点被指派重复执行该任务的时候，新节点和旧节点产生的临时文件会冲突。因此，我在worker生成的临时文件的文件名当中加上了节点的ID以进行区分，当worker向master报告任务完成之后，master才将对应节点产生的临时文件重命名为所需要的形式。为了避免因某个任务的基础执行时间超过了超时阈值而导致的重复超时，master在接收到任意一个worker报告的完成信息时立即将该任务标记为完成，即使该worker已经超时。</p>
]]></content>
      <tags>
        <tag>Go</tag>
        <tag>分布式系统</tag>
      </tags>
  </entry>
  <entry>
    <title>6.824 lab2a, 2b</title>
    <url>/2022/10/19/6-824-lab2a-2b/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>6.824 lab2a、2b要求实现raft算法的领导选举和日志追加部分。</p>
<a id="more"></a>

<h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><ul>
<li><p>Lab2翻译：<a href="https://zhuanlan.zhihu.com/p/248686289">MIT 6.824 Lab2 翻译 （已完成）（Raft Base on Golang） - 知乎 (zhihu.com)</a></p>
</li>
<li><p>Raft论文翻译：<a href="https://www.jianshu.com/p/96ab0e8ad8f1">Raft一致性算法中文翻译版(格式同原论文) - 简书 (jianshu.com)</a></p>
</li>
<li><p>实验指南翻译：</p>
<ul>
<li><p><a href="https://zhuanlan.zhihu.com/p/510169586">MIT 6.824 - Lab 2 (1): Students’ Guide to Raft - 知乎 (zhihu.com)</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/510801912">MIT 6.824 - Lab 2 (2): Raft Locking Advice - 知乎 (zhihu.com)</a></p>
</li>
<li><p><a href="https://github.com/raygift/learningNotes/blob/main/mit6.824/%5B%E7%BF%BB%E8%AF%91%5DLab2:%20Raft%20Structure%20Advice.md">learningNotes/[翻译]Lab2: Raft Structure Advice.md at main · raygift/learningNotes (github.com)</a></p>
</li>
</ul>
</li>
<li><p>sync.Cond包介绍：<a href="https://geektutu.com/post/hpg-sync-cond.html">Go sync.Cond | Go 语言高性能编程 | 极客兔兔 (geektutu.com)</a></p>
</li>
</ul>
<h1 id="Raft算法"><a href="#Raft算法" class="headerlink" title="Raft算法"></a>Raft算法</h1><p>Raft算法的核心可参考Raft原论文<em>In Search of an Understandable Consensus Algorithm</em>的Figure 2，以下为中文翻译。</p>
<h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><h3 id="所有服务器上需要被持久化的状态（回复RPC之前在稳定存储介质中更新）"><a href="#所有服务器上需要被持久化的状态（回复RPC之前在稳定存储介质中更新）" class="headerlink" title="所有服务器上需要被持久化的状态（回复RPC之前在稳定存储介质中更新）"></a>所有服务器上需要被持久化的状态（回复RPC之前在稳定存储介质中更新）</h3><ul>
<li><p><strong>currentTerm</strong>：服务器看见的最新任期（第一次启动时初始化为0，单调增加）</p>
</li>
<li><p><strong>votedFor</strong>：在当前任期收到的投票请求的候选者ID（若没有，则为null）</p>
</li>
<li><p>**log[]**：日志记录；每条记录包含用于状态机的指令，以及领导者收到此条记录时的任期（第一个下标为1）</p>
</li>
</ul>
<h3 id="所有服务器上可变的状态："><a href="#所有服务器上可变的状态：" class="headerlink" title="所有服务器上可变的状态："></a>所有服务器上可变的状态：</h3><ul>
<li><p><strong>commitIndex</strong>：已知的被提交的最大下标（初始化为0，单调增加）</p>
</li>
<li><p><strong>lastApplied</strong>：被应用到状态机的最大下标（初始化为0，单调增加）</p>
</li>
</ul>
<h3 id="领导者的可变状态（选举后重新初始化）"><a href="#领导者的可变状态（选举后重新初始化）" class="headerlink" title="领导者的可变状态（选举后重新初始化）"></a>领导者的可变状态（选举后重新初始化）</h3><ul>
<li><p>**nextIndex[]**：对于每个服务器，为即将发送给这个服务器的记录的下标（初始化为领导者最后一条记录的下标+1）</p>
</li>
<li><p>**matchIndex[]**：对于每个服务器，为已知的被复制到该服务器的最大下标（初始化为0，单调增加）</p>
</li>
</ul>
<h2 id="AppendEntries-RPC"><a href="#AppendEntries-RPC" class="headerlink" title="AppendEntries RPC"></a>AppendEntries RPC</h2><h3 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h3><ul>
<li><p><strong>term</strong>：领导者任期</p>
</li>
<li><p><strong>leaderId</strong>：使得参与者可以重定向客户端</p>
</li>
<li><p><strong>prevLogIndex</strong>：新记录的直接前驱记录的下标</p>
</li>
<li><p><strong>prevLogTerm</strong>：新纪录的直接前驱记录的任期</p>
</li>
<li><p>**entries[]**：新纪录（心跳则为空，为了效率可以发送多个记录）</p>
</li>
<li><p><strong>leaderCommit</strong>：领导者的commitIndex</p>
</li>
</ul>
<h3 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h3><ul>
<li><p><strong>term</strong>：currentTerm，供领导者更新自己</p>
</li>
<li><p><strong>success</strong>：如果参与者包含与prevLogIndex和prevLogTerm相匹配的记录，则为真</p>
</li>
</ul>
<h3 id="接收者实现："><a href="#接收者实现：" class="headerlink" title="接收者实现："></a>接收者实现：</h3><ol>
<li><p>如果term&lt;currentTerm，返回假</p>
</li>
<li><p>如果不包含与prevLogIndex和prevLogTerm相匹配的记录，则返回假</p>
</li>
<li><p>如果一条现有的记录与新纪录冲突（下标相同但任期不同），删除这条现有的条目，以及所有后继的条目</p>
</li>
<li><p>将不在log当中的所有记录追加到log当中</p>
</li>
<li><p>如果leaderCommit&gt;commitIndex，设置commitIndex=min(leaderCommit, 最后一条新记录的下标)</p>
</li>
</ol>
<h2 id="RequestVote-RPC"><a href="#RequestVote-RPC" class="headerlink" title="RequestVote RPC"></a>RequestVote RPC</h2><h3 id="参数：-1"><a href="#参数：-1" class="headerlink" title="参数："></a>参数：</h3><ul>
<li><p><strong>term</strong>：候选者任期</p>
</li>
<li><p><strong>candidateId</strong>：候选者ID</p>
</li>
<li><p><strong>lastLogIndex</strong>：候选者最后一条记录的下标</p>
</li>
<li><p><strong>lastLogTerm</strong>：候选者最后一条记录的任期</p>
</li>
</ul>
<h3 id="结果：-1"><a href="#结果：-1" class="headerlink" title="结果："></a>结果：</h3><ul>
<li><p><strong>term</strong>：currentTerm，供候选者更新自己</p>
</li>
<li><p><strong>voteGranted</strong>：为真意味着候选者收到一票</p>
</li>
</ul>
<h3 id="接收者实现：-1"><a href="#接收者实现：-1" class="headerlink" title="接收者实现："></a>接收者实现：</h3><ol>
<li><p>如果term&lt;currentTerm，返回假</p>
</li>
<li><p>如果votedFor为null或者candidateId，并且候选者的记录至少与接收者一样新（下面会定义），则投票</p>
</li>
</ol>
<h2 id="所有服务器的规则"><a href="#所有服务器的规则" class="headerlink" title="所有服务器的规则"></a>所有服务器的规则</h2><h3 id="所有服务器："><a href="#所有服务器：" class="headerlink" title="所有服务器："></a>所有服务器：</h3><ul>
<li><p>如果commitIndex&gt;lastApplied：递增lastApplied，将log[lastApplied]应用到状态机</p>
</li>
<li><p>如果RPC请求或RPC回复中包含的任期T&gt;currentTerm：设置currentTerm=T，转换为参与者</p>
</li>
</ul>
<h3 id="参与者："><a href="#参与者：" class="headerlink" title="参与者："></a>参与者：</h3><ul>
<li><p>回复来自候选者和领导者的RPC</p>
</li>
<li><p>如果在选举超时时间内，没有收到来自当前领导者的AppendEntries RPC或没有投票给候选者：转变为领导者</p>
</li>
</ul>
<h3 id="候选者："><a href="#候选者：" class="headerlink" title="候选者："></a>候选者：</h3><ul>
<li><p>当转变为候选者时，开始选举：</p>
<ul>
<li><p>递增currentTerm</p>
</li>
<li><p>投票给自己</p>
</li>
<li><p>重置选举定时器</p>
</li>
<li><p>发送RequestVote RPC给所有其他服务器</p>
</li>
</ul>
</li>
<li><p>如果收到来自大多数服务器的投票：转变为领导者</p>
</li>
<li><p>如果收到来自新领导者的AppendEntries RPC：转变为参与者</p>
</li>
<li><p>如果选举超时：开始新的选举</p>
</li>
</ul>
<h3 id="领导者："><a href="#领导者：" class="headerlink" title="领导者："></a>领导者：</h3><ul>
<li><p>当选举之后：发送初始的空AppendEntries RPC（心跳）给每个服务器；在空闲时段内重复发送，以避免选举超时</p>
</li>
<li><p>如果收到来自客户端的命令：追加命令到本地的log，在将命令应用到状态机之后回复客户端</p>
</li>
<li><p>如果最后一条记录的下标&gt;=某个参与者的nextIndex：发送由AppendEntries RPC，包含由nextIndex开始的记录</p>
<ul>
<li><p>如果成功：更新每个参与者的nextIndex和matchIndex</p>
</li>
<li><p>如果由于记录的不一致而失败：递减nextIndex并重试</p>
</li>
</ul>
</li>
<li><p>如果存在一个N，使得N&gt;commitIndex，大多数的matchIndex[i]&gt;=N，且log[N].term == currentTerm：设置commitIndex=N</p>
</li>
</ul>
<h1 id="实现注意事项"><a href="#实现注意事项" class="headerlink" title="实现注意事项"></a>实现注意事项</h1><ul>
<li><p>RequestVote RPC中比较日志新旧的方法在5.4.1中提到：如果两个日志最后的记录的任期不同，则包含更新任期记录的日志更新；如果两份日志最后的记录的任期相同，则更长的日志更新</p>
</li>
<li><p>日志记录的下标从1开始，为了方便访问和避免下标越界，每个服务器在启动时都会先包含一个空记录</p>
</li>
<li><p>实验提供的代码模板当中，日志记录包含下标字段。但下标可用切片的下标直接代替，目前实验暂不需要用到下标字段。考虑到后续实验有可能会用到，仍使用该字段而不是切片下标作为日志记录的下标</p>
</li>
<li><p>实验提供的代码模板当中的日志记录不包含任期字段，暂不清楚原因，实现中手动添加了该字段</p>
</li>
<li><p>实验提供的代码模板中未包含领导者应用状态机之后回复客户端的方式，未实现</p>
</li>
<li><p>所有服务器的规则2在每次处理RPC请求和收到RPC回复的时候均需要实现，容易遗漏</p>
</li>
<li><p>AppendEntries RPC的接收者实现步骤3、4可以合并为：删除prevLogIndex之后的所有记录，然后追加所有新记录。在后续持久化的实验当中可能需要再进行更改。步骤3的原意是prevLogIndex之后的记录与新记录可能存在部分匹配，暂未想到出现这种情况的场景。</p>
</li>
</ul>
<h1 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h1><h2 id="goroutine的使用"><a href="#goroutine的使用" class="headerlink" title="goroutine的使用"></a>goroutine的使用</h2><p>除了RPC和外部接口之外，系统的所有功能都通过goroutine实现。按照功能划分，这些goroutine可分为两种类型：监听型和触发型。</p>
<h3 id="监听型goroutine"><a href="#监听型goroutine" class="headerlink" title="监听型goroutine"></a>监听型goroutine</h3><p>Raft算法包含一些需要在后台不断监听，在符合条件时执行的操作，包括：</p>
<ul>
<li><p>候选者和参与者的选举超时</p>
</li>
<li><p>领导者的心跳发送</p>
</li>
<li><p>领导者的AppendEntries RPC发送</p>
</li>
<li><p>每个服务器日志记录的应用</p>
</li>
<li><p>领导者commitIndex变量的更新</p>
</li>
</ul>
<p>这些操作各自通过一个goroutine实现，在Make函数中创建，goroutine循环检查rf.killed()的值，为真时goroutine退出，否则，在一段时间间隔之后执行相应操作，在执行操作之前可能还需要检查动作触发条件是否满足，如服务器是否为某个状态。</p>
<h3 id="触发型goroutine"><a href="#触发型goroutine" class="headerlink" title="触发型goroutine"></a>触发型goroutine</h3><p>Raft算法中包含一些由动作触发的过程，包括：</p>
<ul>
<li>候选者规则1、2、3</li>
</ul>
<p>一般的函数调用是顺序执行的，调用者在函数返回前会阻塞。如果调用者是一个监听型goroutine，会导致系统暂时无法监听该功能。因此上述过程也需要通过goroutine实现，调用者与该goroutine进行通信，触发该功能运行，然后立即返回。</p>
<p>这种一个调用者触发一个或多个特定的被调用者执行的并行模型可以使用Go的<code>sync.Cond</code>包实现。数据结构定义如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">cond       *sync.Cond</span><br><span class="line">condLock   sync.Mutex</span><br><span class="line">wakeUpType <span class="keyword">int</span></span><br></pre></td></tr></table></figure>
<p>包含一个<code>sync.Cond</code>类，一个锁和一个条件变量。教程中提到这个锁可以是互斥锁或读写锁，但我查阅了<code>sync.Cond</code>的实现，发现<code>sync.Cond</code>类中关联的锁只实现了<code>Lock()</code>和<code>Unlock()</code>这两个方法，对应读写锁中的写锁操作，而无法执行读锁操作。因此我暂时还没搞明白如何搭配<code>sync.Cond</code>和读写锁。上述并行模型采用互斥锁即可实现，这个锁传入<code>NewCond()</code>方法与<code>Cond</code>类进行关联，可以单独定义，也可以使用<code>cond.L</code>字段。</p>
<p>初始化：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">rf.cond = sync.NewCond(&amp;rf.condLock)</span><br><span class="line">rf.wakeUpType = NONE</span><br></pre></td></tr></table></figure>
<p> 调用者实现：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> rf.state != LEADER &#123;</span><br><span class="line">    rf.condLock.Lock()</span><br><span class="line">    rf.wakeUpType = NEW_ELECTION</span><br><span class="line">    rf.condLock.Unlock()</span><br><span class="line">    rf.cond.Broadcast()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用者通过<code>cond.Broadcast()</code>方法唤醒所有被<code>cond</code>阻塞的goroutine，唤醒时无需锁的保护。</p>
<p>被调用者实现：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> rf.killed() == <span class="literal">false</span> &#123;</span><br><span class="line">    rf.condLock.Lock()</span><br><span class="line">    <span class="keyword">for</span> rf.wakeUpType != NEW_ELECTION &#123;</span><br><span class="line">        rf.cond.Wait()</span><br><span class="line">    &#125;</span><br><span class="line">    rf.wakeUpType = NONE</span><br><span class="line">    rf.condLock.Unlock()</span><br><span class="line"></span><br><span class="line">    [功能实现]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，<code>cond.Wait()</code>方法会释放锁，阻塞当前goroutine，直到被唤醒，被唤醒时会加锁，然后再次检查for循环的条件是否满足，如果满足，才跳出循环，释放锁，执行功能。此处的for循环是必要的，不能用if代替，<code>因为Broadcast()</code>方法会唤醒所有被<code>cond</code>阻塞的goroutine，但只有符合对应功能的goroutine需要被执行，其他goroutine需要再次阻塞。</p>
<h2 id="锁的使用"><a href="#锁的使用" class="headerlink" title="锁的使用"></a>锁的使用</h2><p>服务器的状态用一把互斥锁<code>rf.mu</code>保护。</p>
<p>锁的使用注意事项：</p>
<ul>
<li><p>对服务器状态的任何读写操作均需要锁保护</p>
</li>
<li><p>一个完整的过程需要全程用锁保护，以保证状态的一致性和过程的原子性。</p>
</li>
<li><p>RPC调用应当是一个非阻塞的过程，调用前应当解锁。调用后的服务器状态可能会发生变化（例如候选者发送选举请求后发现有其他任期更高的领导者而转变成参与者），应当在加锁之后检查服务器状态是否发生改变。</p>
</li>
</ul>
<h1 id="错误与调试"><a href="#错误与调试" class="headerlink" title="错误与调试"></a>错误与调试</h1><p>这个错误花了我比较长的时间debug，还伴随着其他错误：</p>
<blockquote>
<p>— FAIL: TestFailAgree2B (13.48s)<br> config.go:609: one(106) failed to reach agreement</p>
</blockquote>
<p>阅读调试信息后发现，“106”指令被重复多次地追加到参与者的日志当中，且一直没有被apply。判断为matchIndex的值错误导致commitIndex没有及时更新的问题。从而发现在AppendEntries RPC返回之后，nextIndex被错误地写成了加1，而不是加上AppendEntries RPC参数中log的长度，导致matchIndex的值错误。</p>
]]></content>
      <tags>
        <tag>Go</tag>
        <tag>分布式系统</tag>
      </tags>
  </entry>
  <entry>
    <title>6.824 lab2c, 2d</title>
    <url>/2022/11/11/6-824-lab2c-2d/</url>
    <content><![CDATA[<h1 id="Lab-2C"><a href="#Lab-2C" class="headerlink" title="Lab 2C"></a>Lab 2C</h1><p>实验2C要求实现Raft服务器currentTerm、votedFor和log三个状态的持久化，难度不高，只需要填充相应函数，并在<strong>每次回复RPC之前</strong>和<strong>这三个状态被修改之后</strong>调用持久化函数。</p>
<p>但实验2C的测试还是有可能因为2A、2B的实现不完善而发生错误。</p>
<a id="more"></a>

<p>我在测试时多次碰到该错误：</p>
<blockquote>
<p>— FAIL: TestFigure8Unreliable2C (41.85s)<br>config.go:609: one(5768) failed to reach agreement</p>
</blockquote>
<p>经过调试和查阅资料，发现了之前实验的两个错误实现：</p>
<ul>
<li>在AppendEntries RPC当中直接将prevLogIndex之后的所有条目截断。当领导者向参与者发送的AppendEntries请求过期，其中包含的日志条目是参与者日志条目的子集的时候，这种实现会导致参与者的一部分正确日志被舍弃。正确的实现方法是严格按照论文，只截断冲突的日志。</li>
<li>原实现中，领导者收到AppendEntries的成功响应之后会执行<code>nextIndex += len(args.Entries)</code>。然而领导者在发送RPC之前已经释放了互斥锁，其nextIndex有可能被修改。正确实现应该是<code>nextIndex = prevLogIndex + len(args.Entries) + 1</code>。</li>
</ul>
<p>此外，还进行了下列优化，顺利一次性通过了2A、2B、2C：</p>
<ul>
<li><p>TIME_STEP设为10ms，原实现与心跳超时相同。</p>
</li>
<li><p>选举超时设为[300, 450]ms，心跳超时设置为50ms。</p>
</li>
</ul>
<h1 id="Lab-2D"><a href="#Lab-2D" class="headerlink" title="Lab 2D"></a>Lab 2D</h1><p>实验2D要求实现快照功能。</p>
<p>实验官网的Hint给出了实现思路，按照思路，第一步是实现日志下标不从0开始存储。在我之前的实验中，日志下标以条目中的<code>CommandIndex</code>字段为准，故不需要做太多的修改。我原本的思路是在Raft状态中新增<code>lastIncludedIndex</code>和<code>lastIncludedTerm</code>两个字段，后来发现直接使用<code>rf.log[0].CommandIndex</code>和<code>rf.log[0].CommandTerm</code>来存储可以避免许多判断。</p>
<p>然而当我实现了第一步之后再去跑2C的测试时，发现总是会发生apply不一致或者不能reach agreement的错误，经过一番调试之后最终发现是<code>AppendEntries()</code>当中一个if的判断条件写错了，把<code>args.Entries</code>的长度写成了<code>rf.log</code>的长度。。。。。。。。。修改此bug后，顺利通过10次2C测试。</p>
<p>在跑2D的测试时发现另外的问题：当需要snapshot的时候，applyCh会阻塞，导致整个applyLogs线程阻塞。而由于applyLogs线程持有了互斥锁，因此整个服务器都会阻塞。解决方法是使用select语句：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> rf.applyCh &lt;- log:</span><br><span class="line">    DPrintf(<span class="string">&quot;%v: applying log success, lastApplied==%v\n&quot;</span>, rf.me, rf.lastApplied)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    DPrintf(<span class="string">&quot;%v: applying log fail due to block, lastApplied==%v\n&quot;</span>, rf.me, rf.lastApplied)</span><br><span class="line">    rf.lastApplied--</span><br><span class="line">    <span class="keyword">goto</span> applyLogsLoopExit</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当case中的写通道指令被阻塞时，select会转而执行default分支。需要注意不能在default分支中写break来退出外层循环，break的作用范围仅限于select，应该使用goto。</p>
<hr>
<p>实现日志的部分存储之后就可以着手开始实现Snapshot函数和InstallSnapshot RPC。实现前，要先理解Snapshot的指令和数据流向：上层应用在不需要前一部分的日志时，会调用Raft的<code>Snapshot</code>方法，其<code>snapshot</code>参数是上层应用已经创建好的快照。<code>Snapshot</code>方法需要做的是：截断日志，然后将快照<code>snapshot</code>持久化到持久性存储当中。当领导者发现某个参与者的<code>nextIndex</code>小于等于当前的<code>lastIncludedIndex</code>时，需要发送InstallSnapshot RPC，此时通过<code>Persister.ReadSnapshot</code>方法可从持久化存储中读取快照进行发送。</p>
<p>由config.go第247行还可以知道：<code>snapshot</code>字节数组使用labgob包编解码，首先包含<code>lastIncludedIndex</code>数值，然后顺序包含<code>lastIncludedIndex</code>及之前的所有日志条目。</p>
<hr>
<p>Snapshot的函数调用关系比较难理解，需要参考<a href="https://pdos.csail.mit.edu/6.824/notes/raft_diagram.pdf">Raft Diagram</a>。</p>
<img src="raft_diagram_1.png">

<ul>
<li><p>Service为使用Raft Code作为其一致性协议的上层应用，可以是K/V数据库等。</p>
</li>
<li><p>为了避免在Raft Code的内存中保留过长的日志条目，Service会定期将已经apply的一部分日志转换为snapshot。<strong>Snapshot的创建仅由Service执行。</strong>当Snapshot被创建之后，Service会调用<code>Snapshot()</code>方法通知Raft Code对其内存中的日志条目进行截断，方法的参数为已经创建的snapshot字节切片，以及<code>lastIncludedIndex</code>。</p>
</li>
<li><p>Raft Code接收到Service的<code>Snapshot()</code>请求之后，对其日志中下标为<code>lastIncludedIndex</code>及之前的条目截断，<strong>并将snapshot保存到内存当中，用于可能的InstallSnapshot RPC</strong>。当Raft Code接收到snapshot后，需要立即将其持久化。</p>
</li>
<li><p>Raft Code崩溃重启时，Service会调用<code>ReadSnapshot()</code>方法读取已经保存的snapshot，<strong>并进行apply，Raft Code无需再apply这部分状态</strong>。<strong>然而，为了用于可能的InstallSnapshot RPC，Raft Code也需要立即调用<code>ReadSnapshot()</code>方法将snapshot保存到内存中，注意这个调用关系在Raft Diagram当中没有体现</strong>。</p>
</li>
<li><p>如果领导者的<code>nextIndex[i]</code>小于等于<code>lastIncludedIndex</code>，说明此时节点i由于某种原因严重落后，需要领导者的snapshot中的日志条目。领导者发送<code>InstallSnapshot RPC</code>给节点i。</p>
</li>
<li><p>节点i收到<code>InstallSnapshot RPC</code>请求后，<strong>将snapshot通过applyCh应用到Service的状态机上</strong>。然后，Service会调用<code>CondInstallSnapshot()</code>告知Raft Code其已经将刚刚传入的snapshot应用，该方法为旧版6.824实验中的冗余要求，直接返回<code>true</code>即可。</p>
</li>
</ul>
<hr>
<p>在熟悉以上架构的基础上就可以很容易地写出代码。同样的，创建一个后台goroutine，重复检查领导者的<code>nextIndex</code>数组，当发现<code>nextIndex[i]&lt;=lastIncludedIndex</code>的时候开始发送<code>InstallSnapshot RPC</code>。</p>
<p>可能会出错的地方有：</p>
<ul>
<li><p>每次调用<code>rf.persister.SaveStateAndSnapshot()</code>方法的时候都必须传入当前内存中的snapshot，不能在不需要更新snapshot的时候传入nil，否则会覆盖持久化存储当中的snapshot。</p>
</li>
<li><p>当使用<code>labgob</code>包对snapshot进行解码之后，由于snapshot当中可能包含当前解码位置的指针，snapshot的二进制内容会发生变化。<code>InstallSnapshot RPC</code>接收者实现的第5个步骤需要用到snapshot的<code>lastIncludedIndex</code>，此时不能通过解码snapshot的方式读取该值，而必须使用<code>args.LastIncludedIndex</code>，否则会出错。</p>
</li>
<li><p>在<code>InstallSnapshot RPC</code>中，persist的时机很重要。必须保证在snapshot和rf.log[0]（即lastIncluded信息）同时更改之后才能persist，不能只更新了某个值就persist。</p>
</li>
<li><p>在领导者发送snapshot的不同chunk的过程中，必须保证参数中的<code>Term</code>、<code>LastIncludeIndex</code>和<code>LastIncludedTerm</code>保持不变，即使领导者的状态已经发生了改变。即要把这几个变量提出循环外。在发送snapshot的多个chunk的过程中，领导者的snapshot可能会发生追加，我目前采用的策略是继续发送原有的snapshot。猜测更好的策略应当是丢弃原有的snapshot，重新发送新的snapshot，以节省网络带宽。这一点留待后续优化。</p>
</li>
</ul>
<hr>
<h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>6.824的lab2到这里就告一段落了，总算是完整地实现了Raft算法，还蛮有成就感的。在完成这四个小实验的过程中，我也能明显地感觉到自己在代码调试能力和写作能力这两个方面的提升。代码调试上，面对密密麻麻，动辄几个GB的调试信息，我不再有畏难心理了。我学会了在代码恰当的地方输出结构化的调试信息，在调试信息中寻找关键点，进行调试。可以说，我离”松弛感“又更进一步了。在写作能力上，从lab2a到lab2d，我也在逐渐摆脱”报告文学“。总而言之，6.824陪伴我度过了一段快乐的时光。</p>
]]></content>
      <tags>
        <tag>Go</tag>
        <tag>分布式系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Paxos算法笔记</title>
    <url>/2023/01/12/Paxos%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Basic-Paxos"><a href="#Basic-Paxos" class="headerlink" title="Basic Paxos"></a>Basic Paxos</h1><p>Basic Paxos工作流程如下：</p>
<a id="more"></a>

<img src="basic_paxos.jpg">

<h1 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h1><h2 id="为什么Paxos使用两阶段协议？"><a href="#为什么Paxos使用两阶段协议？" class="headerlink" title="为什么Paxos使用两阶段协议？"></a>为什么Paxos使用两阶段协议？</h2><p>单阶段协议，无论是Accepter只接受第一个值或接受所有的值，都有可能会造成split vote或者多个值同时被chosen。</p>
<p>split vote的情况：</p>
<img title="" src="split-vote.png" alt="">

<p>多个值被chosen的情况：</p>
<img title="" src="multi-chosen.png" alt="">

<h2 id="提案的值从何而来？"><a href="#提案的值从何而来？" class="headerlink" title="提案的值从何而来？"></a>提案的值从何而来？</h2><p>case 1：Accepter返回PROMISE(n)之前已经accept过其他的提案，由于Paxos协议只允许对唯一一个value达成一致，因此即使这个PROMISE的序列号更高，其value也只能是之前accept过的value。</p>
<p>case 2：Accepter返回PROMISE(n)的时候还没有accpet过任何值，返回的PROMISE不带值，此时Proposal将客户端所请求的值放入ACCEPT请求当中。</p>
]]></content>
      <tags>
        <tag>分布式系统</tag>
      </tags>
  </entry>
  <entry>
    <title>6.824 lab3a</title>
    <url>/2023/01/15/6-824-lab3a/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><p><a href="https://zhuanlan.zhihu.com/p/267685488">MIT 6.824 Lab3 翻译（Key/Value Server Base on Raft） - 知乎 (zhihu.com)</a></p>
<h1 id="实现踩坑过程"><a href="#实现踩坑过程" class="headerlink" title="实现踩坑过程"></a>实现踩坑过程</h1><p>首先按照自己的思路进行了基本实现，踩了许多坑。</p>
<a id="more"></a>

<p>错误1：</p>
<blockquote>
<p>Test: one client (3A)</p>
<p>2022/12/06 17:12:56 2 server: Get RPC opf.opIndex==3 but args.OpIndex==5</p>
</blockquote>
<p>原因：对于opIndex == maxOpIndex的情况，这条指令也已经在raft层中Start一次commit了，也需要读取applyCh，而我忘记了。</p>
<p>错误2：</p>
<blockquote>
<p>Test: progress in majority (3A)</p>
<p>2022/12/06 18:22:20 2 server: Get RPC opf.opIndex==1 but args.OpIndex==2, opf=={1 Put 1 14}</p>
</blockquote>
<p>发现我忘了一件事情：就算不是leader，也要apply来自raft的日志（已实现，用一个goroutine来定期apply）</p>
<p>错误3：</p>
<blockquote>
<p>— FAIL: TestUnreliable3A (5.24s)<br> test_test.go:293: get wrong value, key 3, wanted:<br> x 3 0 yx 3 1 yx 3 2 yx 3 3 yx 3 4 yx 3 5 yx 3 6 yx 3 7 y<br> , got<br> x 3 0 yx 3 1 yx 3 2 yx 3 3 yx 3 4 yx 3 5 yx 3 6 yx 3 6 yx 3 7 y<br> test_test.go:293: get wrong value, key 1, wanted:<br> x 1 0 yx 1 1 yx 1 2 yx 1 3 yx 1 4 yx 1 5 yx 1 6 yx 1 7 yx 1 8 yx 1 9 yx 1 10 y<br> , got<br> x 1 0 yx 1 1 yx 1 2 yx 1 3 yx 1 4 yx 1 5 yx 1 6 yx 1 7 yx 1 8 yx 1 8 yx 1 9 yx 1 9 yx 1 10 y<br> test_test.go:126: failure<br> test_test.go:148: duplicate element x 1 8 y in Append result</p>
</blockquote>
<p>当网络不稳定时，有一些指令被重复执行了。发现在server的RPC处理当中，我应该把判断OpIndex的逻辑写到Start前面，不然由于applyCh是单独的goroutine读取，在Start之后还是会重复执行提交但未回复的指令。</p>
<p>错误4：</p>
<blockquote>
<p>Test: completion after heal (3A) …</p>
<p>— FAIL: TestOnePartition3A (6.21s)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test_test.go:539: Put did not complete</span><br></pre></td></tr></table></figure>
<p>发现没有实现超时机制。设计了一个map，保存每个client对应的已applied的opf，由RPC handler尝试读取，直至超时。实现超时后仍通不过，调试发现kv.maxOpIndexs应该写在applyLogs()协程里面。修改后通过该测试样例及之前的所有样例。</p>
</blockquote>
<p>错误5：</p>
<blockquote>
<p>— FAIL: TestManyPartitionsOneClient3A (14.86s)<br> test_test.go:293: get wrong value, key 0, wanted:<br> x 0 0 yx 0 1 yx 0 2 yx 0 3 yx 0 4 yx 0 5 yx 0 6 yx 0 7 yx 0 8 yx 0 9 yx 0 10 yx 0 11 yx 0 12 yx 0 13 yx 0 14 yx 0 15 yx 0 16 yx 0 17 yx 0 18 yx 0 19 yx 0 20 yx 0 21 yx 0 22 yx 0 23 yx 0 24 yx 0 25 y<br> , got<br> x 0 0 yx 0 1 yx 0 2 yx 0 3 yx 0 4 yx 0 5 yx 0 6 yx 0 7 yx 0 8 yx 0 9 yx 0 10 yx 0 11 yx 0 12 yx 0 13 yx 0 14 yx 0 15 yx 0 16 yx 0 17 yx 0 18 yx 0 19 yx 0 20 yx 0 21 yx 0 22 yx 0 23 yx 0 24 yx 0 25 yx 0 25 y<br> test_test.go:126: failure<br> test_test.go:148: duplicate element x 0 25 y in Append result</p>
</blockquote>
<p>在Partition测试中又出现重复写入。在applyLogs中去重后又发现：client让某个partition A apply了一个操作，当这个partition A和另一个partition B合并时，领导者变成了partition B的成员，但partition A的maxOpIndex更新，导致partition A无法执行新命令。</p>
<p>发现applyLogs的sleep应该删掉，否则apply太慢了。但是错误仍未解决。</p>
<p>继续跟踪Raft发现，旧leader向大多数节点append一个指令对应的日志成功后，在本地状态机进行了commit，并进行了apply，使得K/V层的指令执行成功。但commit之后还来不及通过心跳或appendEntries让其他节点接收到leaderCommit，就变更领导者了，由于新领导者认为这个命令还未apply，所以无法执行后续指令。这应该就是实验指南和论文中提到的领导者变更问题。为了确保我的Raft实现没问题，用网上的lab3代码跑了一下3A，确定能够通过测试，从而将问题焦点落在server的实现上。</p>
<p>将代码进行了进一步检查和修改，又倒腾了一下午debug，终于通过所有算例。完整实现思路以下一章为准。</p>
<h1 id="完整设计思路"><a href="#完整设计思路" class="headerlink" title="完整设计思路"></a>完整设计思路</h1><h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><p>Client向任意服务器发送请求，请求失败则换服务器重试，直到请求成功为止。每个Client以创建时的时间戳作为其ID，请求序号从1递增。</p>
<h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><p>server数据结构：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> KVServer <span class="keyword">struct</span> &#123;</span><br><span class="line">    mu      sync.Mutex</span><br><span class="line">    me      <span class="keyword">int</span></span><br><span class="line">    rf      *raft.Raft</span><br><span class="line">    applyCh <span class="keyword">chan</span> raft.ApplyMsg</span><br><span class="line">    dead    <span class="keyword">int32</span> <span class="comment">// set by Kill()</span></span><br><span class="line"></span><br><span class="line">    maxraftstate <span class="keyword">int</span> <span class="comment">// snapshot if log grows this big</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Your definitions here.</span></span><br><span class="line">    table <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span> <span class="comment">// the database</span></span><br><span class="line">    <span class="comment">// appliedLogs   string // for test</span></span><br><span class="line">    maxOpIndexs   <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span> <span class="comment">// the latest operation that server has applied for each client</span></span><br><span class="line">    clientApplied <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">chan</span> OpFields</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>table为存储K/V对的哈希表，maxOpIndexs保存每个客户端已经applied的最大请求编号，clientApplied用于在server成功apply一个请求的时候通知Get/PutAppend handler。</p>
<p>用于apply从Raft端提交的日志的go routine如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(kv *KVServer)</span> <span class="title">applyLogs</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> kv.killed() == <span class="literal">false</span> &#123;</span><br><span class="line">        applyMsg := &lt;-kv.applyCh</span><br><span class="line"></span><br><span class="line">        op, ok := applyMsg.Command.(Op)</span><br><span class="line">        <span class="keyword">if</span> !ok &#123;</span><br><span class="line">            log.Fatal(errors.New(<span class="string">&quot;applyMsg type error&quot;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        opf := op.DecodeOp()</span><br><span class="line"></span><br><span class="line">        DPrintf(<span class="string">&quot;%v server: applyCh receive logIdx: %v, OpIndex: %v, Key: %v, value: %v, ClientId: %v\n&quot;</span>, kv.me, applyMsg.CommandIndex, opf.opIndex, opf.key, opf.value, opf.ckId)</span><br><span class="line">        kv.mu.Lock()</span><br><span class="line">        <span class="keyword">if</span> opf.opIndex &gt; kv.maxOpIndexs[opf.ckId] &#123;</span><br><span class="line">            kv.OperatePutAppend(opf)</span><br><span class="line">            kv.maxOpIndexs[opf.ckId] = opf.opIndex</span><br><span class="line">        &#125;</span><br><span class="line">        kv.mu.Unlock()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> kv.clientApplied[opf.ckId] &lt;- opf:</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当Raft提交上来的日志编号大于当前应用的最大编号时，server才将其执行，以避免重复。然后，server借助kv.clientApplied中的channel告知Get/PutAppend Handler请求已被提交。</p>
<p>这里的一个问题是为什么满足<code>opf.opIndex &gt; kv.maxOpIndexs[opf.ckId]</code>的请求就可以执行，而不需要<code>opf.opIndex == kv.maxOpIndexs[opf.ckId]+1</code>。这是我之前调试时一直犯的错误。我举个例子，假设当前对于某个客户端，MaxOpIndex为1，而opf.opIndex为3，那么此时有可能2还没有执行完，正在处于重试阶段，而用户就又输入了第三条指令。因此上述语句只需要保证不重复执行就行，而无需按照OpIndex顺序执行。</p>
<p>Get/PutAppend Handler执行过程如下：</p>
<ol>
<li><p>调用Start</p>
</li>
<li><p>通过Start的返回值判断是否为leader，若不为leader直接返回</p>
</li>
<li><p>判断是否<code>args.OpIndex == kv.maxOpIndexs[args.ClientId]</code>，若满足，则是论文中所提到的这条指令已经应用但未回复客户端的情况。此时直接回复即可。</p>
</li>
<li><p>在clientApplied中创建一个channel用于唤醒</p>
</li>
<li><p>使用select语句从channel中读取。若在规定时间内读取成功，需满足<code>opf.opIndex &gt;= args.OpIndex</code>才能回复成功；若读取超时，则回复Wrong Leader。</p>
</li>
<li><p>删除这个channel</p>
</li>
</ol>
<h2 id="关于加锁"><a href="#关于加锁" class="headerlink" title="关于加锁"></a>关于加锁</h2><p>Client中的锁只作用与序列号，而没有作用于整个过程。这代表一个指令执行过程中，还可以交叉执行其他指令。指令最终在K/V数据库中作用的顺序以指令开始被请求的顺序，即加锁确定序列号的前后顺序为准。</p>
<p>Server同理。</p>
]]></content>
      <tags>
        <tag>Go</tag>
        <tag>分布式系统</tag>
      </tags>
  </entry>
  <entry>
    <title>6.824 lab3b</title>
    <url>/2023/01/25/6-824-lab3b/</url>
    <content><![CDATA[<h1 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h1><h4 id="实验3b需要解决的问题："><a href="#实验3b需要解决的问题：" class="headerlink" title="实验3b需要解决的问题："></a>实验3b需要解决的问题：</h4><h5 id="如何判断snapshot的时机？"><a href="#如何判断snapshot的时机？" class="headerlink" title="如何判断snapshot的时机？"></a>如何判断snapshot的时机？</h5><a id="more"></a>

<p><code>persister.RaftStateSize()</code>返回已经持久化的raft日志（连同若干个需要持久化的变量）的大小。server持续调用该函数，当返回值等于<code>maxraftstate</code>的时候进行snapshot。需要处理<code>maxraftstate==-1</code>的情况。snapshot时还需要传入snapshot对应的最后一条raft日志的下标，需要多维护一个变量。</p>
<h5 id="snapshot包含什么？"><a href="#snapshot包含什么？" class="headerlink" title="snapshot包含什么？"></a>snapshot包含什么？</h5><p>snapshot包含KV数据库的底层map和一些用于维护一致性的变量。当服务器重启时，<code>Persister</code>中保存的snapshot直接复制到server层即可。</p>
<h5 id="maxraftstate是否需要持久化到Persister当中？"><a href="#maxraftstate是否需要持久化到Persister当中？" class="headerlink" title="maxraftstate是否需要持久化到Persister当中？"></a><code>maxraftstate</code>是否需要持久化到<code>Persister</code>当中？</h5><p>不需要，因为<code>maxraftstate</code>是<code>StartKVServer()</code>的参数，在启动server时被传入。</p>
<h5 id="当server从applyCh中读到snapshot时应该执行什么操作？"><a href="#当server从applyCh中读到snapshot时应该执行什么操作？" class="headerlink" title="当server从applyCh中读到snapshot时应该执行什么操作？"></a>当server从<code>applyCh</code>中读到snapshot时应该执行什么操作？</h5><p>直接覆盖原有database即可。</p>
<h5 id="如何保证指令的去重？"><a href="#如何保证指令的去重？" class="headerlink" title="如何保证指令的去重？"></a>如何保证指令的去重？</h5><p>将<code>maxOpIndexs</code>保存到snapshot当中，进行持久化。</p>
<h4 id="实验3b的一些注意事项："><a href="#实验3b的一些注意事项：" class="headerlink" title="实验3b的一些注意事项："></a>实验3b的一些注意事项：</h4><ul>
<li>snapshot中保存的字段首字母大写</li>
</ul>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>lab1-lab3完整实现代码：<a href="https://github.com/Starman-SWA/6.824">Starman-SWA/6.824 (github.com)</a></p>
]]></content>
      <tags>
        <tag>Go</tag>
        <tag>分布式系统</tag>
      </tags>
  </entry>
  <entry>
    <title>easy_note源码阅读</title>
    <url>/2023/02/01/easy-note%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>easy_note为一个hertz+kitex+gorm样例项目。</p>
<a id="more"></a>

<ul>
<li>项目地址：<a href="https://github.com/cloudwego/biz-demo/tree/main/easy_note">biz-demo/easy_note at main · cloudwego/biz-demo (github.com)</a></li>
</ul>
<h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><p>Kitex官方文档：<a href="https://www.cloudwego.io/zh/docs/kitex/">Kitex | CloudWeGo</a></p>
<p>Hertz官方文档：<a href="https://www.cloudwego.io/zh/docs/hertz/">Hertz | CloudWeGo</a></p>
<p>Hertz with thrift样例项目：<a href="https://github.com/cloudwego/hertz-examples/tree/main/hz/thrift">hertz-examples/hz/thrift at main · cloudwego/hertz-examples (github.com)</a></p>
<p>Gorm官方文档：<a href="https://gorm.io/zh_CN/docs/index.html">GORM 指南 | GORM - The fantastic ORM library for Golang, aims to be developer friendly.</a></p>
<h1 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h1><img src="https://github.com/cloudwego/biz-demo/raw/main/easy_note/images/easy-note-arch.png" alt="easy-note-arch" style="zoom: 12%;" />

<p>easy_note包含三个服务：</p>
<ul>
<li>note：提供笔记的curd服务</li>
<li>user：提供用户的注册和登录服务</li>
<li>api：与上述两个服务通信，对客户端提供http访问服务</li>
</ul>
<h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><img src="image-20230131174056377.png" alt="image-20230131174056377" style="zoom: 40%;" />

<ul>
<li>cmd：三个服务的实现</li>
<li>idl：定义服务间的通信内容</li>
<li>kitex_gen：kitex自动生成的服务间通信代码</li>
<li>pkg：定义一些常量和配置信息</li>
</ul>
<h2 id="note服务"><a href="#note服务" class="headerlink" title="note服务"></a>note服务</h2><img src="image-20230131174913598.png" alt="image-20230131174913598" style="zoom:40%;" />

<h3 id="dal"><a href="#dal" class="headerlink" title="dal"></a>dal</h3><img src="image-20230131175755275.png" alt="image-20230131175755275" style="zoom:40%;" />

<p>dal文件夹包含数据库处理函数。其中的<code>db/init.go</code>初始化gorm连接，<code>db/note.go</code>定义了用gorm进行数据库操作的几个函数，包含笔记的crud。外层的<code>dal/init.go</code>进行了简单封装。总而言之，dal包中基于gorm封装了note表的crud操作函数，也包含gorm的初始化函数。</p>
<img src="image-20230131181136663.png" alt="image-20230131181136663" style="zoom:40%;" />

<p>上图为gorm的模型定义。gorm使用结构体名的蛇形复数作为<strong>表名</strong>，字段名的蛇形作为列名，结构体还需要包含一个<code>gorm.Model</code>，其中包含主键和修改时间信息。</p>
<img src="image-20230131181519243.png" alt="image-20230131181519243" style="zoom:40%;" />

<p>因此，gorm使用结构体的名称和字段来确定要操作的表，不需要显式的建表操作。</p>
<h3 id="kitex的代码构建流程"><a href="#kitex的代码构建流程" class="headerlink" title="kitex的代码构建流程"></a>kitex的代码构建流程</h3><p>在阅读note服务的kitex代码之前，先了解kitex的代码构建流程。</p>
<h4 id="第一步：编写IDL文件"><a href="#第一步：编写IDL文件" class="headerlink" title="第一步：编写IDL文件"></a>第一步：编写IDL文件</h4><ul>
<li><p>创建IDL文件，编写接口和服务。</p>
</li>
<li><p>使用kitex生成项目代码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kitex -module $(go module名) -service $(服务名) $(IDL文件名)</span></span><br></pre></td></tr></table></figure>
<p>生成如下所示的代码结构：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── build.sh</span><br><span class="line">├── echo.thrift</span><br><span class="line">├── go.mod</span><br><span class="line">├── handler.go</span><br><span class="line">├── kitex.yaml</span><br><span class="line">├── kitex_gen</span><br><span class="line">│   └── api</span><br><span class="line">│       ├── echo</span><br><span class="line">│       │   ├── client.go</span><br><span class="line">│       │   ├── echo.go</span><br><span class="line">│       │   ├── invoker.go</span><br><span class="line">│       │   └── server.go</span><br><span class="line">│       ├── echo.go</span><br><span class="line">│       ├── k-consts.go</span><br><span class="line">│       └── k-echo.go</span><br><span class="line">├── main.go</span><br><span class="line">└── script</span><br><span class="line">    └── bootstrap.sh</span><br></pre></td></tr></table></figure>
<ul>
<li><code>build.sh</code>是编译脚本</li>
<li><code>handler.go</code>是编写服务处理的地方，kitex生成了服务处理函数的框架，供开发者填写</li>
<li><code>kitex_gen</code>是kitex生成的代码，不需要修改</li>
<li><code>main.go</code>是主函数，可根据具体业务来自定义初始化逻辑，如将服务注册到etcd服务发现中心</li>
<li><code>script/boostrap.sh</code>是启动服务的脚本，在编译后的<code>output</code>文件夹也会生成完全相同的一份</li>
</ul>
</li>
</ul>
<h4 id="第二步：编写服务逻辑"><a href="#第二步：编写服务逻辑" class="headerlink" title="第二步：编写服务逻辑"></a>第二步：编写服务逻辑</h4><ul>
<li><p>在<code>handler.go</code>中填入函数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// EchoImpl implements the last service interface defined in the IDL.</span></span><br><span class="line"><span class="keyword">type</span> EchoImpl <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Echo implements the EchoImpl interface.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *EchoImpl)</span> <span class="title">Echo</span><span class="params">(ctx context.Context, req *api.Request)</span> <span class="params">(resp *api.Response, err error)</span></span> &#123;</span><br><span class="line">	<span class="comment">// <span class="doctag">TODO:</span> Your code here...</span></span><br><span class="line">	<span class="keyword">return</span> &amp;api.Response&#123;Message: req.Message&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>服务端需要其他变量时，应该可以在EchoImpl结构体中定义。</p>
</li>
</ul>
<h4 id="第三步：服务端编译运行"><a href="#第三步：服务端编译运行" class="headerlink" title="第三步：服务端编译运行"></a>第三步：服务端编译运行</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sh build.sh // 编译</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sh output/bootstrap.sh // 运行</span></span><br></pre></td></tr></table></figure>
<h4 id="第四步：编写客户端"><a href="#第四步：编写客户端" class="headerlink" title="第四步：编写客户端"></a>第四步：编写客户端</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/cloudwego/kitex/client&quot;</span></span><br><span class="line">	<span class="string">&quot;kitex-learn/kitex_gen/api&quot;</span></span><br><span class="line">	<span class="string">&quot;kitex-learn/kitex_gen/api/echo&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	c, err := echo.NewClient(<span class="string">&quot;kitex-learn&quot;</span>, client.WithHostPorts(<span class="string">&quot;0.0.0.0:8888&quot;</span>))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	req := &amp;api.Request&#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		req.Message = time.Now().String()</span><br><span class="line">		resp, err := c.Echo(context.Background(), req)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			log.Fatal(err)</span><br><span class="line">		&#125;</span><br><span class="line">		log.Println(resp)</span><br><span class="line">		time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>echo.NewClient</code>的<code>echo</code>是包名，<code>&quot;kitex-learn&quot;</code>为使用kitex生成代码时传入的服务名。</li>
<li><code>c.Echo</code>的<code>Echo</code>才是服务名，表示调用客户端实例<code>c</code>的<code>Echo</code>服务。</li>
</ul>
<h3 id="note的kitex代码"><a href="#note的kitex代码" class="headerlink" title="note的kitex代码"></a>note的kitex代码</h3><ul>
<li>主目录的<code>idl/note.thrift</code>定义了note的服务接口。服务名为NoteService，包含5个服务：创建、删除、更新、查询、批量获取。</li>
</ul>
<h4 id="main-go"><a href="#main-go" class="headerlink" title="main.go"></a>main.go</h4><p><code>main.go</code>的逻辑与示例代码略有不同，最大的区别是<strong>使用了etcd作为服务发现中心</strong>。在微服务应用中，运行的服务实例集会动态变更。实例有动态分配的网络位置。因此，为了让客户端向服务发出请求，它必须使用服务发现机制。<a href="http://microservices.io/patterns/service-registry.html">服务发现</a>的关键部分是服务注册中心。服务注册中心是一个可用服务实例的数据库。<strong>etcd是一个分布式K/V数据库，本项目使用etcd作为服务发现中心。</strong></p>
<p><code>main</code>函数执行的任务：</p>
<ul>
<li>在etcd服务发现中心注册note服务</li>
<li>用gorm初始化数据库连接</li>
<li>使用etcd服务发现解析user服务，创建了一个访问user服务的客户端，用于拉取用户列表</li>
<li>启动一个OpenTelemetry性能监视工具实例，用于监测note服务性能</li>
<li>启动note服务</li>
</ul>
<h4 id="handler-go"><a href="#handler-go" class="headerlink" title="handler.go"></a>handler.go</h4><p><code>handler.go</code>中每个功能的实现都大同小异，以查询功能<code>QueryNote</code>为例进行解析。</p>
<p>首先是验证<code>req</code>的数据的有效性：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> err = req.IsValid(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">	resp.BaseResp = pack.BuildBaseResp(errno.ParamErr)</span><br><span class="line">	<span class="keyword">return</span> resp, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里用到的是thriftgo的一个插件：validator。当thrift文件定义了每个接口变量的数据范围时，validator插件会在<code>kitex_gen</code>文件夹中生成验证数据正确性的相应代码。</p>
<blockquote>
<p>validator文档：<a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/code-gen/validator/">Thrift Validator | CloudWeGo</a></p>
</blockquote>
<p>在进行数据处理后，调用<code>service</code>文件夹中的对应函数进行具体处理：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">notes, total, err := service.NewQueryNoteService(ctx).QueryNoteService(req)</span><br></pre></td></tr></table></figure>
<p>具体处理函数一方面用到了gorm接口操作数据库，另一方面用到了rpc文件夹中创建的客户端，连接到user服务，从user服务读取用户列表：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">noteModels, total, err := db.QueryNote(s.ctx, req.UserId, req.SearchKey, <span class="keyword">int</span>(req.Limit), <span class="keyword">int</span>(req.Offset)) <span class="comment">// 使用gorm</span></span><br><span class="line">...</span><br><span class="line">userMap, err := rpc.MGetUser(s.ctx, &amp;demouser.MGetUserRequest&#123;UserIds: []<span class="keyword">int64</span>&#123;req.UserId&#125;&#125;) <span class="comment">// 使用rpc访问user服务</span></span><br></pre></td></tr></table></figure>
<p>处理完成后，使用<code>pack</code>文件夹中定义的返回类型或<code>Note</code>类型构造返回值：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	resp.BaseResp = pack.BuildBaseResp(err)</span><br><span class="line">	<span class="keyword">return</span> resp, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结一下每个文件夹的作用：</p>
<ul>
<li>service文件夹定义每个服务的具体处理逻辑</li>
<li>rpc文件夹定义访问user服务拉取用户列表的逻辑</li>
<li>pack文件夹定义服务的返回值</li>
</ul>
<p><code>handler.go</code>还涉及到一个内容：函数参数中的<code>ctx context.Context</code>变量。<code>context.Context</code>是Go标准库中定义的一个接口类型，从1.7版本中开始引入。其主要作用是<strong>在一次请求经过的所有协程或函数间传递取消信号及共享数据</strong>，<strong>以达到父协程对子协程的管理和控制的目的</strong>。需要注意的是<code>context.Context</code>的作用范围是一次请求的生命周期，即随着请求的产生而产生，随着本次请求的结束而结束。</p>
<h2 id="api服务"><a href="#api服务" class="headerlink" title="api服务"></a>api服务</h2><img src="image-20230131174545530.png" alt="image-20230131174545530" style="zoom:40%;" />

<h3 id="hertz-with-thrift的代码构建流程"><a href="#hertz-with-thrift的代码构建流程" class="headerlink" title="hertz with thrift的代码构建流程"></a>hertz with thrift的代码构建流程</h3><h4 id="第一步：创建thrift-IDL"><a href="#第一步：创建thrift-IDL" class="headerlink" title="第一步：创建thrift IDL"></a>第一步：创建thrift IDL</h4><ul>
<li>IDL中指定请求的类型和URL</li>
</ul>
<h5 id="URL语法"><a href="#URL语法" class="headerlink" title="URL语法"></a>URL语法</h5><p>先了解URL的通用语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;scheme&gt;:&#x2F;&#x2F;&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;&#x2F;&lt;path&gt;;&lt;params&gt;?&lt;query&gt;#&lt;frag&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>scheme: 协议，常见的有 http（80），https（443），mailto，ftp（21），rtsp，rtspu，file。</p>
</li>
<li><p>user：用户名。</p>
</li>
<li><p>password： 密码。</p>
</li>
<li><p>host：主机。</p>
</li>
<li><p>port： 端口。</p>
</li>
<li><p>params: 参数。通常为 <code>key=value</code>。</p>
</li>
<li><p>query：查询参数或查询字符串。</p>
</li>
<li><p>frag: 片段（在浏览器中会被解析为 <code>window.location.hash</code>）。</p>
</li>
</ul>
<p>IDL如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">namespace go hello.example</span><br><span class="line"></span><br><span class="line">struct HelloReq &#123;</span><br><span class="line">1: string Name (api.query&#x3D;&quot;name&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct HelloResp &#123;</span><br><span class="line">1: string RespBody;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">service HelloService &#123;</span><br><span class="line">HelloResp HelloMethod(1: HelloReq request) (api.get&#x3D;&quot;&#x2F;hello&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>HelloMethod</code>服务以路径为<code>/hello</code>的GET方法提供访问，请求中的<code>Name</code>变量被赋值为URL的query当中的<code>name</code>字段，例如：<code>curl --location --request GET &#39;http://127.0.0.1:8888/hello?name=tom&#39;</code>是一个GET请求，其中问号后面的部分为query，name字段的值为tom。</p>
<h4 id="第二步：创建hertz项目"><a href="#第二步：创建hertz项目" class="headerlink" title="第二步：创建hertz项目"></a>第二步：创建hertz项目</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GOPATH 下执行</span></span><br><span class="line">hz <span class="built_in">new</span> -idl idl/hello.thrift</span><br><span class="line"></span><br><span class="line"><span class="comment">// 整理 &amp; 拉取依赖</span></span><br><span class="line"><span class="keyword">go</span> mod tidy</span><br></pre></td></tr></table></figure>
<p>生成的文件目录如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── biz</span><br><span class="line">│   ├── handler</span><br><span class="line">│   │   ├── hello</span><br><span class="line">│   │   │   └── example</span><br><span class="line">│   │   │       └── hello_service.go</span><br><span class="line">│   │   └── ping.go</span><br><span class="line">│   ├── model</span><br><span class="line">│   │   └── hello</span><br><span class="line">│   │       └── example</span><br><span class="line">│   │           └── hello.go</span><br><span class="line">│   └── router</span><br><span class="line">│       ├── hello</span><br><span class="line">│       │   └── example</span><br><span class="line">│       │       ├── hello.go</span><br><span class="line">│       │       └── middleware.go</span><br><span class="line">│       └── register.go</span><br><span class="line">├── go.mod</span><br><span class="line">├── idl</span><br><span class="line">│   └── hello.thrift</span><br><span class="line">├── main.go</span><br><span class="line">├── router.go</span><br><span class="line">└── router_gen.go</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="第三步：修改handler"><a href="#第三步：修改handler" class="headerlink" title="第三步：修改handler"></a>第三步：修改handler</h4><ul>
<li><code>handler</code>文件夹中的<code>hello_service.go</code>为处理函数，文件夹名称<code>hello/example</code>是thrift IDL的namespace</li>
<li><code>model</code>文件夹定义了处理函数用到的数据结构和相关逻辑，无需且不能修改。</li>
<li><code>router</code>文件夹定义了路由注册函数，其中只有<code>middleware.go</code>文件允许修改，可以定义中间件。</li>
<li>主目录的<code>router.go</code>中可以定义自定义路由规则。<code>/ping</code>路由就是在这个文件当中定义的。</li>
<li>主目录的<code>router_gen.go</code>为包装函数，依次调用<code>router</code>文件夹和<code>router.go</code>，分别注册由IDL定义的路由和自定义路由。</li>
</ul>
]]></content>
      <tags>
        <tag>Go</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>bsdiff相关论文阅读笔记</title>
    <url>/2023/03/21/bsdiff%E7%9B%B8%E5%85%B3%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="基于play-framework的APP托管平台的设计与实现（北京邮电大学-硕士论文-2018）"><a href="#基于play-framework的APP托管平台的设计与实现（北京邮电大学-硕士论文-2018）" class="headerlink" title="基于play framework的APP托管平台的设计与实现（北京邮电大学 硕士论文 2018）"></a>基于play framework的APP托管平台的设计与实现（北京邮电大学 硕士论文 2018）</h1><ul>
<li>bsdiff/bspatch+Linux rsync</li>
</ul>
<a id="more"></a>

<h2 id="基于文件分块的大文件更新策略"><a href="#基于文件分块的大文件更新策略" class="headerlink" title="基于文件分块的大文件更新策略"></a>基于文件分块的大文件更新策略</h2><h3 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h3><ol>
<li>客户端使用bspatch进行解压时，内存消耗过大</li>
<li>客户端本地的旧文件可能不完整或者受损，而bspatch需要完整的源文件</li>
<li>频繁更新场景下，服务器需要多次进行bsdiff，消耗时间长；并且需要管理多个版本的差分包</li>
</ol>
<h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><ul>
<li>服务端<ul>
<li>对新文件进行滚动校验，生成校验表<ul>
<li>两个校验表<ul>
<li>弱校验：速度快但冲突概率高，采用Adler-32</li>
<li>强校验：速度慢但冲突概率小，采用MD5</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>客户端<ul>
<li>下载服务端的新文件校验表</li>
<li>对本地文件进行滚动校验（先弱校验，如命中再强校验）<ul>
<li>如果两次校验的结果在新文件校验表中均命中，则将该块标记为匹配部分，指针后移一个块</li>
<li>如果未命中，则将该字节标记为不匹配，指针后移一个字节</li>
</ul>
</li>
<li>从服务器下载未匹配的部分</li>
<li>将下载到的未匹配部分与本地的匹配部分进行合成</li>
</ul>
</li>
</ul>
<h1 id="A-Software-Update-Scheme-by-Airwaves-for-Automotive-Equipment（2013-International-Conference-on-Informatics-Electronics-and-Vision-ICIEV-）"><a href="#A-Software-Update-Scheme-by-Airwaves-for-Automotive-Equipment（2013-International-Conference-on-Informatics-Electronics-and-Vision-ICIEV-）" class="headerlink" title="A Software Update Scheme by Airwaves for Automotive Equipment（2013 International Conference on Informatics, Electronics and Vision (ICIEV)）"></a>A Software Update Scheme by Airwaves for Automotive Equipment（<a href="https://ieeexplore.ieee.org/xpl/conhome/6558542/proceeding">2013 International Conference on Informatics, Electronics and Vision (ICIEV)</a>）</h1><h2 id="解决的问题-1"><a href="#解决的问题-1" class="headerlink" title="解决的问题"></a>解决的问题</h2><ul>
<li>将bsdiff/bspatch应用到汽车上会面临着几个问题：<ul>
<li>内存限制</li>
<li>不稳定的电源供应</li>
<li>不稳定的无线电波传输</li>
</ul>
</li>
</ul>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="原地更新"><a href="#原地更新" class="headerlink" title="原地更新"></a>原地更新</h3><ul>
<li>原地更新的挑战：写冲突，即前面的编辑操作修改了后面的编辑操作所要引用的旧二进制的空间<ul>
<li>bsdiff场景：preceding Copy &amp; Modify and New edit operations</li>
</ul>
</li>
<li>性能<ul>
<li>原空间复杂度：u+v+w+O(1)</li>
<li>新空间复杂度：max(u,v)+w+O(1)</li>
</ul>
</li>
</ul>
<h2 id="原地更新相关文章"><a href="#原地更新相关文章" class="headerlink" title="原地更新相关文章"></a>原地更新相关文章</h2><p>[11] R. C. Burms and D. D. E. Long, “In-Place Reconstruction of Delta<br>Compressed File,” ACM Symp. on Principles of Distributed Computing,<br>pp.267–275, Jul. 1998.<br>[12] D. Shapira and J. A. Storer, “In Place Differential File Compression,”<br>The Computer Journal Advance Access, Vol.48, pp.667–691, Aug. 2005.<br>[13] Y.-C. Cho and J. W. Jeon, “In-Place Reconstructible Delta Compression Using Alleviated Greedy Matching Algorithm,” Proc. Int. Conf. on<br>Industrial Informatics (INDIN2008), pp.1596–1601, Jul. 2008.  </p>
<h1 id="In-Place-Reconstruction-of-Delta-Compressed-Files-PODC-‘98-CCF-B"><a href="#In-Place-Reconstruction-of-Delta-Compressed-Files-PODC-‘98-CCF-B" class="headerlink" title="In-Place Reconstruction of Delta Compressed Files (PODC ‘98 CCF-B)"></a>In-Place Reconstruction of Delta Compressed Files (<a href="https://dl.acm.org/doi/proceedings/10.1145/277697">PODC ‘98 CCF-B</a>)</h1><h2 id="解决的问题-2"><a href="#解决的问题-2" class="headerlink" title="解决的问题"></a>解决的问题</h2><ul>
<li><p>当差量指令指示计算机从一个文件区域复制数据时，新的文件数据可能已经被写入</p>
<p><img src="image-20230302163437757.png" alt="image-20230302163437757"></p>
</li>
</ul>
<h2 id="基本思路-1"><a href="#基本思路-1" class="headerlink" title="基本思路"></a>基本思路</h2><ul>
<li><p>基于图论</p>
</li>
<li><p>对差分文件进行后处理</p>
<ul>
<li>对尝试读取已写入区域的指令进行检测</li>
<li>对这些指令进行排序，以减少冲突的出现</li>
<li>对于剩余的冲突，删除这些指令，改为显式添加（<strong>会增大差分文件的大小</strong>）</li>
</ul>
</li>
<li><p>修改差分文件为可就地重建的，花费的时间比生成差分时间还要长</p>
<ul>
<li>（Conclusion又说时间更短，矛盾）</li>
</ul>
</li>
</ul>
<h2 id="过程：一个原地重建算法"><a href="#过程：一个原地重建算法" class="headerlink" title="过程：一个原地重建算法"></a>过程：一个原地重建算法</h2><ul>
<li>定义copy指令为三元组*&lt;f,t,l&gt;*<ul>
<li>f：源串中的地址</li>
<li>t：目标串中的地址</li>
<li>l：复制长度</li>
</ul>
</li>
</ul>
<h3 id="冲突检测"><a href="#冲突检测" class="headerlink" title="冲突检测"></a>冲突检测</h3><ul>
<li>对于copy指令*&lt;f<sub>i</sub>,t<sub>i</sub>,l<sub>i</sub>&gt;<em>和</em>&lt;f<sub>j</sub>,t<sub>j</sub>,l<sub>j</sub>&gt;*，i&lt;j，存在一个WR冲突，当：[t<sub>i</sub>,t<sub>i</sub>+l<sub>i</sub>-1]∩[f<sub>j</sub>,f<sub>j</sub>+l<sub>j</sub>-1]≠{}</li>
<li>与add指令相关的潜在WR冲突可以通过把add放在所有copy的末尾来避免<ul>
<li>这种冲突出现于add先写，copy后读</li>
</ul>
</li>
<li>copy指令的自冲突问题：读与写的区间重叠<ul>
<li>解决方法<ul>
<li>当f&gt;=t时，从左到右逐字节复制</li>
<li>当f&lt;t时，从右到左逐字节复制</li>
</ul>
</li>
</ul>
</li>
<li>三个方法：<ol>
<li>将所有的add放到差分文件的末尾</li>
<li>将copy指令排序，以减少WR冲突</li>
<li>对于剩余的WR冲突，将对应的copy指令转为add指令，并且放到差分文件的末尾</li>
</ol>
</li>
</ul>
<h3 id="生成无冲突的排列"><a href="#生成无冲突的排列" class="headerlink" title="生成无冲突的排列"></a>生成无冲突的排列</h3><ul>
<li><p>将copy指令按照t进行排序</p>
</li>
<li><p>将所有的copy指令用顶点表示</p>
</li>
<li><p>如果顶点<em>u</em>的读区间与顶点<em>v</em>的写区间重合，则创建一条边<em>u-&gt;v</em></p>
</li>
<li><p>执行增强版的拓扑排序</p>
<ul>
<li>如果检测到环，移除一个顶点（转为add）以消除环<ul>
<li>移除最佳顶点以减少压缩损失是一个NP难问题</li>
<li>两种策略：<ul>
<li>常数时间策略：选择最容易移除的顶点</li>
<li>局部最小策略：遍历环，选择删除开销最小的顶点，即copy的长度最小的指令</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>将拓扑排序后的copy指令写入输出文件，再将add指令写入输出文件</p>
</li>
</ul>
<h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><ul>
<li><p>数据集：GNU工具、BSD操作系统</p>
</li>
<li><p>压缩损失：</p>
<ul>
<li>局部最小策略：2.4%</li>
<li>常数时间策略：5.9%</li>
</ul>
</li>
</ul>
<h1 id="In-Place-Differential-File-Compression（DCC-03-CCF-B-and-The-Computer-Journal-05）"><a href="#In-Place-Differential-File-Compression（DCC-03-CCF-B-and-The-Computer-Journal-05）" class="headerlink" title="In Place Differential File Compression（DCC 03 CCF-B and The Computer Journal 05）"></a>In Place Differential File Compression（DCC 03 CCF-B and The Computer Journal 05）</h1><h2 id="基本思路-2"><a href="#基本思路-2" class="headerlink" title="基本思路"></a>基本思路</h2><ul>
<li>提出了IPSW算法<ul>
<li>将窗口初始化为S，将其最大尺寸限制为max(|S|,|T|)来对T进行解压</li>
<li>速度快，压缩效果好</li>
<li>当S和T有合理程度的对齐时（即S和T的大量匹配以大致相同的相对顺序出现），IPSW最有效<ul>
<li>这种对齐在很多应用中是典型现象</li>
</ul>
</li>
<li>当S和T不对齐时，对S进行预处理<ul>
<li>压缩文件之前有一个位标识该文件是否经过预处理</li>
<li>编码器用IPSW对T进行压缩，与对S的压缩进行对比<ul>
<li>如果差别很大，则设置初始位，进行对齐预处理，在IPSW编码前增加一个移动列表</li>
<li>解码器先原地执行这些动作，再执行正常的IPSW解码</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>本文直接生成可原地构建的差分文件，而不是对差分文件进行可原地构建处理</li>
<li>本文同时实现了就地压缩和就地解压</li>
</ul>
<h2 id="原地移动子串（压缩前置知识）"><a href="#原地移动子串（压缩前置知识）" class="headerlink" title="原地移动子串（压缩前置知识）"></a>原地移动子串（压缩前置知识）</h2><ul>
<li><p>定义源串S，目标串T</p>
</li>
<li><p>差分文件包含一些移动指令（对应S和T匹配的块）和一些压缩数据（对应不匹配的部分）</p>
</li>
<li><p>解压流程如下：</p>
<ul>
<li>对于收到的每条移动指令，对T的子串就地执行移动</li>
<li>对于压缩数据，进行解压，然后填补移动后的空隙<ul>
<li>步骤2可以应用任何无损压缩方法</li>
</ul>
</li>
</ul>
</li>
<li><p>定义s为S中一个即将被移动的子串，l为s的长度，x为原位置，y为目标位置</p>
<ul>
<li>本文定义的”移动“并不是简单覆盖，例如：当s往右移动1个字符时，原本在s右边的那个字符要变到s左边，而不是被覆盖</li>
</ul>
</li>
<li><p>就地移动子串的高效方法：</p>
<ul>
<li>过程<ul>
<li>不失一般性，令x=0，假设向右移动</li>
<li>对0到y-1的字符，进行排列：i → (i + d) MOD y</li>
</ul>
</li>
<li>执行排列的方法<ul>
<li>标准方法：O(y)时间、y比特的标记位空间</li>
<li>一个理论方法：O(1)空间，但在实际应用中节省y比特的标记位空间并不重要</li>
</ul>
</li>
</ul>
</li>
<li><p>当S和T对齐的情况下，移动只需要简单的字符串拷贝：</p>
<ul>
<li><p>两次扫描文件，首先从左到右复制移动到左边的块，再从右到左复制移动到右边的块</p>
<p><img src="image-20230303134313131.png" alt="image-20230303134313131"></p>
</li>
<li><p>实际执行过程可以设置多个阈值，分步贪心查找匹配的窗口</p>
</li>
</ul>
</li>
</ul>
<h2 id="原地滑动窗口（压缩、解压缩过程）"><a href="#原地滑动窗口（压缩、解压缩过程）" class="headerlink" title="原地滑动窗口（压缩、解压缩过程）"></a>原地滑动窗口（压缩、解压缩过程）</h2><ul>
<li>问题：给定一个长度为m的串S，一个长度为n的串T，以及字符插入、块删除、块移动和块复制的操作集，计算将S转化为T所需的最小操作数<ul>
<li>即压缩过程如何生成最小的差分文件</li>
<li>是一个NP-完全问题</li>
<li>可以通过一个简单的从左到右的贪婪复制算法（全窗算法）近似到一个恒定的常数内</li>
</ul>
</li>
<li>全窗编码算法：略</li>
<li>ISPW算法：<ol>
<li>构建字符串ST</li>
<li>在一个滑动窗口max(m,n)内，从左到右贪心地寻找与接下来的子串匹配的子串（使用上一节最后一部分叙述的分步贪心查找方法）</li>
</ol>
</li>
<li>使用ISPW算法进行压缩后，由于限制了匹配子串只能在大小为max(m,n)的滑动窗口内进行查找，因此解压时所占用的内存空间也是max(m,n)</li>
</ul>
<h2 id="移动预处理算法（MP）"><a href="#移动预处理算法（MP）" class="headerlink" title="移动预处理算法（MP）"></a>移动预处理算法（MP）</h2><p>先不看</p>
<h2 id="实验-1"><a href="#实验-1" class="headerlink" title="实验"></a>实验</h2><ul>
<li>IPSW的压缩率与bsdiff接近<ul>
<li>针对部分文件（如sql和部分的gcc），即使不采取MP，IPSW的压缩率也能优于bsdiff</li>
<li>即使采取了MP，IPSW针对dll文件的压缩率表现也比较差，少部分较好</li>
</ul>
</li>
<li>我的结论：用IPSW实现原地解压后导致的压缩率损失与具体的文件格式有关系</li>
</ul>
<p><img src="image-20230303143043095.png" alt="image-20230303143043095"></p>
<h1 id="In-Place-Reconstructible-Delta-Compression-using-Alleviated-Greedy-Matching-Algorithm（INDIN-08）"><a href="#In-Place-Reconstructible-Delta-Compression-using-Alleviated-Greedy-Matching-Algorithm（INDIN-08）" class="headerlink" title="In-Place Reconstructible Delta Compression using Alleviated Greedy Matching Algorithm（INDIN 08）"></a>In-Place Reconstructible Delta Compression using Alleviated Greedy Matching Algorithm（INDIN 08）</h1><h2 id="解决的问题-3"><a href="#解决的问题-3" class="headerlink" title="解决的问题"></a>解决的问题</h2><ul>
<li><p>现有方案的问题</p>
<ul>
<li>Burns and Long的方案将COPY指令替换为ADD指令，增加了差分文件的大小</li>
<li>Shapira的方案使用了原地滑动窗口算法，然而解码时移动字符串几乎需要O(m)时间，使得解码器变得更加复杂，不适合于嵌入式系统；并且预处理步骤还会增大差分文件的大小</li>
</ul>
</li>
<li><p>本文解决了这两个问题，适合于小内存和低计算能力的嵌入式系统</p>
</li>
</ul>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul>
<li><p>找匹配串的方法</p>
<ul>
<li>最优的找匹配串方法：后缀树。但需要线性空间，不适用于大文件</li>
<li>另一种方法：哈希方法。如Karp-Rabin哈希，可以递推计算</li>
</ul>
</li>
<li><p>贪心方法</p>
<ul>
<li><p>创建一个哈希表，保存指纹对应的所有下标（以链表形式）</p>
<p><img src="image-20230303153404971.png" alt="image-20230303153404971"></p>
</li>
<li><p>算法对f<sub>new</sub>当前位置的串进行哈希，在哈希表中找到最长匹配的串</p>
<ul>
<li>如果匹配失败，则f<sub>new</sub>下标加1</li>
</ul>
</li>
<li><p>伪代码如下，注意APPEND和SET的被操作数是前面的变量：</p>
</li>
</ul>
</li>
</ul>
<p><img src="image-20230303155411487.png" alt="image-20230303155411487"></p>
<h2 id="方法：缓解的贪婪匹配算法"><a href="#方法：缓解的贪婪匹配算法" class="headerlink" title="方法：缓解的贪婪匹配算法"></a>方法：缓解的贪婪匹配算法</h2><ul>
<li><p>选取避免WR冲突的字符串匹配，而不是最长匹配</p>
</li>
<li><p>现有的确定最佳匹配串的贪心算法有如下两个标准：</p>
<ul>
<li>匹配串长度</li>
<li>距离当前位置的offset</li>
</ul>
</li>
<li><p>本文增加了一个标准：</p>
<ul>
<li>是否有WR冲突（这个标准是最重要的）</li>
</ul>
</li>
<li><p>伪代码：</p>
<ul>
<li>当一个匹配串在旧文件当中，且下标在当前编码位置之前，则代表会发生WR冲突。该匹配节点将被移除</li>
<li>遍历完链表后，在所有不会发生WR冲突的节点当中找最佳匹配串</li>
</ul>
<p><img src="image-20230303155658454.png" alt="image-20230303155658454"></p>
</li>
</ul>
<h2 id="实验-2"><a href="#实验-2" class="headerlink" title="实验"></a>实验</h2><ul>
<li>本文在zdelta上应用了本方法，与原始zdelta和Burn的方法进行对比</li>
<li>本文方法生成的差分文件大小略小于Burn的方法</li>
<li>由于差分文件更小，本文的解压内存占用也略小于Burn的方法</li>
</ul>
<p><img src="image-20230303161203897-1678091281999-1.png" alt="image-20230303161203897"></p>
<h1 id="Dfinder—An-efficient-differencing-algorithm-for-incremental-programming-of-constrained-IoT-devices（IOT-22）"><a href="#Dfinder—An-efficient-differencing-algorithm-for-incremental-programming-of-constrained-IoT-devices（IOT-22）" class="headerlink" title="Dfinder—An efficient differencing algorithm for incremental programming of constrained IoT devices（IOT 22）"></a>Dfinder—An efficient differencing algorithm for incremental programming of constrained IoT devices（IOT 22）</h1><h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><ul>
<li>本文提出了Dfinder<ul>
<li>字节级</li>
<li>使用增强的后缀数组，可以有效产生小的差分文件</li>
<li>可以正向和反向检测共同片段，还可以使用新固件中已经被重建的部分</li>
<li>O(nlogn)时间，O(n)空间</li>
</ul>
</li>
<li>提出Dfinder的一个模式，允许就地重建</li>
</ul>
<h2 id="物联网空中编程前置知识"><a href="#物联网空中编程前置知识" class="headerlink" title="物联网空中编程前置知识"></a>物联网空中编程前置知识</h2><ul>
<li><p>物联网领域使用的操作系统，如ContikiOS[18]，是模块化系统，支持动态链接[19]和加载；因此，就OTAP而言，它们只需要接收新固件映像的修改部分，因为在接收时，动态链接器会重新链接映像并再次加载它。可能会出现大量的开销，因为除了修改的部分，新的符号和重定位表也需要传输。Elon[20]通过引入可替换部件的概念来解决这个问题，这些部件包括。(i) 可替换的代码，(ii) 可替换的数据，以及(iii) 系统跳转表。然而，一个缺点是，这些（组件）存储在节点的RAM中，随后在系统重置的情况下需要重新传输。</p>
</li>
<li><p>相关算法：</p>
<ul>
<li>Xdelta</li>
<li>BSDiff</li>
<li>RMTD</li>
<li>DASA</li>
<li>R3</li>
<li>JojoDiff</li>
<li>DG</li>
</ul>
</li>
</ul>
<h2 id="增强的后缀数组"><a href="#增强的后缀数组" class="headerlink" title="增强的后缀数组"></a>增强的后缀数组</h2><ul>
<li>增强的后缀数组=后缀数组SA+辅助数组（LCP数组、𝛷-数组等）</li>
<li>Dfinder使用divsufsort</li>
</ul>
<h2 id="Dfinder"><a href="#Dfinder" class="headerlink" title="Dfinder"></a>Dfinder</h2><ul>
<li><p>指令</p>
<ul>
<li><p>COPY(Copy_typeX|X=1,2,3,4)，取决于BMD所检测的匹配片段的类型</p>
</li>
<li><p>ADD，连续的ADD指令可以合并</p>
<p><img src="image-20230303174541068.png" alt="image-20230303174541068"></p>
</li>
</ul>
</li>
<li><p>过程</p>
<p><img src="image-20230303174825401.png" alt="image-20230303174825401"></p>
</li>
<li><p>块移动检测器（BMD）</p>
<ul>
<li>动态编程假设共同的子序列以相同顺序出现，且无法捕获重复子序列。因此，Tichy使用了块移动</li>
</ul>
</li>
</ul>
<h1 id="S2-a-Small-Delta-and-Small-Memory-Differencing-Algorithm-for-Reprogramming-Resource-constrained-IoT-Devices（INFOCOM-‘21"><a href="#S2-a-Small-Delta-and-Small-Memory-Differencing-Algorithm-for-Reprogramming-Resource-constrained-IoT-Devices（INFOCOM-‘21" class="headerlink" title="S2: a Small Delta and Small Memory Differencing Algorithm for Reprogramming Resource-constrained IoT Devices（INFOCOM ‘21)"></a>S2: a Small Delta and Small Memory Differencing Algorithm for Reprogramming Resource-constrained IoT Devices（INFOCOM ‘21)</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul>
<li>现代IoT应用的固件大小逐渐增大，使得现有差分算法面临RAM的瓶颈</li>
<li>提出S2<ul>
<li>减小内存占用的方法<ul>
<li>基于拓扑排序的原地重建算法</li>
<li>流重建技术</li>
</ul>
</li>
<li>减小差分文件大小的方法<ul>
<li>基于预测的编码</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="解决的问题和方法"><a href="#解决的问题和方法" class="headerlink" title="解决的问题和方法"></a>解决的问题和方法</h2><ul>
<li>有限的RAM：现有方法需要把整个旧文件读入RAM<ul>
<li>方法：基于拓扑排序的原地重建</li>
</ul>
</li>
<li>有限的flash空间：现有方法需要把新文件写入不同空间<ul>
<li>方法：流重建技术</li>
</ul>
</li>
<li>进一步减小差分文件大小<ul>
<li>方法：基于预测的编码</li>
</ul>
</li>
</ul>
<h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h2><h3 id="S2DIFF"><a href="#S2DIFF" class="headerlink" title="S2DIFF"></a>S2DIFF</h3><ul>
<li>拓扑排序：同Burn的算法</li>
<li>基于预测的编码：<ul>
<li>原始的指令地址参数都用8个字节编码，以支持大文件</li>
<li>文章观察到ADD序列的参数t是单调增加的，COPY的参数在拓扑排序前也是单调增加的</li>
<li>因此，文章用预测模型对地址参数进行编码：给定一个要编码的COPY的t地址，文章用前几个t来预测它的值，然后用预测的误差对t进行2个字节的编码<ul>
<li>采用移动平均（MA）模型，因为它能在资源有限的设备上进行有效传输和执行，并且有令人满意的准确度</li>
</ul>
</li>
</ul>
</li>
<li>用xz进行二次压缩</li>
</ul>
<h3 id="S2PATCH"><a href="#S2PATCH" class="headerlink" title="S2PATCH"></a>S2PATCH</h3><ul>
<li>流重建<ul>
<li>逐指令解压，用预测算法恢复指令的地址参数，然后执行</li>
</ul>
</li>
</ul>
<h2 id="实验-3"><a href="#实验-3" class="headerlink" title="实验"></a>实验</h2><p><img src="image-20230308200702138.png" alt="image-20230308200702138"></p>
<ul>
<li><p>baseline：</p>
<ul>
<li><p>AOS：AliOS Things操作系统中默认的增量重编程算法</p>
<ul>
<li>将新旧文件分割成64KB的片段，然后对每个片段执行bsdiff</li>
</ul>
</li>
<li><p>bsdiff：包含Burn的原地重建算法</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>差量压缩</tag>
      </tags>
  </entry>
  <entry>
    <title>bzip2相关论文阅读笔记</title>
    <url>/2023/03/21/bzip2%E7%9B%B8%E5%85%B3%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Parallel-Data-Compression-With-Bzip2（分块压缩）"><a href="#Parallel-Data-Compression-With-Bzip2（分块压缩）" class="headerlink" title="Parallel Data Compression With Bzip2（分块压缩）"></a>Parallel Data Compression With Bzip2（分块压缩）</h1><a id="more"></a>

<h2 id="压缩算法的分类"><a href="#压缩算法的分类" class="headerlink" title="压缩算法的分类"></a>压缩算法的分类</h2><ul>
<li>字典算法<ul>
<li>LZ77（ZIP、GZIP）</li>
<li>LZW（自适应）</li>
<li>并行研究</li>
</ul>
</li>
<li>基于统计的算法<ul>
<li>建模阶段-&gt;编码阶段</li>
<li>基本建模技术<ul>
<li>符号频率</li>
<li>符号上下文</li>
<li>符号排名</li>
</ul>
</li>
<li>算术编码器：PPM部分匹配预测<ul>
<li>当前（2004）文本数据的最佳无损压缩算法</li>
<li>有限上下文统计建模技术</li>
<li>使用输入流的前一个字节来预测下一个字节</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Burrows-Wheeler-Transform"><a href="#Burrows-Wheeler-Transform" class="headerlink" title="Burrows-Wheeler Transform"></a>Burrows-Wheeler Transform</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li>块排序、无损数据压缩算法，对输入块执行可逆变换</li>
<li><strong>不执行任何压缩</strong>，但以某种方式修改数据，使其易于使用二级算法进行压缩</li>
<li>变换后的块包含与原始块相同的字符，但是形式易于压缩，例如相同字符分组在一起</li>
</ul>
<h3 id="原理（逆过程见Parallel-algorithms-for-Burrows–Wheeler-compression-and-decompression）"><a href="#原理（逆过程见Parallel-algorithms-for-Burrows–Wheeler-compression-and-decompression）" class="headerlink" title="原理（逆过程见Parallel algorithms for Burrows–Wheeler compression and decompression）"></a>原理（逆过程见<em>Parallel algorithms for Burrows–Wheeler compression and decompression</em>）</h3><ul>
<li><p>过程</p>
<ol>
<li><p>源字符串<em>S</em>，包含N个字符</p>
</li>
<li><p>将<em>S</em>旋转（循环移位）N次，将旋转过程中生成的N个中间串进行字典排序</p>
</li>
<li><p>提取这N个串的最后一个字符，组合成串<em>L</em></p>
</li>
<li><p><em>I</em>为源串<em>S</em>在排序后的串列表当中的索引</p>
</li>
</ol>
</li>
<li><p>选择分块大小，至少2KB。增大块大小可以增强有效性</p>
</li>
<li><p>视为三个阶段</p>
<ol>
<li>排序阶段</li>
<li>“Move-To-Front”阶段</li>
<li>压缩阶段</li>
</ol>
</li>
</ul>
<h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><ul>
<li>内存消耗：9B内存/1B数据+700KB常量</li>
<li>Move-To-Front编码器的选取影响压缩率：不同的排序顺序和源字母表的顺序</li>
<li>最佳性能：O(logn/n)，优于LZ77、LZ78</li>
</ul>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul>
<li><strong>BZIP2</strong>：BTW+哈夫曼编码<ul>
<li>压缩率优于基于字典算法的LZ77/LZ78</li>
<li>在基于统计算法的PPM中，压缩率接近，但快很多</li>
</ul>
</li>
</ul>
<h2 id="并行BWT"><a href="#并行BWT" class="headerlink" title="并行BWT"></a>并行BWT</h2><ul>
<li>并行排序</li>
<li>分块BWT</li>
<li>结合上述两种方法<ul>
<li>性能取决于处理器数量，需要进行测试</li>
</ul>
</li>
</ul>
<h2 id="并行BZIP2（PBZIP2）"><a href="#并行BZIP2（PBZIP2）" class="headerlink" title="并行BZIP2（PBZIP2）"></a>并行BZIP2（PBZIP2）</h2><ul>
<li>pthread</li>
<li>分块<ul>
<li>块在内存中以生产者/消费者模型、FIFO管理</li>
<li>每个处理器读取块，执行BWT，然后释放内存</li>
</ul>
</li>
</ul>
<h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><ul>
<li>随着处理器数量的上升，pbzip2压缩时间减小。减小到大概12个处理器就增长缓慢了。</li>
</ul>
<p><img src="image-20230223101819583.png" alt="image-20230223101819583"></p>
<h1 id="Practical-Speculative-Parallelization-of-Variable-Length-Decompression-Algorithms（分块解压）"><a href="#Practical-Speculative-Parallelization-of-Variable-Length-Decompression-Algorithms（分块解压）" class="headerlink" title="Practical Speculative Parallelization of Variable-Length Decompression Algorithms（分块解压）"></a>Practical Speculative Parallelization of Variable-Length Decompression Algorithms（分块解压）</h1><h2 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h2><ul>
<li><p>如果压缩时采取块级并行，那么解压的时候，在完成对一个块的解压之前，无法确定这个块的边界</p>
</li>
<li><p>相关工作的解决办法：</p>
<ul>
<li>在压缩块的末尾插入填充位，或者加入提示：只适用于修改后的压缩器</li>
<li>Klein和Wiseman利用Huffman编码的自同步特性：只适用于静态Huffman编码</li>
<li>块边界位置在一个输入之内或跨不同输入的相关性几乎为0，因此难以应用domain-unaware value prediction algorithms</li>
</ul>
</li>
<li><p>提出SDM：一个有效预测区块边界的新算法，和能够实现高效区块级并行解压的<strong>运行时</strong>系统</p>
<ul>
<li><strong>思考：运行时系统能否被很好应用于移动端？可以，因为华为手表的升级程序是官方定制的。本文的实验是在嵌入式平台上做的</strong></li>
<li>不需要修改压缩器</li>
</ul>
</li>
</ul>
<h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><h3 id="变长解压算法"><a href="#变长解压算法" class="headerlink" title="变长解压算法"></a>变长解压算法</h3><ul>
<li><p>即使压缩时定长分块，生成的每个块大小也不一样</p>
</li>
<li><p>解压时存在的依赖：</p>
<p><img src="image-20230224152706564.png" alt="image-20230224152706564"></p>
</li>
</ul>
<h3 id="基于值预测的推测并行化"><a href="#基于值预测的推测并行化" class="headerlink" title="基于值预测的推测并行化"></a>基于值预测的推测并行化</h3><ul>
<li><p>三种方法均无效：</p>
<ul>
<li><p><em>pos</em>变量在一段时间内或者不同的输入之间构成几乎0的相关性，使得值预测无效</p>
</li>
<li><p>在一个块末尾计算<em>pos</em>的复杂性与解压整个块的复杂性相当，使得提取预测器函数开销太大</p>
</li>
<li><p>复杂的依赖模式和有限的程序分析能力使得automatic distiller也无效</p>
</li>
</ul>
</li>
<li><p>目标：三个部件</p>
<ul>
<li>自定义值预测器：以高置信度和低开销确定每个压缩块的起点</li>
<li>运行时错误预测检测和恢复机制</li>
<li>易于使用的并行化API：将现有的变长解压算法转化为基于值预测的推测并行代码</li>
</ul>
</li>
</ul>
<h2 id="块边界预测算法"><a href="#块边界预测算法" class="headerlink" title="块边界预测算法"></a>块边界预测算法</h2><h3 id="第一种：基于部分解压"><a href="#第一种：基于部分解压" class="headerlink" title="第一种：基于部分解压"></a>第一种：基于部分解压</h3><ul>
<li>不适用于bzip2，略</li>
</ul>
<h3 id="第二种：基于模式匹配"><a href="#第二种：基于模式匹配" class="headerlink" title="第二种：基于模式匹配"></a>第二种：基于模式匹配</h3><ul>
<li>bzip2包含一个48比特的魔数头，用于标识一个新的被压缩块的开始；并且不存在块间依赖。采用模式匹配</li>
</ul>
<h2 id="SDM执行模型"><a href="#SDM执行模型" class="headerlink" title="SDM执行模型"></a>SDM执行模型</h2><h4 id="SDM三阶段流水线"><a href="#SDM三阶段流水线" class="headerlink" title="SDM三阶段流水线"></a>SDM三阶段流水线</h4><ul>
<li>三种进程：扫描器、解压器、合并器<ul>
<li>主进程创建并配置每个阶段</li>
<li>主进程本身作为合并器</li>
<li>默认：解压进程数量==可用核心数量</li>
</ul>
</li>
<li>在拥有大量可用核心的多核嵌入式平台当中，使用集中式提交模型（一个合并器）<ul>
<li>解压-合并通信可能成为性能瓶颈</li>
</ul>
</li>
<li>由于上下文切换和内存空间开销，核心数较少的平台无法从额外的进程受益，需要使用分布式提交模型<ul>
<li>将解压器和合并器融合</li>
<li>如何顺序提交：定义一个提交令牌在进程间传递。一个块解压后在本地缓存，等待收到解压令牌后才进行提交</li>
</ul>
</li>
</ul>
<p><img src="image-20230224154632726.png" alt="image-20230224154632726"></p>
<h4 id="错误预测检测和恢复"><a href="#错误预测检测和恢复" class="headerlink" title="错误预测检测和恢复"></a>错误预测检测和恢复</h4><ul>
<li><p>由合并器负责：将从扫描器收到的预测值与解压器收到的实际值进行对比</p>
</li>
<li><p>如果检测到一个错误预测，所有的扫描器和解压器都被停止，程序的其余部分顺序执行</p>
</li>
</ul>
<h2 id="SDM-API"><a href="#SDM-API" class="headerlink" title="SDM API"></a>SDM API</h2><ul>
<li>略</li>
</ul>
<h2 id="实验-1"><a href="#实验-1" class="headerlink" title="实验"></a>实验</h2><p><img src="image-20230224163814708.png" alt="image-20230224163814708"></p>
<ul>
<li>错误恢复的性能：对于bzip2，如果误判发生在输入文件的开头附近会造成轻微的性能下降；但是在大多数情况下都比顺序执行要快</li>
</ul>
<h1 id="Parallel-algorithms-for-Burrows–Wheeler-compression-and-decompression（块内压缩和解压）"><a href="#Parallel-algorithms-for-Burrows–Wheeler-compression-and-decompression（块内压缩和解压）" class="headerlink" title="Parallel algorithms for Burrows–Wheeler compression and decompression（块内压缩和解压）"></a>Parallel algorithms for Burrows–Wheeler compression and decompression（块内压缩和解压）</h1><h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><ul>
<li>第一个应用于BW压缩和<strong>解压缩</strong>问题的PRAM算法</li>
<li>相比<em>Parallel Data Compression With Bzip2</em>，解决了<strong>整个输入</strong>的BWT问题，而不是分块<ul>
<li>本方法与分块方法正交，因此还可以在单个块上叠加应用本方法</li>
</ul>
</li>
</ul>
<h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><h3 id="BST"><a href="#BST" class="headerlink" title="BST"></a>BST</h3><h4 id="正过程"><a href="#正过程" class="headerlink" title="正过程"></a>正过程</h4><ul>
<li>见<em>Parallel Data Compression With Bzip2</em></li>
</ul>
<h4 id="逆过程（IBST）"><a href="#逆过程（IBST）" class="headerlink" title="逆过程（IBST）"></a>逆过程（IBST）</h4><ul>
<li><p>定义<em>S<sup>BST</sup><em>为BST正过程生成的串，</em>M</em>为BST正过程排序后的矩阵（<strong>显然M为方阵</strong>）。显然<em>S<sup>BST</sup><em>为</em>M</em>的最后一列</p>
</li>
<li><p>需要一个符号表示字符串末尾，且<strong>这个符号的字典序最小</strong>。对于英文字符串，可以取ASCII序在英文字母之前的”<em>$</em>“。在<em>Parallel Data Compression With Bzip2</em>这篇论文当中则是用一个数组记录</p>
</li>
<li><p><strong>迭代法</strong>生成<em>M</em>的每一列，迭代N次后，取<em>M</em>的第一行即为原来的<em>S</em></p>
<ol>
<li><p>为了生成<em>M</em>的第一列，将*S<sup>BST</sup>*进行稳定排序。</p>
</li>
<li><p>为了生成<em>M</em>的前两列，执行下列两个步骤：</p>
<ol>
<li><p>将*S<sup>BST</sup>*插入到第一列的左边</p>
</li>
<li><p>对<em>M</em>的前两列进行下列定义的排序：</p>
<ul>
<li>如果两行的第一个字符不同，则根据第一个字符排序</li>
<li>如果两行的第一个字符相同，不动</li>
</ul>
</li>
</ol>
</li>
<li><p>重复2直到生成<em>M</em></p>
</li>
</ol>
</li>
<li><p><strong>O(N)复杂度方法</strong></p>
<ul>
<li>图示思路：将<em>M</em>中的所有*$<em>写出来；然后旋转每一行，使得</em>$<em>位于最后一列；此时，从左往右读就是源串</em>S*</li>
<li>伪代码：有点难读懂，先略过</li>
</ul>
</li>
</ul>
<h3 id="MTF"><a href="#MTF" class="headerlink" title="MTF"></a>MTF</h3><h4 id="正过程-1"><a href="#正过程-1" class="headerlink" title="正过程"></a>正过程</h4><ul>
<li><p>给定一个字符，MTF将每个字符替换为：该字符本次出现与上次出现之间，<strong>不同</strong>字符的个数。为了保证该定义有效，规定字母表在*S<sup>BST</sup>*之前以某种顺序出现。</p>
</li>
<li><p>定义*L<sub>i</sub><em>为</em>S<sup>BST</sup>*的前i个字符中，每一个不同字符以其最后一次出现的位置倒序生成的列表，且考虑上述假定的前缀。</p>
</li>
<li><p>伪代码：</p>
<ol>
<li><p>L := L<sub>0</sub>（即假定前缀的倒序）</p>
</li>
<li><p>for i := 0 to n - 1 do</p>
<ol>
<li><p>j := S<sup>BST</sup>[i]在L中的索引</p>
</li>
<li><p>S<sup>MTF</sup>[i] := j</p>
</li>
<li><p>将L[j]移动到L首部</p>
</li>
</ol>
</li>
</ol>
</li>
<li><p>目的：由于BST保证了同个字符的出现位置相近，MTF生成的是小整数序列，即小整数出现频率很高。因此该序列适合于进行Huffman编码。</p>
</li>
</ul>
<h4 id="逆过程"><a href="#逆过程" class="headerlink" title="逆过程"></a>逆过程</h4><ul>
<li>伪代码：<ol>
<li>L := L<sub>0</sub></li>
<li>for i := 0 to n - 1 do<ol>
<li>j := S<sup>MTF</sup>[i]</li>
<li>S<sup>BST</sup> := L[j]</li>
<li>将L[j]移动到L首部</li>
</ol>
</li>
</ol>
</li>
</ul>
<h3 id="Huffman编码"><a href="#Huffman编码" class="headerlink" title="Huffman编码"></a>Huffman编码</h3><h4 id="正过程-2"><a href="#正过程-2" class="headerlink" title="正过程"></a>正过程</h4><ul>
<li>伪代码：<ol>
<li>把字母表中的每个字符在S<sup>MTF</sup>中出现的次数进行统计，生成频率表F</li>
<li>使用频率表F构造码表T。对于任意两个字符a、b，如果F(a) &lt; F(b)，则|T(a)|&gt;=|T(b)|</li>
<li>将S<sup>MTF</sup>中的每个字符用T中对应的码字代替，生成S<sup>BW</sup>。S<sup>BW</sup>即为整个压缩算法的输出</li>
</ol>
</li>
<li>思考：<ul>
<li>源串中一个字符需要一个字节来存储；Huffman编码后字符由几个0、1比特表示，只需要几个位来存储。如果Huffman的平均字长小于8，则源文件体积能够减小。</li>
</ul>
</li>
</ul>
<h4 id="逆过程-1"><a href="#逆过程-1" class="headerlink" title="逆过程"></a>逆过程</h4><ul>
<li>显而易见。参考<em>解压的并行</em>一章</li>
</ul>
<h2 id="压缩的并行"><a href="#压缩的并行" class="headerlink" title="压缩的并行"></a>压缩的并行</h2><h3 id="BST-1"><a href="#BST-1" class="headerlink" title="BST"></a>BST</h3><ol>
<li><p>构建后缀树</p>
<ul>
<li><p>性能：</p>
<ul>
<li><p>Sahinalp and Vishkin的算法：<strong>O(log<sup>2</sup>n)时间，O(n)工作，O(n<sup>2</sup>)空间</strong></p>
</li>
<li><p>可以将空间复杂度降到O(n<sup>1+ε</sup>)，当时间增加1/ε倍</p>
</li>
<li><p>Hariharan的算法：<strong>O(log<sup>4</sup>n)时间，O(n)工作，O(n)空间</strong></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>DFS遍历后缀树，生成后缀数组<em>SA</em></p>
<ul>
<li>欧拉旅行技术</li>
<li>相同复杂度界限</li>
</ul>
</li>
<li><p>按照如下公式生成*S<sub>BST</sub>*：S<sup>BST</sup>[i]=S[(SA[i]-1)<sub>mod n</sub>], 0&lt;=i&lt;n</p>
<ul>
<li>性能：<strong>O(1)时间，O(n)工作</strong></li>
</ul>
</li>
</ol>
<h3 id="MTF编码"><a href="#MTF编码" class="headerlink" title="MTF编码"></a>MTF编码</h3><ul>
<li><p>定义</p>
<ul>
<li><em>MTF(X)<em>：同</em>L<sub>i</sub><em>，只不过</em>L<sub>i</sub><em>针对的是输入串的前缀，</em>MTF(X)<em>进行了扩展，针对任意子串</em>X</em></li>
<li><em>x⊕y</em>：  把在<em>y</em>中出现过的字符从<em>x</em>中移除生成一个列表，然后把这个列表拼接到<em>y</em>的后面<ul>
<li>注解：<em>y</em>不动，<em>x</em>中单独出现的部分拼在<em>y</em>后面</li>
</ul>
</li>
</ul>
</li>
<li><p>观察</p>
<ul>
<li><em>MTF(c)=(c)</em></li>
<li><em>MTF(XY)=MTF(X)⊕MTF(y)</em></li>
</ul>
</li>
<li><p>目标：计算所有<em>L<sub>i</sub><em>，即计算</em>S<sub>BST</sub><em>（考虑假定前缀）所有前缀的</em>MTF</em></p>
</li>
<li><p>步骤：</p>
<ol>
<li><p>将*S<sup>BST</sup>*的每个元素看成初始的列表，从下往上，在一棵平衡二叉树中用⊕运算符两两合并列表，直到根节点</p>
<p><img src="image-20230223145949221.png" alt="image-20230223145949221"></p>
</li>
<li><p>从上到下，计算每个节点的⊕运算前缀和（从根的最左叶子节点到当前子树的最右叶子节点）。叶子节点的前缀和即为<em>L<sub>i</sub></em></p>
</li>
</ol>
</li>
<li><p>性能：</p>
<ul>
<li>时间复杂度：<strong>O(|Σ|logn)时间，O(|Σ|n)工作</strong></li>
<li>空间复杂度：n|Σ|</li>
<li>权衡空间和时间的方法（划分粒度）：选取一个k&lt;n，只排序*L<sub>0</sub><em>、</em>L<sub>k</sub><em>、</em>L<sub>2k</sub>*、……。此时空间降低k倍，时间相应增加k倍</li>
</ul>
</li>
</ul>
<h3 id="Huffman编码-1"><a href="#Huffman编码-1" class="headerlink" title="Huffman编码"></a>Huffman编码</h3><p>看了，但暂时不关心，没记录</p>
<h2 id="解压的并行"><a href="#解压的并行" class="headerlink" title="解压的并行"></a>解压的并行</h2><h3 id="Huffman解码"><a href="#Huffman解码" class="headerlink" title="Huffman解码"></a>Huffman解码</h3><ul>
<li>难点：由于Huffman码字是变长的，需要选定*S<sup>BW</sup>*的分割位置</li>
<li>定义<em>l</em>为最长码字的长度。不失一般性，假定|<em>S<sup>BW</sup></em>|能够被<em>l</em>整除，我们要把<em>S<sup>BW</sup><em>分割为若干个长度为</em>l</em>的切分。目标是选定每个切分的开始位置</li>
<li>计算开始位置需要两个步骤：初始化-&gt;前缀和计算<ul>
<li>初始化阶段<ul>
<li>从<em>S<sup>BW</sup><em>中的每个位</em>S<sup>BW</sup><sub>i</sub><em>开始执行解码（解码一个码字）。对于每个</em>i</em>，获得一个停止解码的位置<em>j</em>。记为<em>i-&gt;j</em></li>
</ul>
</li>
<li>前缀和计算阶段<ul>
<li>对于形如<em>a-&gt;b</em>、<em>b-&gt;c</em>的映射，将他们合并为<em>a-&gt;c</em></li>
<li>合并后，<em>0</em>指向的所有位置都是开始位置，保存到集合<em>V</em>中</li>
</ul>
</li>
</ul>
</li>
<li>实际解码阶段如下：<ol>
<li>部署n/l个处理器，每个处理器指定集合<em>V</em>中一个不同的开始位置，并行执行哈夫曼解码，直到到达下一个开始位置。解码后先不写到内存。O(l)时间，O(n)工作</li>
<li>使用前缀和为每个处理器在<em>S<sup>MTF</sup><em>的输出分配空间。</em></em>O(log n)时间，O(n)工作**</li>
<li>重复步骤1，将输出写到*S<sup>MTF</sup>*。O(l)时间，O(n)工作</li>
</ol>
</li>
<li>实际解码阶段：O(logn+l)时间，O(n)工作</li>
<li><strong>思考：这么细的划分粒度值得吗？partition的块数太多了，是否可以不要分那么多</strong></li>
</ul>
<h3 id="MTF解码"><a href="#MTF解码" class="headerlink" title="MTF解码"></a>MTF解码</h3><ul>
<li>与编码类型</li>
<li>性能相同：<strong>O(|Σ|logn)时间，O(|Σ|n)工作</strong></li>
</ul>
<h3 id="IBST"><a href="#IBST" class="headerlink" title="IBST"></a>IBST</h3><ul>
<li><p>涉及Cole and Vishkin的整数排序算法</p>
<ul>
<li>性能：<strong>O(|Σ|logn)时间，O(|Σ|n)工作</strong></li>
</ul>
</li>
<li><p>性能：<strong>O(|Σ|logn)时间，O(|Σ|n)工作</strong></p>
</li>
</ul>
<h2 id="实验-2"><a href="#实验-2" class="headerlink" title="实验"></a>实验</h2><ul>
<li>这篇文章没有做实验</li>
<li>实验在另一篇文章<em>Empirical Speedup Study of Truly Parallel Data Compression</em></li>
</ul>
<h1 id="Empirical-Speedup-Study-of-Truly-Parallel-Data-Compression（块内压缩和解压）"><a href="#Empirical-Speedup-Study-of-Truly-Parallel-Data-Compression（块内压缩和解压）" class="headerlink" title="Empirical Speedup Study of Truly Parallel Data Compression（块内压缩和解压）"></a>Empirical Speedup Study of Truly Parallel Data Compression（块内压缩和解压）</h1><h2 id="实验-3"><a href="#实验-3" class="headerlink" title="实验"></a>实验</h2><ul>
<li><p>在XML计算平台的64-TCU FPGA上运行时，解压性能总体上看甚至略微下降了；在模拟的1024-TCU上运行时有提升</p>
<p><img src="image-20230223180343381.png" alt="image-20230223180343381"></p>
</li>
<li><p><strong>思考：这个是在专用的并行计算平台上运行的结果，对移动端的参考价值？</strong></p>
</li>
</ul>
<h1 id="Parallelizing-Bzip2-A-Case-Study-in-Multicore-Software-Engineering（学生作品）"><a href="#Parallelizing-Bzip2-A-Case-Study-in-Multicore-Software-Engineering（学生作品）" class="headerlink" title="Parallelizing Bzip2: A Case Study in Multicore Software Engineering（学生作品）"></a>Parallelizing Bzip2: A Case Study in Multicore Software Engineering（学生作品）</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>一个多核软件工程课程的最后三周，8名计算机科学专业的研究生2人一组进行比赛，对bzip2算法进行并行化</li>
<li>针对压缩</li>
</ul>
<h2 id="Team-1"><a href="#Team-1" class="headerlink" title="Team 1"></a>Team 1</h2><ul>
<li>发现细粒度的并行化不合适，需要大量努力重构代码</li>
<li>尝试用类重构，但最后ddl到了还是换回没有类的版本，整合了<strong>Bzip2SMP</strong>的一些并行化思想</li>
</ul>
<h2 id="Team-2（winner）"><a href="#Team-2（winner）" class="headerlink" title="Team 2（winner）"></a>Team 2（winner）</h2><ul>
<li>重构花了很长时间，最后一天才写并行</li>
<li>生产者-消费者模式+pthreads</li>
<li>流水线没时间写了</li>
</ul>
<h2 id="Team-3"><a href="#Team-3" class="headerlink" title="Team 3"></a>Team 3</h2><ul>
<li>master-worker方法<ul>
<li>master程序向一个缓冲区填充块，worker程序从缓冲区中取出块来进行压缩</li>
<li>线程同步和文件顺序输出遇到困难</li>
</ul>
</li>
<li>超时了</li>
</ul>
<h2 id="Team-4"><a href="#Team-4" class="headerlink" title="Team 4"></a>Team 4</h2><ul>
<li>用openmp，性能较差</li>
<li>大部分时间花在理解代码</li>
</ul>
<h2 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h2><ul>
<li><p>并行化之前需要重构代码</p>
</li>
<li><p>增量并行化没有作用</p>
<ul>
<li>例如用OpenMP在代码开头加pragma</li>
</ul>
</li>
<li><p>研究关键路径行不通</p>
<ul>
<li>例如用profile工具</li>
<li>顺序实现通常涉及设计选择，排除了并行化可能需要的自由度</li>
<li>因此，仅仅研究顺序实现是不够的，还需要研究规范</li>
</ul>
</li>
<li><p>细粒度并行不是唯一选择</p>
<ul>
<li>例如，关键路径上循环的并行化只产生很小的速度提升</li>
</ul>
</li>
<li><p>寻找高层次并行化</p>
<ul>
<li>例如，引入<strong>生产者-消费者模式或者master-worker模式</strong></li>
<li>代码实现涉及的细节更多</li>
</ul>
</li>
<li><p>试错是有风险的</p>
</li>
<li><p>并行化不是黑色艺术</p>
</li>
</ul>
<h2 id="Advice"><a href="#Advice" class="headerlink" title="Advice"></a>Advice</h2><ul>
<li><p>并行时考虑多个层次</p>
<ul>
<li>不然就会“一分钱一分货”</li>
</ul>
</li>
<li><p>如果从0开始写顺序代码，要为并行化考虑</p>
</li>
<li><p>多练习</p>
</li>
</ul>
<h1 id="相关前置知识"><a href="#相关前置知识" class="headerlink" title="相关前置知识"></a>相关前置知识</h1><ul>
<li><a href="https://blog.csdn.net/weixin_43838265/article/details/117324663">自适应（动态）哈夫曼编码与解码过程_菜鸟的逆袭之路的博客-CSDN博客_动态哈夫曼编码</a><ul>
<li><em>Parallel algorithms for Burrows–Wheeler compression and decompression</em>中使用的Huffman编码是动态的，因为没有提到要存Huffman树</li>
</ul>
</li>
<li><a href="https://zhuanlan.zhihu.com/p/91089093">并行算法科普向 系列之二：前缀和，fork-join 和矩阵乘法 - 知乎 (zhihu.com)</a></li>
<li>值预测算法：见文章<em>Value Prediction for Speculative Multithreaded Architectures</em><ul>
<li><em>Practical Speculative Parallelization of Variable-Length Decompression Algorithms</em>中提到值预测算法不可用</li>
<li>值预测技术基于以下推测：在大量的时间内，值倾向于重复，或者遵循一个已知的模式。因此，如果使用恰当的机制，值可能能够被正确地预测。这些机制的基础是存储反映近期观察到的历史信息的表格</li>
<li>分类<ul>
<li>基于指令的值预测器</li>
<li>基于追踪的值预测器</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="相关实现"><a href="#相关实现" class="headerlink" title="相关实现"></a>相关实现</h1><h2 id="bwtzip"><a href="#bwtzip" class="headerlink" title="bwtzip"></a>bwtzip</h2><ul>
<li><a href="https://nuwen.net/bwtzip.html">bwtzip - nuwen.net</a></li>
<li>他是高度模块化的，或许可以帮助我后续的代码重构和实现</li>
</ul>
<h1 id="相关会议"><a href="#相关会议" class="headerlink" title="相关会议"></a>相关会议</h1><ul>
<li>Data Compression Conference：<a href="https://ieeexplore.ieee.org/xpl/conhome/9810654/proceeding">IEEE Xplore - Conference Table of Contents</a></li>
</ul>
]]></content>
      <tags>
        <tag>差量压缩</tag>
      </tags>
  </entry>
  <entry>
    <title>raft相关问题</title>
    <url>/2023/03/29/raft%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="Raft的一致性复制过程"><a href="#Raft的一致性复制过程" class="headerlink" title="Raft的一致性复制过程"></a>Raft的一致性复制过程</h1><a id="more"></a>

<ol>
<li>客户端向leader发送请求</li>
<li>leader向自己的日志增加一条新entry，然后向所有的follower并行发送AppendEntries RPC来复制这条新entry。AppendEntries RPC可以一次性发送多条entry。</li>
<li>follower通过AppendEntries RPC中的prevLogIndex和prevLogTerm查找本地是否拥有这条entry的前一条entry，如果有，则删除其后所有冲突的entry，然后添加新entry，向leader发送success响应</li>
<li>当leader接收到来自过半数follower的success响应时，则将这条entry标记为commited，并在随后发送的AppendEntries RPC中将最新的leaderCommit发送给所有follower</li>
<li>follower将自己的commitIndex更新为leaderCommit和本地最新index的最小值</li>
<li>所有服务器（包括leader、candidate和follower）定期将本地commitIndex对应的entry应用（apply）到本地状态机上</li>
<li>leader将entry应用到本地状态机后，响应客户端</li>
</ol>
<h1 id="当一个leader崩溃时，candidate当选leader的条件"><a href="#当一个leader崩溃时，candidate当选leader的条件" class="headerlink" title="当一个leader崩溃时，candidate当选leader的条件"></a>当一个leader崩溃时，candidate当选leader的条件</h1><ul>
<li>candidate的日志至少要比过半数的followr更up-to-date，才可以获得过半数投票当选leader：</li>
<li><img src="image-20230328174100075.png" alt="image-20230328174100075"></li>
<li>原因如下：当candidate满足这个条件是，它会包含所有已提交的entry：</li>
<li><img src="image-20230328174442878.png" alt="image-20230328174442878"></li>
<li>up-to-date的比较规则：先比较term，term相同再比较index</li>
</ul>
<h1 id="在一致性复制的不同阶段leader崩溃时，Raft分别如何处理？"><a href="#在一致性复制的不同阶段leader崩溃时，Raft分别如何处理？" class="headerlink" title="在一致性复制的不同阶段leader崩溃时，Raft分别如何处理？"></a>在一致性复制的不同阶段leader崩溃时，Raft分别如何处理？</h1><h2 id="数据到达leader，但未复制到大多数follower"><a href="#数据到达leader，但未复制到大多数follower" class="headerlink" title="数据到达leader，但未复制到大多数follower"></a>数据到达leader，但未复制到大多数follower</h2><ul>
<li>这条entry还没有被提交，剩余的节点会选出一个包含所有已提交日志的leader</li>
<li>当leader包含这条未提交的entry时，会对其进行间接提交<ul>
<li>如果客户端还在原有的崩溃节点等待，当崩溃节点恢复时，会接收到新leader提交的这条entry，并应用到状态机，从而响应客户端</li>
<li>如果客户端向新的leader再次发送了这条请求，由于请求中含有客户端指定的唯一ID，尽管Raft提交了两条重复的请求，但只会向状态机应用一次</li>
<li>由于这条指令被间接提交后会被应用到每个可用节点的server层，因此<strong>客户端必须重试</strong>。如果客户端不重试，则会有一条错误的指令被执行。也就是说，<strong>一旦用户在客户端发送了一条请求，则这条请求不能够被撤回</strong>。</li>
<li><strong>简而言之，此时的一致性由客户端指定的唯一操作ID保证</strong></li>
</ul>
</li>
</ul>
<h2 id="数据到达leader，成功复制到大多数follower，但leader未接收到过半数的响应"><a href="#数据到达leader，成功复制到大多数follower，但leader未接收到过半数的响应" class="headerlink" title="数据到达leader，成功复制到大多数follower，但leader未接收到过半数的响应"></a>数据到达leader，成功复制到大多数follower，但leader未接收到过半数的响应</h2><ul>
<li>同上</li>
</ul>
<h2 id="数据到达leader，成功接收到了过半数的follower响应，但未更新commitIndex"><a href="#数据到达leader，成功接收到了过半数的follower响应，但未更新commitIndex" class="headerlink" title="数据到达leader，成功接收到了过半数的follower响应，但未更新commitIndex"></a>数据到达leader，成功接收到了过半数的follower响应，但未更新commitIndex</h2><ul>
<li>只要未apply，就不会响应客户端。由于commitIndex未更新，因此视为没有commit，同上</li>
</ul>
<h2 id="数据到达leader，成功复制并且更新了commitIndex，但未在本地apply且未将commitIndex发送给大多数follower"><a href="#数据到达leader，成功复制并且更新了commitIndex，但未在本地apply且未将commitIndex发送给大多数follower" class="headerlink" title="数据到达leader，成功复制并且更新了commitIndex，但未在本地apply且未将commitIndex发送给大多数follower"></a>数据到达leader，成功复制并且更新了commitIndex，但未在本地apply且未将commitIndex发送给大多数follower</h2><ul>
<li>新leader没有更新commitIndex，视为未commit。本机未apply，未响应客户端。因此不会有问题，同上</li>
</ul>
<h2 id="数据到达leader，成功复制并且更新了commitIndex，已在本地apply，但未将commitIndex发送给大多数follower"><a href="#数据到达leader，成功复制并且更新了commitIndex，已在本地apply，但未将commitIndex发送给大多数follower" class="headerlink" title="数据到达leader，成功复制并且更新了commitIndex，已在本地apply，但未将commitIndex发送给大多数follower"></a>数据到达leader，成功复制并且更新了commitIndex，已在本地apply，但未将commitIndex发送给大多数follower</h2><ul>
<li>新leader没有更新commitIndex，视为未commit，但新leader的日志中包含这条entry，会对其间接提交。</li>
<li>原本发送请求的客户端接收了正确的响应。间接提交后所有节点的server层也能够正确执行这条指令。</li>
</ul>
<h2 id="数据到达leader，成功复制并且更新了commitIndex，未在本地apply，但已将commitIndex发送给大多数follower"><a href="#数据到达leader，成功复制并且更新了commitIndex，未在本地apply，但已将commitIndex发送给大多数follower" class="headerlink" title="数据到达leader，成功复制并且更新了commitIndex，未在本地apply，但已将commitIndex发送给大多数follower"></a>数据到达leader，成功复制并且更新了commitIndex，未在本地apply，但已将commitIndex发送给大多数follower</h2><ul>
<li>新leader会apply这条指令。当客户端在新leader重试时，通过操作ID可以发现这条指令已经被执行了，直接返回success。如果客户端还在原leader等待，当原leader重启时也会apply这条指令并响应客户端</li>
</ul>
<h1 id="网络分区问题"><a href="#网络分区问题" class="headerlink" title="网络分区问题"></a>网络分区问题</h1><ul>
<li>假设小分区和大分区均存在leader，均可以接收客户端请求。小分区当中的entry，由于无法append到大多数，因此永远不会被commit；大分区当中的所有entry会被commit和apply。相应地，大分区的客户端请求可以被正确执行，而小分区的客户端请求会一直超时重试。</li>
<li>当小分区与大分区合并时，term更高的那个leader会成为整个集群的leader，其日志被复制到整个集群。</li>
<li><strong>大分区的leader一定是term更高的</strong>，因为网络分区后，小分区中的票数不足，无法选举产生term更大的leader。所以新leader一定是大分区的leader，不会出现大分区的日志被小分区覆盖，导致已执行的客户端请求丢失的情况。</li>
<li>当分区合并后，小分区的leader变为follower，那些一直在超时重试的请求会返回失败。</li>
</ul>
<h2 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h2><ul>
<li>在多节点系统当中，CAP三个性质只能同时满足两个<ul>
<li>Consistence一致性：数据在多个副本之间保持一致的特性</li>
<li>Availability可用性：服务一直可用（但是不保证获取的数据为最新数据）</li>
<li>Network Partitioning分区容错性：网络分区故障时仍然能对外提供满足一致性和可用性的服务，除非整个网络都发生了故障</li>
</ul>
</li>
<li>raft的网络分区满足了AP特性：当网络分区时，如果要保证服务可用性，则副本之间有可能存在不一致。反之，如果对于副本的一致性有要求，例如金融系统，在网络分区情况下服务是不可用的，必须等到网络分区恢复。</li>
</ul>
<h1 id="Raft与一致性"><a href="#Raft与一致性" class="headerlink" title="Raft与一致性"></a>Raft与一致性</h1><ul>
<li>有一种说法是，<strong>raft与一致性无关，raft只实现了共识，一致性针对的是服务，取决于上层应用。</strong>然而我认为一致性是服务和raft共同保证的。我的6.824 KV数据库的强一致性由<strong>服务层的唯一操作ID</strong>和<strong>raft层对读操作的共识</strong>共同实现。</li>
<li>如果只考虑raft，那么raft也必须为强一致性提供保证，即避免脏读。一种方法是我的读操作共识方法，另一种方法见下一小节。</li>
</ul>
<h2 id="一致性类型"><a href="#一致性类型" class="headerlink" title="一致性类型"></a>一致性类型</h2><ul>
<li><p>最终一致性：写入过程中，客户端可能读到旧值，也可能读到新值</p>
</li>
<li><p>线性一致性（强一致）：当其中一个客户端读到了新的数据，所有的客户端都立即能够获取新数据</p>
</li>
<li><p><strong>我的raft实现对于读请求必须达成共识，因此实现了强一致性</strong>。因为读请求之前的写请求对应的entry都被commit了，杜绝了“在写的过程中读”这回事</p>
</li>
</ul>
<h1 id="如果不想为读操作添加entry，应该怎么避免脏读"><a href="#如果不想为读操作添加entry，应该怎么避免脏读" class="headerlink" title="如果不想为读操作添加entry，应该怎么避免脏读"></a>如果不想为读操作添加entry，应该怎么避免脏读</h1><ul>
<li><p>我的KV数据库实现为所有的读操作添加entry，等到该entry达成共识时才响应客户端，会带来较高的延迟</p>
</li>
<li><p>如果不为读操作添加entry，在不引入其他额外措施的情况下会发生脏读（论文第8节最后一段）：客户端读到了旧leader的值，而这个值已经被新leader修改了，但是由于网络分区等原因，旧leader还没有意识到他已经不是leader了。</p>
</li>
<li><p>为了防止脏读，需要引入下列两个措施：</p>
<ol>
<li><p>leader必须拥有之前所有被提交的日志，leader完整性可以保证leader最终会拥有所有已提交的日志，但在任期刚开始时可能还没拥有。此时需要发送一个no-op的空entry，<strong>以强制提交leader拥有的之前任期未被提交的日志</strong></p>
</li>
<li><p>leader在响应读请求之前必须确保它仍然是leader，可以通过发送心跳，接收大多数节点的响应来检查</p>
</li>
</ol>
</li>
</ul>
<h2 id="为什么需要提交no-op"><a href="#为什么需要提交no-op" class="headerlink" title="为什么需要提交no-op"></a>为什么需要提交no-op</h2><ul>
<li>如果leader在其任期开始时拥有之前任期的未被提交的日志，那么这条日志最终会被提交，然而leader在此时向客户端返回的是这条日志未提交的状态，产生了脏读</li>
<li>提交no-op可以强制提交这条日志，使leader更新到最新的状态</li>
<li><strong>在我的6.824 KV数据库实现当中，由于采用了读共识，因此不需要提交no-op</strong></li>
</ul>
<h1 id="为什么leader不能直接提交之前任期的entry"><a href="#为什么leader不能直接提交之前任期的entry" class="headerlink" title="为什么leader不能直接提交之前任期的entry"></a>为什么leader不能直接提交之前任期的entry</h1><ul>
<li>论文中的Figure 8进行了解释：</li>
<li><img src="https://baixiangcpp.oss-cn-shanghai.aliyuncs.com/blog/raft-paper/raft-8.png" alt="Figure 8"></li>
<li>简而言之，leader只能在提交本任期日志的过程中，通过日志匹配规则“间接提交”之前任期的日志。如果直接提交之前任期的日志，则这条日志有可能被覆盖。</li>
<li>图中方框中的数字表示日志的任期，带黑框框的节点为leader。并且需要注意每个leader的任期：(c)中的S1为term=4，(d)中的S5为term=5</li>
<li>如果允许leader直接提交之前任期的entry，则第一步：(c)中S1向大多数节点复制并提交了term=2的日志，然后崩溃了。第二步：(d)中S5的日志比大多数节点都要up-to-date，被成功选为leader，然后用自己的蓝色日志覆盖了黄色日志。</li>
<li>如果不允许直接提交，则第一步：(c)提交了term=4的红色日志，并且间接提交了term=2的黄色日志，变为(e)。此时，S5的日志没有比大多数节点up-to-date，<strong>无法被选为leader</strong>。</li>
</ul>
<h1 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h1><h2 id="为什么follower需要随机超时"><a href="#为什么follower需要随机超时" class="headerlink" title="为什么follower需要随机超时"></a>为什么follower需要随机超时</h2><ul>
<li>为了防止多个follower同时变为candidate，造成split vote</li>
</ul>
]]></content>
      <tags>
        <tag>分布式系统</tag>
      </tags>
  </entry>
</search>
